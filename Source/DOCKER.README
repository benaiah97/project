################################################################################
USING DOCKER FORT DTIGATEWAY DEVELOPMENT  
AUTHOR: DR. SHAN MOON (MOONS012, SHAN.M.MOON@DISNEY.COM)
################################################################################

This document details how to use the docker images from a docker command line. Work is in progress to use a maven docker plugin to build images, but at this time we must run docker commands directly from a docker shell.

NOTE: The Docker setup may not (yet) use all recommended best practices for CI/CD pipelines. It is intended as a quick n dirty local docker solution to eliminate the need for local dev environment setup and the issues that often occur with local dev environments.

This README does not provide an in-depth explanation of docker synax, and uses simple examples for the purpose of getting started. In depth and high quality documentation can be found on docker.com. It would be pointless
to reproduce it here. Be aware that an image and a container are not the same construct.

See https://docs.docker.com/ for complete Docker documentation

################################################################################
LIST OF THE COMMANDS YOU WILL COMMONLY USE FOR DOCKER
SEE https://docs.docker.com/engine/reference/commandline/docker/#child-commands FOR A FULL LIST OF COMMANDS
################################################################################

docker-machine ip
docker build -t dtigateway:latest .
docker run --name gateway -it -p 8080:8080 -p 8000:8000 --rm dtigateway:latest
docker exec -i -t gateway /bin/bash 
docker stop gateway
docker kill gateway
docker ps -a
docker images (useful for listing images for cleanup)
docker rm  <name or id> (remove one or more containers)
docker rmi (remove one or more images)
docker top gateway
docker stats gateway
docker info

################################################################################
PRE-REQUISITES
################################################################################
Pre-requisite requirements for running Docker are listed below. It is assumed that anyone competent enough to
be working on this app has the basic core competency required to install/configure the pre-requisites below.

BIOS
You must turn on support for virutalization in your BIOS settings. Most BIOS have this off by default. Without virtualization enabled in the BIOS you cannot succesfully run Docker.

DOCKER
Windows 7: Install Docker Toolbox with VirtualBox (download from Docker.com)
Window 10/OSX/Linux: Install native docker (download from Docker.com)

DTIGATEWAY:
This assumes you have already built the war and it is in the gatewaywar/target folder.

################################################################################
BUILDING THE DOCKER IMAGE 
################################################################################

Open Docker quickstart terminal (Windows 7). For better/more modern operating systems just open a shell.

Build the image locally or get it from the (as of yet non-existant) dti docker repository.

If building locally and not pulling from a repo (and we are, no repo exists yet): cd to DTIGateway/Source folder.

When performing the build, multiple (optional) arguments can be included to set time zone or environment.

The build command defaults to using the configs in dti-gateway-config/LOCAL
It also defaults to eastern time zone.

docker build -t dtigateway:latest .

If you need to use a different config, the supply the build argument CONFIG and a value, such as DEV_HK.

If you need to use a differnt timezone, then supply the build argument TIMEZONE and a value such as Asia/Hong_Kong

For example: to use the domestic DEV config:
 
docker build --build-arg CONFIG=LOCAL -t dtigateway:DEV .

For example: to use the HKDL Local config:
docker build --build-arg CONFIG=LOCAL_HK -t dtigateway:LOCAL_HK .

Another exeample: specify the HKDL timezone, and this time building with the DEV_HK configuration and taiing the image DEV_HK

docker build --build-arg CONFIG=DEV_HK --build-arg TIMEZONE=Asia/Hong_Kong -t dtigateway:DEV_HK .

################################################################################
RUNNING THE DOCKER CONTAINER FROM THE IMAGE
################################################################################

How to run the container and start the default Tomcat server (CMD ["catalina.sh", "run"]):

This assumes http and port 8080 (tomcat) and 8000 (jpda debugger) are free on your box. You can remap to other ports as you choose and modify the command accordingly.

A few examples running different tagged images:
docker run --name gateway -it -p 8080:8080 -p 8000:8000 --rm dtigateway:latest

docker run --name gateway -it -p 8080:8080 -p 8000:8000 --rm dtigateway:DEV_HK

docker run --name gateway -it -p 8080:8080 -p 8000:8000 --rm dtigateway:DEV_HK

docker run --name gateway -it -p 8080:8080 -p 8000:8000 --rm dtigateway:LOCAL_HK

Find the IP of your docker machine 
$ docker-machine ip

You can then go to http://<ip>:8080 

The Tomcat manager gui and admin gui are enabled.
user: tomcat pw: dti

To open a bash shell on a running container

get the list of running containers so you can grab an id or name
docker ps

docker exec -i -t <insert container id> /bin/bash #by ID
or
docker exec -i -t <insert container name> /bin/bash #by Name
 
docker exec -i -t gateway /bin/bash
  
The default local network ip for dockker images 192.168.99.100, so your
endpoint for SOAP  UI testing will probably be h ttp://192.168.99.100:8080/DTIApp/DTIApp
(assumming you are using a IAGO.properties endoint that is http.
  
Confirm this by checking the IP address of your docker machine as detailed above.
  
If you want to test with SSL for LOCAL configs you will have to change the
IAGO.properties endpoint and change the port mapping when run the tagged image,
and we would probably have to modify the Docker file to custome the server.xml
for tomcat to specify https. I might add that as a build argument at some point. 
  
################################################################################
STOPPING THE DOCKER CONTAINER
################################################################################
docker stop <name or id> 

for our example:
	docker stop dtigateway   

################################################################################
USING SSL
################################################################################
  
  If you want to test with SSL for LOCAL configs you will have to change the
  the port mapping when run the tagged image, add provide an updates server.xml for tomcat and modify
  the Dockerfile to use that when building the image. I might add that as a build argument at some point. 
  
################################################################################
READ BEFORE MAKING CHANGES TO THE DOCKERFILE
################################################################################
  
NOTE: If you make changes to the docker file use UNIX file format. Some properties with CR/LF can cause issues due to Docker Toolbox.

################################################################################
DOCKER TOOLBOX IMAGE RUNS OUT OF SPACE
################################################################################

If you are using docker toolbox on Windows and your VM runs out of space, prune unused images:
    docker rmi $(docker images -q -f "dangling=true")

Alternatively you can edit the json config in your <user home directory>/.docker and change the storage limit.

Docker toolbox is not as robust as the native docker available on Linux/OSX/Windows 10 so know what you are doing before you change the machine config. However, you can always delete it and the docker quick terminal will
recreate it next time you start if you acidentally break it.