<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project name="DTI Transactions 2_XP_L" resourceRoot="${projectDir}" soapui-version="5.3.0" activeEnvironment="Default" id="917316cd-8eb4-47f7-be46-fb45f7a27c49" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="DisneyTicketingServiceSoapBinding" type="wsdl" bindingName="{http://services.dti.wdw.com/DisneyTicketingService/}DisneyTicketingServiceSoapBinding" soapVersion="1_1" anonymous="optional" definition="file:/C:/Documents%20and%20Settings/lewit019/My%20Documents/DTI/Interface%20Specifications/DTI%20Tixml/dtiTixml.wsdl" id="971da5b4-a7a5-47f4-b8af-a8e4c7f3b733" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/C:/Documents%20and%20Settings/lewit019/My%20Documents/DTI/Interface%20Specifications/DTI%20Tixml/dtiTixml.wsdl"><con:part><con:url>file:/C:/Documents%20and%20Settings/lewit019/My%20Documents/DTI/Interface%20Specifications/DTI%20Tixml/dtiTixml.wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="DisneyTicketingService" targetNamespace="http://services.dti.wdw.com/DisneyTicketingService/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://services.dti.wdw.com/DisneyTicketingService/" xmlns:transReq="http://services.dti.wdw.com/DisneyTicketingService/types/TransmissionRequest" xmlns:transAns="http://services.dti.wdw.com/DisneyTicketingService/types/TransmissionAnswer" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns="http://schemas.xmlsoap.org/soap/encoding/">
  <wsdl:documentation>Copyright 2008 Walt Disney WorldÂ®. All rights reserved.
		WSDL Service Interface for DTI.</wsdl:documentation>
  <wsdl:types>
    <xsd:schema targetNamespace="http://services.dti.wdw.com/DisneyTicketingService/" elementFormDefault="qualified" attributeFormDefault="unqualified">
      <xsd:import namespace="http://services.dti.wdw.com/DisneyTicketingService/types/TransmissionRequest" schemaLocation="TransmissionRequestProxy.xsd"/>
      <xsd:import namespace="http://services.dti.wdw.com/DisneyTicketingService/types/TransmissionResponse" schemaLocation="TransmissionResponseProxy.xsd"/>
    </xsd:schema>
  </wsdl:types>
  <wsdl:message name="TransmissionRequest">
    <wsdl:part name="TransmissionRequest" element="transReq:Transmission"/>
  </wsdl:message>
  <wsdl:message name="TransmissionResponse">
    <wsdl:part name="TransmissionResponse" element="transAns:Transmission"/>
  </wsdl:message>
  <wsdl:portType name="DisneyTicketingServicePortType">
    <wsdl:operation name="transmission">
      <wsdl:input message="tns:TransmissionRequest"/>
      <wsdl:output message="tns:TransmissionResponse"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="DisneyTicketingServiceSoapBinding" type="tns:DisneyTicketingServicePortType">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="transmission">
      <soap:operation soapAction="http://services.dti.wdw.com/DisneyTicketingService/transmission"/>
      <wsdl:input>
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>file:\C:\Documents%20and%20Settings\lewit019\My%20Documents\DTI\Interface%20Specifications\DTI%20Tixml\TransmissionRequestProxy.xsd</con:url><con:content>&lt;xsd:schema targetNamespace="http://services.dti.wdw.com/DisneyTicketingService/types/TransmissionRequest" elementFormDefault="qualified" attributeFormDefault="unqualified" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:transReq="http://services.dti.wdw.com/DisneyTicketingService/types/TransmissionRequest">
  &lt;xsd:include schemaLocation="dtigatewayrequest.xsd"/>
&lt;/xsd:schema></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\C:\Documents%20and%20Settings\lewit019\My%20Documents\DTI\Interface%20Specifications\DTI%20Tixml\dtigatewayrequest.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2007 sp2 (http://www.altova.com) by James Todd Lewis (WALT DISNEY WORLD CO.)-->
<!--TiXML 1.0  12/17/02  Copyright The Walt Disney Company-->
<xs:schema elementFormDefault="qualified" version="1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:element name="Transmission">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Payload">
          <xs:complexType>
            <xs:sequence>
              <xs:element ref="PayloadHeader"/>
              <xs:element name="Command">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element ref="CommandHeader"/>
                    <xs:element ref="QueryTicketRequest" minOccurs="0"/>
                    <xs:element ref="UpgradeAlphaRequest" minOccurs="0"/>
                    <xs:element ref="VoidTicketRequest" minOccurs="0"/>
                    <xs:element ref="ReservationRequest" minOccurs="0"/>
                    <xs:element ref="CreateTicketRequest" minOccurs="0"/>
                    <xs:element ref="UpdateTicketRequest" minOccurs="0"/>
                    <xs:element ref="UpdateTransactionRequest" minOccurs="0"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="PayloadHeader">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="PayloadID" type="xs:string"/>
        <xs:element name="Target" type="xs:string"/>
        <xs:element name="Version" type="xs:string"/>
        <xs:element name="Priority" type="xs:string" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported by DTI</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="ProcMethod" type="xs:string" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported by DTI</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="Comm">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Protocol" type="xs:string"/>
              <xs:element name="Method" type="xs:string"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="TransmitDate" type="xs:date"/>
        <xs:element name="TransmitTime" type="xs:string"/>
        <xs:element name="TktSeller">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="TSMAC" type="xs:string"/>
              <xs:element name="TSSystem" type="xs:string"/>
              <xs:element name="TSLocation" type="xs:string"/>
              <xs:element name="TSSecurity" type="xs:string"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="PostHdrWork" type="xs:string" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported by DTI</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="CommandCount" type="xs:integer"/>
        <xs:element name="PayloadNote" type="xs:string" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported by DTI</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="CommandHeader">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="CmdItem" type="xs:integer"/>
        <xs:element name="CmdProcRule" minOccurs="0" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation>Not supported by DTI</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Rule" type="xs:string"/>
              <xs:element name="Value" type="xs:string"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="CmdTimeout" type="xs:integer" minOccurs="0"/>
        <xs:element name="CmdDate" type="xs:date"/>
        <xs:element name="CmdTime" type="xs:string"/>
        <xs:element name="CmdInvoice" type="xs:string"/>
        <xs:element name="CmdDevice" type="xs:string"/>
        <xs:element name="CmdOperator" type="xs:string"/>
        <xs:element name="CmdActor" type="xs:string" minOccurs="0"/>
        <xs:element name="CmdSecurity" type="xs:string" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported by DTI</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="CmdNote" type="xs:string" minOccurs="0"/>
        <xs:element name="CmdMarket" type="xs:string" minOccurs="0"/>
        <xs:element name="CmdAttribute" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="AttribName" type="xs:string"/>
              <xs:element name="AttribValue" type="xs:string"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="QueryTicketRequest">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Ticket" maxOccurs="unbounded">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="TktItem" type="xs:integer"/>
              <xs:element name="TktID">
                <xs:complexType>
                  <xs:choice>
                    <xs:element name="Mag">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="MagTrack1" type="xs:string"/>
                          <xs:element name="MagTrack2" type="xs:string" minOccurs="0"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="Barcode" type="xs:string"/>
                    <xs:element name="TktDSSN">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="TktDate" type="xs:date"/>
                          <xs:element name="TktSite" type="xs:string"/>
                          <xs:element name="TktStation" type="xs:string"/>
                          <xs:element name="TktNbr" type="xs:string"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="TktNID" type="xs:string"/>
                    <xs:element name="External" type="xs:string"/>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="UpgradeAlphaRequest">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Ticket" maxOccurs="unbounded">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="TktItem" type="xs:integer"/>
              <xs:element name="ProdCode" type="xs:string"/>
              <xs:element name="ProdPrice" type="xs:string" minOccurs="0"/>
              <xs:element name="TktID">
                <xs:complexType>
                  <xs:choice>
                    <xs:element name="Mag">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="MagTrack1" type="xs:string"/>
                          <xs:element name="MagTrack2" type="xs:string" minOccurs="0"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="Barcode" type="xs:string"/>
                    <xs:element name="TktDSSN">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="TktDate" type="xs:date"/>
                          <xs:element name="TktSite" type="xs:string"/>
                          <xs:element name="TktStation" type="xs:string"/>
                          <xs:element name="TktNbr" type="xs:string"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="TktNID" type="xs:string"/>
                    <xs:element name="External" type="xs:string"/>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktStatus" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="StatusItem" type="xs:string"/>
                    <xs:element name="StatusValue" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktValidity" minOccurs="0">
                <xs:complexType>
                  <xs:choice maxOccurs="unbounded">
                    <xs:element name="ValidStart" type="xs:date" minOccurs="0"/>
                    <xs:element name="ValidEnd" type="xs:date" minOccurs="0"/>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktSecurity" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:choice maxOccurs="unbounded">
                    <xs:element name="Type" type="xs:string" minOccurs="0"/>
                    <xs:element name="Level" type="xs:string" minOccurs="0"/>
                    <xs:element name="Template" type="xs:string" minOccurs="0"/>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktShell" type="xs:string" minOccurs="0"/>
              <xs:element name="TktMarket" type="xs:string" minOccurs="0"/>
              <xs:element name="TktGroupSize" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktNote" type="xs:string" minOccurs="0"/>
              <xs:element name="TktDemoData" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:attribute name="Name" type="xs:string" use="optional"/>
                  <xs:attribute name="Last" type="xs:string" use="optional"/>
                  <xs:attribute name="First" type="xs:string" use="optional"/>
                  <xs:attribute name="Addr1" type="xs:string" use="optional"/>
                  <xs:attribute name="Addr2" type="xs:string" use="optional"/>
                  <xs:attribute name="City" type="xs:string" use="optional"/>
                  <xs:attribute name="State" type="xs:string" use="optional"/>
                  <xs:attribute name="Zip" type="xs:string" use="optional"/>
                  <xs:attribute name="Country" type="xs:string" use="optional"/>
                  <xs:attribute name="Telephone" type="xs:string" use="optional"/>
                  <xs:attribute name="DOB" type="xs:string" use="optional"/>
                  <xs:attribute name="Email" type="xs:string" use="optional"/>
                  <xs:attribute name="Gender" type="xs:string" use="optional"/>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Payment" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="PayItem" type="xs:string"/>
              <xs:element name="PayType">
                <xs:complexType>
                  <xs:choice>
                    <xs:element name="Cash" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CreditLine" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CreditCard">
                      <xs:complexType>
                        <xs:choice>
                          <xs:element name="CCManual">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element name="CCNbr" type="xs:string"/>
                                <xs:element name="CCExpiration" type="xs:string"/>
                                <xs:element name="CCVV" type="xs:string" minOccurs="0"/>
                                <xs:element name="CCName" type="xs:string" minOccurs="0"/>
                                <xs:element name="CCStreet" type="xs:string" minOccurs="0"/>
                                <xs:element name="CCZipcode" type="xs:string" minOccurs="0"/>
                                <xs:element name="CCCAVV" type="xs:string" minOccurs="0"/>
                                <xs:element name="CCEcommerce" type="xs:string" minOccurs="0"/>
                                <xs:element name="CCType" type="xs:string" minOccurs="0"/>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                          <xs:element name="CCSwipe">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element name="CCTrack1" type="xs:string"/>
                                <xs:element name="CCTrack2" type="xs:string"/>
                                <xs:element name="CCVV" type="xs:string" minOccurs="0"/>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                        </xs:choice>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="DisneyDollars" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="JobNbr" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="Voucher">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="MainCode" type="xs:string"/>
                          <xs:element name="UniqueCode" type="xs:string" minOccurs="0"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="GiftCard">
                      <xs:complexType>
                        <xs:choice>
                          <xs:element name="GCManual">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element name="GCNbr" type="xs:string"/>
                                <xs:element name="GCStartDate" type="xs:date" minOccurs="0"/>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                          <xs:element name="GCSwipe">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element name="GCTrack1" type="xs:string" minOccurs="0"/>
                                <xs:element name="GCTrack2" type="xs:string"/>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                        </xs:choice>
                      </xs:complexType>
                    </xs:element>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
              <xs:element name="PayAmount" type="xs:string" minOccurs="0"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Eligibility" minOccurs="0">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Group" type="xs:string"/>
              <xs:element name="Member" type="xs:string"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Client" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported by DTI</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="ClientType" type="xs:string"/>
              <xs:element name="ClientID" type="xs:string"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="SalesRep" type="xs:string" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported by DTI</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="Agency" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported by DTI</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:choice maxOccurs="unbounded">
              <xs:element name="IATA" type="xs:string"/>
              <xs:element name="OTA" type="xs:string"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="VoidTicketRequest">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Ticket" maxOccurs="unbounded">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="TktItem" type="xs:string"/>
              <xs:element name="TktID">
                <xs:complexType>
                  <xs:choice>
                    <xs:element name="Mag">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="MagTrack1" type="xs:string"/>
                          <xs:element name="MagTrack2" type="xs:string" minOccurs="0"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="Barcode" type="xs:string"/>
                    <xs:element name="TktDSSN">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="TktDate" type="xs:string"/>
                          <xs:element name="TktSite" type="xs:string"/>
                          <xs:element name="TktStation" type="xs:string"/>
                          <xs:element name="TktNbr" type="xs:string"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="TktNID" type="xs:string"/>
                    <xs:element name="External" type="xs:string"/>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktStatus" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation>Not supported in DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="StatusItem" type="xs:string"/>
                    <xs:element name="StatusValue" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktValidity" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported in DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:choice maxOccurs="unbounded">
                    <xs:element name="ValidStart" type="xs:date" minOccurs="0"/>
                    <xs:element name="ValidEnd" type="xs:date" minOccurs="0"/>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktSecurity" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported in DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:choice maxOccurs="unbounded">
                    <xs:element name="Type" type="xs:string" minOccurs="0"/>
                    <xs:element name="Level" type="xs:string" minOccurs="0"/>
                    <xs:element name="Template" type="xs:string" minOccurs="0"/>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktShell" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported in DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktMarket" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported in DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktGroupSize" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported in DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktNote" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported in DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Payment" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="PayItem" type="xs:string"/>
              <xs:element name="PayType">
                <xs:complexType>
                  <xs:choice>
                    <xs:element name="Cash" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Not supported in DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CreditLine" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Not supported in DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CreditCard">
                      <xs:complexType>
                        <xs:choice>
                          <xs:element name="CCManual">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element name="CCNbr" type="xs:string"/>
                                <xs:element name="CCExpiration" type="xs:string"/>
                                <xs:element name="CCVV" type="xs:string" minOccurs="0"/>
                                <xs:element name="CCName" type="xs:string" minOccurs="0"/>
                                <xs:element name="CCStreet" type="xs:string" minOccurs="0"/>
                                <xs:element name="CCZipcode" type="xs:string" minOccurs="0"/>
                                <xs:element name="CCCAVV" minOccurs="0"/>
                                <xs:element name="CCEcommerce" minOccurs="0"/>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                          <xs:element name="CCSwipe">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element name="CCTrack1" type="xs:string"/>
                                <xs:element name="CCTrack2" type="xs:string"/>
                                <xs:element name="CCVV" type="xs:string" minOccurs="0"/>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                        </xs:choice>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="DisneyDollars" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Not supported in DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="JobNbr" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Not supported in DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="Original" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Not supported in DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="Voucher">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="MainCode" type="xs:string"/>
                          <xs:element name="UniqueCode" type="xs:string" minOccurs="0"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="GiftCard">
                      <xs:complexType>
                        <xs:choice>
                          <xs:element name="GCManual">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element name="GCNbr" type="xs:string"/>
                                <xs:element name="GCStartDate" type="xs:date" minOccurs="0"/>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                          <xs:element name="GCSwipe">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element name="GCTrack1" type="xs:string" minOccurs="0"/>
                                <xs:element name="GCTrack2" type="xs:string"/>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                        </xs:choice>
                      </xs:complexType>
                    </xs:element>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
              <xs:element name="PayAmount" type="xs:string" minOccurs="0"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Eligibility" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported in DTI</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Group" type="xs:string"/>
              <xs:element name="Member" type="xs:string"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Client" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported in DTI</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="ClientType" type="xs:string"/>
              <xs:element name="ClientID" type="xs:string"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="SalesRep" type="xs:string" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported in DTI</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="Agency" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported in DTI</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:choice maxOccurs="unbounded">
              <xs:element name="IATA" type="xs:string"/>
              <xs:element name="OTA" type="xs:string"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="ReservationRequest">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="RequestType"/>
        <xs:element name="Ticket" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="TktItem" type="xs:integer"/>
              <xs:element name="ProdCode" type="xs:string"/>
              <xs:element name="ProdQty" type="xs:integer"/>
              <xs:element name="ProdPrice" type="xs:string" minOccurs="0"/>
              <xs:element name="PriceOverride" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktID" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:choice>
                    <xs:element name="External" type="xs:string"/>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktStatus" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="StatusItem" type="xs:string"/>
                    <xs:element name="StatusValue" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktValidity" minOccurs="0">
                <xs:complexType>
                  <xs:choice maxOccurs="unbounded">
                    <xs:element name="ValidStart" type="xs:date" minOccurs="0"/>
                    <xs:element name="ValidEnd" type="xs:date" minOccurs="0"/>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktSecurity" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:choice maxOccurs="unbounded">
                    <xs:element name="Type" type="xs:string" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="Level" type="xs:string" minOccurs="0"/>
                    <xs:element name="Template" type="xs:string" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktShell" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktMarket" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktGroupSize" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktNote" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktUsage" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="UseItem" type="xs:integer"/>
                    <xs:element name="UseDate" type="xs:date"/>
                    <xs:element name="UseTime" type="xs:time" minOccurs="0"/>
                    <xs:element name="UseGate" type="xs:string"/>
                    <xs:element name="UseType" type="xs:string" minOccurs="0"/>
                    <xs:element name="UseDays" type="xs:string" minOccurs="0"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktDemoData" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence maxOccurs="30">
                    <xs:element name="Field" type="xs:string"/>
                    <xs:element name="Value" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="APPassInfo" type="xs:string" minOccurs="0"/>
        <xs:element name="Payment" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="PayItem" type="xs:string"/>
              <xs:element name="PayType">
                <xs:complexType>
                  <xs:choice>
                    <xs:element name="Cash" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CreditLine" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CreditCard">
                      <xs:complexType>
                        <xs:choice>
                          <xs:element name="CCManual">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element name="CCNbr" type="xs:string"/>
                                <xs:element name="CCExpiration" type="xs:string"/>
                                <xs:element name="CCVV" type="xs:string" minOccurs="0"/>
                                <xs:element name="CCName" type="xs:string" minOccurs="0"/>
                                <xs:element name="CCStreet" type="xs:string" minOccurs="0"/>
                                <xs:element name="CCZipcode" type="xs:string" minOccurs="0"/>
                                <xs:element name="CCCAVV" type="xs:string" minOccurs="0"/>
                                <xs:element name="CCEcommerce" type="xs:string" minOccurs="0">
                                  <xs:annotation>
                                    <xs:documentation>Not fully supported by DTI</xs:documentation>
                                  </xs:annotation>
                                </xs:element>
                                <xs:element name="CCType" type="xs:string" minOccurs="0"/>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                          <xs:element name="CCSwipe">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element name="CCTrack1" type="xs:string"/>
                                <xs:element name="CCTrack2" type="xs:string"/>
                                <xs:element name="CCVV" type="xs:string" minOccurs="0"/>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                        </xs:choice>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="DisneyDollars" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="JobNbr" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="Voucher">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="MainCode" type="xs:string"/>
                          <xs:element name="UniqueCode" type="xs:string" minOccurs="0"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="ForeignCurrency" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="GiftCard">
                      <xs:complexType>
                        <xs:choice>
                          <xs:element name="GCManual">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element name="GCNbr" type="xs:string"/>
                                <xs:element name="GCStartDate" type="xs:date" minOccurs="0">
                                  <xs:annotation>
                                    <xs:documentation>Not supported by DTI</xs:documentation>
                                  </xs:annotation>
                                </xs:element>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                          <xs:element name="GCSwipe">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element name="GCTrack1" type="xs:string" minOccurs="0"/>
                                <xs:element name="GCTrack2" type="xs:string"/>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                        </xs:choice>
                      </xs:complexType>
                    </xs:element>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
              <xs:element name="PayAmount" type="xs:double" minOccurs="0"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Eligibility" minOccurs="0">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Group" type="xs:string"/>
              <xs:element name="Member" type="xs:string"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Reservation" minOccurs="0">
          <xs:complexType>
            <xs:choice maxOccurs="unbounded">
              <xs:element name="ResCode" type="xs:string" minOccurs="0"/>
              <xs:element name="ResNumber" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="ResCreateDate" type="xs:date" minOccurs="0"/>
              <xs:element name="ResPickupDate" type="xs:date" minOccurs="0"/>
              <xs:element name="ResPickupArea" type="xs:string" minOccurs="0"/>
              <xs:element name="ResSalesType" type="xs:string" minOccurs="0"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:element name="ClientData" minOccurs="0">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="ClientId" type="xs:string" minOccurs="0"/>
              <xs:element name="ClientType" type="xs:string" minOccurs="0"/>
              <xs:element name="ClientCategory" type="xs:string" minOccurs="0"/>
              <xs:element name="DemoLanguage" type="xs:string" minOccurs="0"/>
              <xs:element name="DemoData" minOccurs="0">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Bill" minOccurs="0">
                      <xs:complexType>
                        <xs:attribute name="Name" type="xs:string" use="optional"/>
                        <xs:attribute name="LastName" type="xs:string" use="optional"/>
                        <xs:attribute name="FirstName" type="xs:string" use="optional"/>
                        <xs:attribute name="Addr1" type="xs:string" use="optional"/>
                        <xs:attribute name="Addr2" type="xs:string" use="optional"/>
                        <xs:attribute name="City" type="xs:string" use="optional"/>
                        <xs:attribute name="State" type="xs:string" use="optional"/>
                        <xs:attribute name="Zip" type="xs:string" use="optional"/>
                        <xs:attribute name="Country" type="xs:string" use="optional"/>
                        <xs:attribute name="Telephone" type="xs:string" use="optional"/>
                        <xs:attribute name="Email" type="xs:anySimpleType" use="optional"/>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="Ship" minOccurs="0">
                      <xs:complexType>
                        <xs:attribute name="Name" type="xs:string" use="optional"/>
                        <xs:attribute name="LastName" type="xs:string" use="optional"/>
                        <xs:attribute name="FirstName" type="xs:string" use="optional"/>
                        <xs:attribute name="Addr1" type="xs:string" use="optional"/>
                        <xs:attribute name="Addr2" type="xs:string" use="optional"/>
                        <xs:attribute name="City" type="xs:string" use="optional"/>
                        <xs:attribute name="State" type="xs:string" use="optional"/>
                        <xs:attribute name="Zip" type="xs:string" use="optional"/>
                        <xs:attribute name="Country" type="xs:string" use="optional"/>
                        <xs:attribute name="Telephone" type="xs:string" use="optional"/>
                        <xs:attribute name="Email" type="xs:string" use="optional"/>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Agency" minOccurs="0">
          <xs:complexType>
            <xs:choice maxOccurs="unbounded">
              <xs:element name="IATA" type="xs:string"/>
              <xs:element name="OTA" type="xs:string">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="Agent" type="xs:string"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:element name="TaxExemptCode" type="xs:string" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported by DTI</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="Note" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element name="ShowData" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported by DTI</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence maxOccurs="6">
              <xs:element name="GroupCode" type="xs:anySimpleType"/>
              <xs:element name="PerformanceId" type="xs:anySimpleType"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="ResFlags" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported by DTI</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence maxOccurs="10">
              <xs:element name="Tags" type="xs:string"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="CreateTicketRequest">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Ticket" maxOccurs="unbounded">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="TktItem" type="xs:integer"/>
              <xs:element name="ProdCode" type="xs:string"/>
              <xs:element name="ProdQty" type="xs:integer"/>
              <xs:element name="ProdPrice" type="xs:string" minOccurs="0"/>
              <xs:element name="TktID" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:choice>
                    <xs:element name="External" type="xs:string"/>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktStatus" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="StatusItem" type="xs:string"/>
                    <xs:element name="StatusValue" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktValidity" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:choice maxOccurs="unbounded">
                    <xs:element name="ValidStart" type="xs:date" minOccurs="0"/>
                    <xs:element name="ValidEnd" type="xs:date" minOccurs="0"/>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktSecurity" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:choice maxOccurs="unbounded">
                    <xs:element name="Type" type="xs:string" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported in DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="Level" type="xs:string" minOccurs="0"/>
                    <xs:element name="Template" type="xs:string" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported in DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktShell" type="xs:string" minOccurs="0"/>
              <xs:element name="TktMarket" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktGroupSize" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktNote" type="xs:string" minOccurs="0"/>
              <xs:element name="TktUsage" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="UseItem" type="xs:integer"/>
                    <xs:element name="UseDate" type="xs:date"/>
                    <xs:element name="UseTime" type="xs:time" minOccurs="0"/>
                    <xs:element name="UseGate" type="xs:string"/>
                    <xs:element name="UseType" type="xs:string" minOccurs="0"/>
                    <xs:element name="UseDays" type="xs:string" minOccurs="0"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Payment" minOccurs="0" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation>Not supported by DTI</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="PayItem" type="xs:string"/>
              <xs:element name="PayType">
                <xs:complexType>
                  <xs:choice>
                    <xs:element name="Cash" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Not supported in DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CreditLine" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Not supported in DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="CreditCard">
                      <xs:annotation>
                        <xs:documentation>Not supported in DTI</xs:documentation>
                      </xs:annotation>
                      <xs:complexType>
                        <xs:choice>
                          <xs:element name="CCManual">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element name="CCNbr" type="xs:string"/>
                                <xs:element name="CCExpiration" type="xs:string"/>
                                <xs:element name="CCVV" type="xs:string" minOccurs="0"/>
                                <xs:element name="CCName" type="xs:string" minOccurs="0"/>
                                <xs:element name="CCStreet" type="xs:string" minOccurs="0"/>
                                <xs:element name="CCZipcode" type="xs:string" minOccurs="0"/>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                          <xs:element name="CCSwipe">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element name="CCTrack1" type="xs:string"/>
                                <xs:element name="CCTrack2" type="xs:string"/>
                                <xs:element name="CCVV" type="xs:string" minOccurs="0"/>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                        </xs:choice>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="DisneyDollars" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Not supported in DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="JobNbr" type="xs:string">
                      <xs:annotation>
                        <xs:documentation>Not supported in DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="Voucher">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="MainCode" type="xs:string"/>
                          <xs:element name="UniqueCode" type="xs:string" minOccurs="0"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
              <xs:element name="PayAmount" type="xs:double" minOccurs="0"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Eligibility" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported by DTI</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Group" type="xs:string"/>
              <xs:element name="Member" type="xs:string"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Client" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported by DTI</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="ClientType" type="xs:string"/>
              <xs:element name="ClientID" type="xs:string"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="SalesRep" type="xs:string" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported in DTI</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="Agency" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported by DTI</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:choice maxOccurs="unbounded">
              <xs:element name="IATA" type="xs:string"/>
              <xs:element name="OTA" type="xs:string"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="UpdateTicketRequest">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Ticket" maxOccurs="unbounded">
          <xs:complexType>
            <xs:choice minOccurs="3" maxOccurs="unbounded">
              <xs:element name="TktItem" type="xs:integer"/>
              <xs:element name="TktID">
                <xs:complexType>
                  <xs:choice>
                    <xs:element name="Mag">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="MagTrack1" type="xs:string"/>
                          <xs:element name="MagTrack2" type="xs:string" minOccurs="0"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="Barcode" type="xs:string"/>
                    <xs:element name="TktDSSN">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="TktDate" type="xs:date"/>
                          <xs:element name="TktSite" type="xs:string"/>
                          <xs:element name="TktStation" type="xs:string"/>
                          <xs:element name="TktNbr" type="xs:string"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="TktNID" type="xs:string"/>
                    <xs:element name="External" type="xs:string"/>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktStatus" minOccurs="0" maxOccurs="unbounded">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="StatusItem" type="xs:string"/>
                    <xs:element name="StatusValue" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktValidity" minOccurs="0">
                <xs:complexType>
                  <xs:choice maxOccurs="unbounded">
                    <xs:element name="ValidStart" type="xs:date" minOccurs="0"/>
                    <xs:element name="ValidEnd" type="xs:date" minOccurs="0"/>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktSecurity" minOccurs="0">
                <xs:complexType>
                  <xs:choice maxOccurs="unbounded">
                    <xs:element name="Type" type="xs:string" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported in DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="Level" type="xs:string" minOccurs="0"/>
                    <xs:element name="Template" type="xs:string" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported in DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktShell" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported in DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktMarket" type="xs:string" minOccurs="0"/>
              <xs:element name="TktNote" type="xs:string" minOccurs="0"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="UpdateTransactionRequest">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element name="Transaction">
          <xs:complexType>
            <xs:choice>
              <xs:element name="TranID">
                <xs:complexType>
                  <xs:choice>
                    <xs:element name="TranDSSN">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="TranDate" type="xs:string"/>
                          <xs:element name="TranSite" type="xs:string"/>
                          <xs:element name="TranStation" type="xs:string"/>
                          <xs:element name="TranNbr" type="xs:string"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="TranNID" type="xs:string"/>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktID">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:choice>
                    <xs:element name="Mag">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="MagTrack1" type="xs:string"/>
                          <xs:element name="MagTrack2" type="xs:string" minOccurs="0"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="Barcode" type="xs:string"/>
                    <xs:element name="TktDSSN">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="TktDate" type="xs:string"/>
                          <xs:element name="TktSite" type="xs:string"/>
                          <xs:element name="TktStation" type="xs:string"/>
                          <xs:element name="TktNbr" type="xs:string"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="TktNID" type="xs:string"/>
                    <xs:element name="External" type="xs:string"/>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:element name="SalesRep" type="xs:string" minOccurs="0"/>
        <xs:element name="Agency" minOccurs="0">
          <xs:complexType>
            <xs:choice maxOccurs="unbounded">
              <xs:element name="IATA" type="xs:string"/>
              <xs:element name="OTA" type="xs:string">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:choice>
          </xs:complexType>
        </xs:element>
      </xs:choice>
    </xs:complexType>
  </xs:element>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\C:\Documents%20and%20Settings\lewit019\My%20Documents\DTI\Interface%20Specifications\DTI%20Tixml\TransmissionResponseProxy.xsd</con:url><con:content>&lt;xsd:schema targetNamespace="http://services.dti.wdw.com/DisneyTicketingService/types/TransmissionAnswer" elementFormDefault="qualified" attributeFormDefault="unqualified" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:transAns="http://services.dti.wdw.com/DisneyTicketingService/types/TransmissionAnswer">
  &lt;xsd:include schemaLocation="dtigatewayresponse.xsd"/>
&lt;/xsd:schema></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\C:\Documents%20and%20Settings\lewit019\My%20Documents\DTI\Interface%20Specifications\DTI%20Tixml\dtigatewayresponse.xsd</con:url><con:content><![CDATA[<!--edited with XMLSpy v2007 sp2 (http://www.altova.com) by James Todd Lewis (WALT DISNEY WORLD CO.)-->
<!--edited with XML Spy v4.4 U (http://www.xmlspy.com) by Kevin Graham (Walt Disney World Co)-->
<!--TiXML 1.0  12/17/02  Copyright The Walt Disney Company-->
<xs:schema elementFormDefault="qualified" version="1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:element name="Transmission">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Payload">
          <xs:complexType>
            <xs:sequence>
              <xs:element ref="PayloadHeader"/>
              <xs:element name="Command" minOccurs="0">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element ref="CommandHeader"/>
                    <xs:element ref="QueryTicketResponse" minOccurs="0"/>
                    <xs:element ref="UpgradeAlphaResponse" minOccurs="0"/>
                    <xs:element ref="VoidTicketResponse" minOccurs="0"/>
                    <xs:element ref="ReservationResponse" minOccurs="0"/>
                    <xs:element ref="CreateTicketResponse" minOccurs="0"/>
                    <xs:element ref="UpdateTicketResponse" minOccurs="0"/>
                    <xs:element ref="UpdateTransactionResponse" minOccurs="0"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="PayloadHeader">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="PayloadID" type="xs:string"/>
        <xs:element name="TSPayloadID" type="xs:string"/>
        <xs:element name="Target" type="xs:string"/>
        <xs:element name="Version" type="xs:string"/>
        <xs:element name="Priority" type="xs:string" minOccurs="0"/>
        <xs:element name="ProcMethod" type="xs:string" minOccurs="0"/>
        <xs:element name="Comm">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Protocol" type="xs:string"/>
              <xs:element name="Method" type="xs:string"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="TransmitDate" type="xs:date"/>
        <!--xs:element name="TransmitTime" type="xs:time"/-->
        <xs:element name="TransmitTime" type="xs:string"/>
        <xs:element name="TktBroker" type="xs:string"/>
        <xs:element name="CommandCount" type="xs:integer"/>
        <xs:element name="PayloadNote" type="xs:string" minOccurs="0"/>
        <xs:element name="PayloadError" minOccurs="0">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="HdrErrorCode" type="xs:integer"/>
              <xs:element name="HdrErrorType" type="xs:string"/>
              <xs:element name="HdrErrorClass" type="xs:string"/>
              <xs:element name="HdrErrorText" type="xs:string"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="CommandHeader">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="CmdItem" type="xs:integer"/>
        <xs:element name="CmdDuration" type="xs:decimal"/>
        <xs:element name="CmdDate" type="xs:date"/>
        <!--xs:element name="CmdTime" type="xs:time"/-->
        <xs:element name="CmdTime" type="xs:string"/>
        <xs:element name="CmdNote" type="xs:string" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported by DTI</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="CmdError" minOccurs="0">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="CmdErrorCode" type="xs:integer"/>
              <xs:element name="CmdErrorType" type="xs:string"/>
              <xs:element name="CmdErrorClass" type="xs:string"/>
              <xs:element name="CmdErrorText" type="xs:string"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="QueryTicketResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Ticket" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
            <xs:choice minOccurs="2" maxOccurs="unbounded">
              <xs:element name="TktItem" type="xs:integer"/>
              <xs:element name="TktID" minOccurs="0">
                <xs:complexType>
                  <xs:choice maxOccurs="unbounded">
                    <xs:element name="Mag" type="xs:string" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="Barcode" type="xs:string" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="TktDSSN" minOccurs="0">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="TktDate" type="xs:string"/>
                          <xs:element name="TktSite" type="xs:string"/>
                          <xs:element name="TktStation" type="xs:string"/>
                          <xs:element name="TktNbr" type="xs:string"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="TktNID" type="xs:string" minOccurs="0"/>
                    <xs:element name="External" type="xs:string" minOccurs="0"/>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktTransaction" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="TktProvider" type="xs:string" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="WorkDate" type="xs:date" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="WorkTime" type="xs:time" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="TranDSSN" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="TranDate" type="xs:string"/>
                          <xs:element name="TranSite" type="xs:string"/>
                          <xs:element name="TranStation" type="xs:string"/>
                          <xs:element name="TranNbr" type="xs:string"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="TranNID" type="xs:string" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktPrice" type="xs:decimal" minOccurs="0"/>
              <xs:element name="TktTax" type="xs:decimal" minOccurs="0"/>
              <xs:element name="TktValueLeft" type="xs:decimal" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktStatus" minOccurs="0" maxOccurs="unbounded">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="StatusItem" type="xs:string"/>
                    <xs:element name="StatusValue" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktUseText" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktValidity" minOccurs="0">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="ValidStart" type="xs:date"/>
                    <xs:element name="ValidEnd" type="xs:date"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktSecurity" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Type" type="xs:string"/>
                    <xs:element name="Level" type="xs:string"/>
                    <xs:element name="Template" type="xs:string" minOccurs="0"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktShell" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktMarket" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktGroupSize" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktFlags" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="FlagItem" type="xs:string"/>
                    <xs:element name="FlagValue" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktNote" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktUsage" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="UseItem" type="xs:string"/>
                    <xs:element name="UseDate" type="xs:date"/>
                    <xs:element name="UseTime" type="xs:time"/>
                    <xs:element name="UseSite" type="xs:string"/>
                    <xs:element name="UseGate" type="xs:string"/>
                    <xs:element name="UseType" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktAttribute" minOccurs="0">
                <xs:complexType>
                  <xs:attribute name="AgeGroup" type="xs:string" use="optional"/>
                  <xs:attribute name="MediaType" type="xs:string" use="optional"/>
                  <xs:attribute name="PassType" type="xs:string" use="optional"/>
                  <xs:attribute name="PassRenew" type="xs:string" use="optional"/>
                  <xs:attribute name="PassClass" type="xs:string" use="optional"/>
                  <xs:attribute name="Resident" type="xs:string" use="optional"/>
                </xs:complexType>
              </xs:element>
              <xs:element name="ClientData" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="ClientId" type="xs:string"/>
                    <xs:element name="ClientType" type="xs:string" minOccurs="0"/>
                    <xs:element name="ClientCategory" type="xs:string" minOccurs="0"/>
                    <xs:element name="DemoLanguage" type="xs:string" minOccurs="0"/>
                    <xs:element name="DemoData" minOccurs="0">
                      <xs:complexType>
                        <xs:sequence maxOccurs="30">
                          <xs:element name="Bill" minOccurs="0">
                            <xs:complexType>
                              <xs:attribute name="Name" type="xs:string" use="optional"/>
                              <xs:attribute name="LastName" type="xs:string" use="optional"/>
                              <xs:attribute name="FirstName" type="xs:string" use="optional"/>
                              <xs:attribute name="Addr1" type="xs:string" use="optional"/>
                              <xs:attribute name="Addr2" type="xs:string" use="optional"/>
                              <xs:attribute name="City" type="xs:string" use="optional"/>
                              <xs:attribute name="State" type="xs:string" use="optional"/>
                              <xs:attribute name="Zip" type="xs:string" use="optional"/>
                              <xs:attribute name="Country" type="xs:string" use="optional"/>
                              <xs:attribute name="Telephone" type="xs:string" use="optional"/>
                            </xs:complexType>
                          </xs:element>
                          <xs:element name="Ship" minOccurs="0">
                            <xs:complexType>
                              <xs:attribute name="Name" type="xs:string" use="optional"/>
                              <xs:attribute name="LastName" type="xs:string" use="optional"/>
                              <xs:attribute name="FirstName" type="xs:string" use="optional"/>
                              <xs:attribute name="Addr1" type="xs:string" use="optional"/>
                              <xs:attribute name="Addr2" type="xs:string" use="optional"/>
                              <xs:attribute name="City" type="xs:string" use="optional"/>
                              <xs:attribute name="State" type="xs:string" use="optional"/>
                              <xs:attribute name="Zip" type="xs:string" use="optional"/>
                              <xs:attribute name="Country" type="xs:string" use="optional"/>
                              <xs:attribute name="Telephone" type="xs:string" use="optional"/>
                            </xs:complexType>
                          </xs:element>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktError" minOccurs="0">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="TktErrorCode" type="xs:integer"/>
                    <xs:element name="TktErrorType" type="xs:string"/>
                    <xs:element name="TktErrorClass" type="xs:string"/>
                    <xs:element name="TktErrorText" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="ProdCode" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:choice>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="UpgradeAlphaResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Ticket" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
            <xs:choice minOccurs="2" maxOccurs="unbounded">
              <xs:element name="TktItem" type="xs:integer"/>
              <xs:element name="TktPart" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktID" minOccurs="0">
                <xs:complexType>
                  <xs:choice maxOccurs="unbounded">
                    <xs:element name="Mag" type="xs:string" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="Barcode" type="xs:string" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="TktDSSN" minOccurs="0">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="TktDate" type="xs:string"/>
                          <xs:element name="TktSite" type="xs:string"/>
                          <xs:element name="TktStation" type="xs:string"/>
                          <xs:element name="TktNbr" type="xs:string"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="TktNID" type="xs:string" minOccurs="0"/>
                    <xs:element name="External" type="xs:string" minOccurs="0"/>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktTransaction" minOccurs="0">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="TktProvider" type="xs:string" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="WorkDate" type="xs:string" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="WorkTime" type="xs:string" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="TranDSSN" minOccurs="0">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="TranDate" type="xs:string"/>
                          <xs:element name="TranSite" type="xs:string"/>
                          <xs:element name="TranStation" type="xs:string"/>
                          <xs:element name="TranNbr" type="xs:string"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="TranNID" type="xs:string" minOccurs="0"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktPrice" type="xs:float" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktTax" type="xs:float" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktValueLeft" type="xs:float" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktStatus" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="StatusItem" type="xs:string"/>
                    <xs:element name="StatusValue" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktUseText" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktValidity" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="ValidStart" type="xs:date"/>
                    <xs:element name="ValidEnd" type="xs:date"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktSecurity" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Type" type="xs:string"/>
                    <xs:element name="Level" type="xs:string"/>
                    <xs:element name="Template" type="xs:string" minOccurs="0"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktShell" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktMarket" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktGroupSize" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktFlags" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="FlagItem" type="xs:string"/>
                    <xs:element name="FlagValue" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktNote" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktError" minOccurs="0">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="TktErrorCode" type="xs:integer"/>
                    <xs:element name="TktErrorType" type="xs:string"/>
                    <xs:element name="TktErrorClass" type="xs:string"/>
                    <xs:element name="TktErrorText" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:element name="Product" minOccurs="0" maxOccurs="20">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="ProdItem" type="xs:integer"/>
              <xs:element name="ProdCode" type="xs:string"/>
              <xs:element name="ProdQty" type="xs:integer"/>
              <xs:element name="ProdParts" type="xs:string"/>
              <xs:element name="ProdPrice" type="xs:decimal"/>
              <xs:element name="ProdTax1" type="xs:decimal"/>
              <xs:element name="ProdTax2" type="xs:decimal" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="ProdDescription" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="ProdReceiptMsg" type="xs:string" minOccurs="0"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Payment" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="PayItem" type="xs:integer"/>
              <xs:element name="PayType">
                <xs:complexType>
                  <xs:choice>
                    <xs:element name="CreditCard">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="CCAuthCode" type="xs:string"/>
                          <xs:element name="CCAuthNumber" type="xs:string" minOccurs="0"/>
                          <xs:element name="CCAuthSysResponse" type="xs:string" minOccurs="0"/>
                          <xs:element name="CCNumber" type="xs:string" minOccurs="0"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="GiftCard">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="GCAuthCode" type="xs:string"/>
                          <xs:element name="GCAuthNumber" type="xs:string" minOccurs="0"/>
                          <xs:element name="GCAuthSysResponse" type="xs:string" minOccurs="0"/>
                          <xs:element name="GCNumber" type="xs:string" minOccurs="0"/>
                          <xs:element name="GCRemainingBalance" type="xs:decimal" minOccurs="0"/>
                          <xs:element name="GCPromoExpDate" type="xs:date" minOccurs="0"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Receipt" minOccurs="0">
          <xs:complexType>
            <xs:choice maxOccurs="unbounded">
              <xs:element name="Total" type="xs:decimal" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TaxTotal" type="xs:decimal" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="Tax1" type="xs:decimal" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="Tax2" type="xs:decimal" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="Message" type="xs:string" minOccurs="0"/>
              <xs:element name="ReferenceNbr" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:element name="Eligibility" type="xs:string" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported by DTI</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="Client" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported by DTI</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="ClientType" type="xs:string"/>
              <xs:element name="ClientID" type="xs:string"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="VoidTicketResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Ticket" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
            <xs:choice minOccurs="2" maxOccurs="unbounded">
              <xs:element name="TktItem" type="xs:integer"/>
              <xs:element name="TktID" minOccurs="0">
                <xs:complexType>
                  <xs:choice maxOccurs="unbounded">
                    <xs:element name="Mag" type="xs:string" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="Barcode" type="xs:string" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="TktDSSN" minOccurs="0">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="TktDate" type="xs:date"/>
                          <xs:element name="TktSite" type="xs:string"/>
                          <xs:element name="TktStation" type="xs:string"/>
                          <xs:element name="TktNbr" type="xs:string"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="TktNID" type="xs:string" minOccurs="0"/>
                    <xs:element name="External" type="xs:string" minOccurs="0"/>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktTransaction" minOccurs="0">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="TktProvider" type="xs:string" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="WorkDate" type="xs:date" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="WorkTime" type="xs:time" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="TranDSSN" minOccurs="0">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="TranDate" type="xs:string"/>
                          <xs:element name="TranSite" type="xs:string"/>
                          <xs:element name="TranStation" type="xs:string"/>
                          <xs:element name="TranNbr" type="xs:string"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="TranNID" type="xs:string" minOccurs="0"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktPrice" type="xs:decimal" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktTax" type="xs:decimal" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktStatus" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="StatusItem" type="xs:string"/>
                    <xs:element name="StatusValue" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktValidity" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="ValidStart" type="xs:date"/>
                    <xs:element name="ValidEnd" type="xs:date"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktSecurity" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Type" type="xs:string"/>
                    <xs:element name="Level" type="xs:string"/>
                    <xs:element name="Template" type="xs:string" minOccurs="0"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktShell" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktMarket" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktGroupSize" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktFlags" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="FlagItem" type="xs:string"/>
                    <xs:element name="FlagValue" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktNote" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktUsage" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="UseItem" type="xs:integer"/>
                    <xs:element name="UseDate" type="xs:date"/>
                    <xs:element name="UseTime" type="xs:time"/>
                    <xs:element name="UseSite" type="xs:string"/>
                    <xs:element name="UseGate" type="xs:string"/>
                    <xs:element name="UseType" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktError" minOccurs="0">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="TktErrorCode" type="xs:integer"/>
                    <xs:element name="TktErrorType" type="xs:string"/>
                    <xs:element name="TktErrorClass" type="xs:string"/>
                    <xs:element name="TktErrorText" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:element name="Payment" minOccurs="0" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation>Not supported by DTI</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="PayItem" type="xs:string"/>
              <xs:element name="PayType">
                <xs:complexType>
                  <xs:choice>
                    <xs:element name="CreditCard">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="CCAuth" type="xs:string"/>
                          <xs:element name="CCStatus" type="xs:string"/>
                          <xs:element name="CCAVS" type="xs:string"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="GiftCard">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="GCAuthCode" type="xs:string"/>
                          <xs:element name="GCAuthNumber" type="xs:string" minOccurs="0"/>
                          <xs:element name="GCAuthSysResponse" type="xs:string" minOccurs="0"/>
                          <xs:element name="GCNumber" type="xs:string" minOccurs="0"/>
                          <xs:element name="GCRemainingBalance" type="xs:decimal" minOccurs="0"/>
                          <xs:element name="GCPromoExpDate" type="xs:date" minOccurs="0"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Receipt" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported by DTI</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:choice maxOccurs="unbounded">
              <xs:element name="Total" type="xs:decimal" minOccurs="0"/>
              <xs:element name="TaxTotal" type="xs:decimal" minOccurs="0"/>
              <xs:element name="Tax1" type="xs:decimal" minOccurs="0"/>
              <xs:element name="Tax2" type="xs:decimal" minOccurs="0"/>
              <xs:element name="Message" type="xs:string" minOccurs="0"/>
              <xs:element name="ReferenceNbr" type="xs:string" minOccurs="0"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:element name="Eligibility" type="xs:string" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported by DTI</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="Client" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported by DTI</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="ClientType" type="xs:string"/>
              <xs:element name="ClientID" type="xs:string"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="ReservationResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="ResponseType" type="xs:string"/>
        <xs:element name="Ticket" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
            <xs:choice minOccurs="2" maxOccurs="unbounded">
              <xs:element name="TktItem" type="xs:integer"/>
              <xs:element name="TktPart" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktID" minOccurs="0">
                <xs:complexType>
                  <xs:choice maxOccurs="unbounded">
                    <xs:element name="Mag" type="xs:string" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="Barcode" type="xs:string" minOccurs="0"/>
                    <xs:element name="TktDSSN" minOccurs="0">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="TktDate" type="xs:string"/>
                          <xs:element name="TktSite" type="xs:string"/>
                          <xs:element name="TktStation" type="xs:string"/>
                          <xs:element name="TktNbr" type="xs:string"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="TktNID" type="xs:string" minOccurs="0"/>
                    <xs:element name="External" type="xs:string" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktTransaction" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="TktProvider" type="xs:string" minOccurs="0"/>
                    <xs:element name="WorkDate" type="xs:date" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="WorkTime" type="xs:time" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="TranDSSN" minOccurs="0">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="TranDate" type="xs:string"/>
                          <xs:element name="TranSite" type="xs:string"/>
                          <xs:element name="TranStation" type="xs:string"/>
                          <xs:element name="TranNbr" type="xs:string"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="TranNID" type="xs:string" minOccurs="0"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktPrice" type="xs:decimal" minOccurs="0"/>
              <xs:element name="TktTax" type="xs:decimal" minOccurs="0"/>
              <xs:element name="TktStatus" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="StatusItem" type="xs:string"/>
                    <xs:element name="StatusValue" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktUseText" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktValidity" minOccurs="0">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="ValidStart" type="xs:date"/>
                    <xs:element name="ValidEnd" type="xs:date"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktSecurity" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Type" type="xs:string"/>
                    <xs:element name="Level" type="xs:string"/>
                    <xs:element name="Template" type="xs:string" minOccurs="0"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktShell" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktMarket" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktGroupSize" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktFlags" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="FlagItem" type="xs:string"/>
                    <xs:element name="FlagValue" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktNote" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktError" minOccurs="0">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="TktErrorCode" type="xs:integer"/>
                    <xs:element name="TktErrorType" type="xs:string"/>
                    <xs:element name="TktErrorClass" type="xs:string"/>
                    <xs:element name="TktErrorText" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktDemoData" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Field" type="xs:string"/>
                    <xs:element name="Value" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:element name="Product" minOccurs="0" maxOccurs="40">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="ProdItem" type="xs:integer"/>
              <xs:element name="ProdCode" type="xs:string"/>
              <xs:element name="ProdQty" type="xs:integer"/>
              <xs:element name="ProdParts" type="xs:string"/>
              <xs:element name="ProdPrice" type="xs:decimal"/>
              <xs:element name="ProdTax1" type="xs:decimal"/>
              <xs:element name="ProdTax2" type="xs:decimal" minOccurs="0"/>
              <xs:element name="ProdDescription" type="xs:string" minOccurs="0"/>
              <xs:element name="ProdReceiptMsg" type="xs:string" minOccurs="0"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Payment" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="PayItem" type="xs:integer"/>
              <xs:element name="PayType">
                <xs:complexType>
                  <xs:choice>
                    <xs:element name="CreditCard">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="CCAuthCode" type="xs:string"/>
                          <xs:element name="CCAuthNumber" type="xs:string" minOccurs="0"/>
                          <xs:element name="CCAuthSysResponse" type="xs:string" minOccurs="0"/>
                          <xs:element name="CCNumber" type="xs:string" minOccurs="0"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="GiftCard">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="GCAuthCode" type="xs:string"/>
                          <xs:element name="GCAuthNumber" type="xs:string" minOccurs="0"/>
                          <xs:element name="GCAuthSysResponse" type="xs:string" minOccurs="0"/>
                          <xs:element name="GCNumber" type="xs:string" minOccurs="0"/>
                          <xs:element name="GCRemainingBalance" type="xs:decimal" minOccurs="0"/>
                          <xs:element name="GCPromoExpDate" type="xs:date" minOccurs="0"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Receipt" minOccurs="0">
          <xs:complexType>
            <xs:choice maxOccurs="unbounded">
              <xs:element name="Total" type="xs:decimal" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported in DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TaxTotal" type="xs:decimal" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported in DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="Tax1" type="xs:decimal" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported in DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="Tax2" type="xs:decimal" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported in DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="Message" type="xs:string" minOccurs="0"/>
              <xs:element name="ReferenceNbr" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported in DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TotalBalance" type="xs:decimal" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported in DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:element name="Eligibility" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported by DTI</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Group" type="xs:string"/>
              <xs:element name="Member" type="xs:string"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Reservation" minOccurs="0">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="ResCode" type="xs:string" minOccurs="0"/>
              <xs:element name="ResNumber" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="ResCreateDate" type="xs:date" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="ResPickupDate" type="xs:date" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="ResPickupArea" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="ResSalesType" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="ResStatus" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="ClientData" minOccurs="0">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="ClientId" type="xs:string"/>
              <xs:element name="ClientType" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="ClientCategory" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="DemoLanguage" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="DemoData" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence maxOccurs="30">
                    <xs:element name="Bill" minOccurs="0">
                      <xs:complexType>
                        <xs:attribute name="Name" type="xs:string" use="optional"/>
                        <xs:attribute name="LastName" type="xs:string" use="optional"/>
                        <xs:attribute name="FirstName" type="xs:string" use="optional"/>
                        <xs:attribute name="Addr1" type="xs:string" use="optional"/>
                        <xs:attribute name="Addr2" type="xs:string" use="optional"/>
                        <xs:attribute name="City" type="xs:string" use="optional"/>
                        <xs:attribute name="State" type="xs:string" use="optional"/>
                        <xs:attribute name="Zip" type="xs:string" use="optional"/>
                        <xs:attribute name="Country" type="xs:string" use="optional"/>
                        <xs:attribute name="Telephone" type="xs:string" use="optional"/>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="Ship" minOccurs="0">
                      <xs:complexType>
                        <xs:attribute name="Name" type="xs:string" use="optional"/>
                        <xs:attribute name="LastName" type="xs:string" use="optional"/>
                        <xs:attribute name="FirstName" type="xs:string" use="optional"/>
                        <xs:attribute name="Addr1" type="xs:string" use="optional"/>
                        <xs:attribute name="Addr2" type="xs:string" use="optional"/>
                        <xs:attribute name="City" type="xs:string" use="optional"/>
                        <xs:attribute name="State" type="xs:string" use="optional"/>
                        <xs:attribute name="Zip" type="xs:string" use="optional"/>
                        <xs:attribute name="Country" type="xs:string" use="optional"/>
                        <xs:attribute name="Telephone" type="xs:string" use="optional"/>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Agency" type="xs:string" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported by DTI</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="TaxExemptCode" type="xs:string" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported by DTI</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="Note" type="xs:string" minOccurs="0" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation>Not supported by DTI</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="ShowData" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported by DTI</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence maxOccurs="6">
              <xs:element name="GroupCode" type="xs:string"/>
              <xs:element name="PerformanceId" type="xs:string"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="CreateTicketResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Ticket" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
            <xs:choice minOccurs="2" maxOccurs="unbounded">
              <xs:element name="TktItem" type="xs:integer"/>
              <xs:element name="TktPart" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktID" minOccurs="0">
                <xs:complexType>
                  <xs:choice maxOccurs="unbounded">
                    <xs:element name="Mag" type="xs:string" minOccurs="0"/>
                    <xs:element name="Barcode" type="xs:string" minOccurs="0"/>
                    <xs:element name="TktDSSN" minOccurs="0">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="TktDate" type="xs:string"/>
                          <xs:element name="TktSite" type="xs:string"/>
                          <xs:element name="TktStation" type="xs:string"/>
                          <xs:element name="TktNbr" type="xs:string"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="TktNID" type="xs:string" minOccurs="0"/>
                    <xs:element name="External" type="xs:string" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktTransaction" minOccurs="0">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="TktProvider" type="xs:string" minOccurs="0"/>
                    <xs:element name="WorkDate" type="xs:date" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="WorkTime" type="xs:time" minOccurs="0">
                      <xs:annotation>
                        <xs:documentation>Not supported by DTI</xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="TranDSSN" minOccurs="0">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="TranDate" type="xs:string"/>
                          <xs:element name="TranSite" type="xs:string"/>
                          <xs:element name="TranStation" type="xs:string"/>
                          <xs:element name="TranNbr" type="xs:string"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="TranNID" type="xs:string" minOccurs="0"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktPrice" type="xs:decimal" minOccurs="0"/>
              <xs:element name="TktTax" type="xs:decimal" minOccurs="0"/>
              <xs:element name="TktStatus" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="StatusItem" type="xs:string"/>
                    <xs:element name="StatusValue" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktUseText" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktValidity" minOccurs="0">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="ValidStart" type="xs:date"/>
                    <xs:element name="ValidEnd" type="xs:date"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktSecurity" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Type" type="xs:string"/>
                    <xs:element name="Level" type="xs:string"/>
                    <xs:element name="Template" type="xs:string" minOccurs="0"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktShell" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktMarket" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktGroupSize" type="xs:string" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="TktFlags" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation>Not supported by DTI</xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="FlagItem" type="xs:string"/>
                    <xs:element name="FlagValue" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="TktNote" type="xs:string" minOccurs="0"/>
              <xs:element name="TktError" minOccurs="0">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="TktErrorCode" type="xs:integer"/>
                    <xs:element name="TktErrorType" type="xs:string"/>
                    <xs:element name="TktErrorClass" type="xs:string"/>
                    <xs:element name="TktErrorText" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:element name="Product" minOccurs="0" maxOccurs="20">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="ProdItem" type="xs:integer"/>
              <xs:element name="ProdCode" type="xs:string"/>
              <xs:element name="ProdQty" type="xs:integer"/>
              <xs:element name="ProdParts" type="xs:string"/>
              <xs:element name="ProdPrice" type="xs:decimal"/>
              <xs:element name="ProdTax1" type="xs:decimal"/>
              <xs:element name="ProdTax2" type="xs:decimal" minOccurs="0"/>
              <xs:element name="ProdDescription" type="xs:string" minOccurs="0"/>
              <xs:element name="ProdReceiptMsg" type="xs:string" minOccurs="0"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Payment" minOccurs="0" maxOccurs="unbounded">
          <xs:annotation>
            <xs:documentation>Not supported in DTI</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="PayItem" type="xs:integer"/>
              <xs:element name="PayType">
                <xs:complexType>
                  <xs:choice>
                    <xs:element name="CreditCard">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="CCAuth" type="xs:string"/>
                          <xs:element name="CCStatus" type="xs:string"/>
                          <xs:element name="CCAVS" type="xs:string"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                  </xs:choice>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="Receipt" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported in DTI</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:choice maxOccurs="unbounded">
              <xs:element name="Total" type="xs:decimal" minOccurs="0"/>
              <xs:element name="TaxTotal" type="xs:decimal" minOccurs="0"/>
              <xs:element name="Tax1" type="xs:decimal" minOccurs="0"/>
              <xs:element name="Tax2" type="xs:decimal" minOccurs="0"/>
              <xs:element name="Message" type="xs:string" minOccurs="0"/>
              <xs:element name="ReferenceNbr" type="xs:string" minOccurs="0"/>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:element name="Eligibility" type="xs:string" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported in DTI</xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="Client" minOccurs="0">
          <xs:annotation>
            <xs:documentation>Not supported in DTI</xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="ClientType" type="xs:string"/>
              <xs:element name="ClientID" type="xs:string"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="UpdateTicketResponse">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Ticket" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="TktItem" type="xs:string"/>
              <xs:element name="TktError" minOccurs="0">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="TktErrorCode" type="xs:integer"/>
                    <xs:element name="TktErrorType" type="xs:string"/>
                    <xs:element name="TktErrorClass" type="xs:string"/>
                    <xs:element name="TktErrorText" type="xs:string"/>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="UpdateTransactionResponse" type="xs:string"/>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://Kondasamy:7798/mockDisneyTicketingServiceSoapBinding</con:endpoint><con:endpoint>http://gts-tkt-egal.swna.wdpr.disney.com:3051</con:endpoint><con:endpoint>http://wm-flwdw-ats023:8480/Hercules/services/LookupEntitlement/KEB3-WIN7-VM/KEB3-WIN7-VM/X/x9999991501380828</con:endpoint><con:endpoint>https://GTV8-QA-EGAL.swna.wdpr.disney.com</con:endpoint><con:endpoint>https://dm-caan-ap043</con:endpoint><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:endpoint>https://dtidev.disney.pvt/DTIInfoSys/servlet/com.disney.dti.infosys.servlet.DTIInfoSysServlet</con:endpoint><con:endpoint>https://dtidev.disney.pvt:9445/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:endpoint>https://dtiprod.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:endpoint>https://dtiproda.disney.pvt:9445/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:endpoint>https://dtiprodb.disney.pvt:9445/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:endpoint>https://dtiqa1.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:endpoint>https://dtiqa1.disney.pvt/DTIInfoSys/servlet/com.disney.dti.infosys.servlet.DTIInfoSysServlet</con:endpoint><con:endpoint>https://dtiqa2.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:endpoint>https://dtiqa2.disney.pvt/PLab/servlet/com.dti.app.common.DTIApp</con:endpoint><con:endpoint>https://dtiqa2.disney.pvt/SLab/servlet/com.dti.app.common.DTIApp</con:endpoint><con:endpoint>https://dtistage.disney.pvt/Bashful/servlet/com.dti.app.common.DTIApp</con:endpoint><con:endpoint>https://dtistage.disney.pvt/Doc/servlet/com.dti.app.common.DTIApp</con:endpoint><con:endpoint>https://dtistage.disney.pvt/Grumpy/servlet/com.dti.app.common.DTIApp</con:endpoint><con:endpoint>https://dtistage.disney.pvt/Snow/servlet/com.dti.app.common.DTIApp</con:endpoint><con:endpoint>https://fldcvfsla1009.wdw.disney.com</con:endpoint><con:endpoint>https://fldcvfsla1019.disney.pvt/Snow/servlet/com.dti.app.common.DTIApp</con:endpoint><con:endpoint>https://fldcvpsla1199.wdw.disney.com/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:endpoint>https://fldcvpsla1200.wdw.disney.com/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:endpoint>https://oianp012.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint></con:endpoints><con:operation isOneWay="false" action="http://services.dti.wdw.com/DisneyTicketingService/transmission" name="transmission" bindingOperationName="transmission" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional" id="a2fbc881-5535-4dda-85b1-8745b43ece6b"><con:settings/><con:call name="WDW QueryTicket" id="4713b23b-fbfb-4ecc-ac9f-bcc84acb93a4"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://Kondasamy:7798/mockDisneyTicketingServiceSoapBinding</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/query_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920150914131300004</PayloadID>  
      <Target>Test-WDW</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2006-01-04</TransmitDate>  
      <TransmitTime>19:23:57.93</TransmitTime>  
      <TktSeller> 
        <TSMAC>AAAACS</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>003</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>120</CmdTimeout>  
        <CmdDate>2006-01-04</CmdDate>  
        <CmdTime>19:23:57.93</CmdTime>  
        <CmdInvoice>199</CmdInvoice>  
        <CmdDevice>TERM 02</CmdDevice>  
        <CmdOperator>100002645</CmdOperator>  
        <CmdActor>MGR</CmdActor> 
      </CommandHeader>  
      <QueryTicketRequest> 
        <Ticket> 
          <TktItem>1</TktItem>  
          <TktID> 
            <TktDSSN>
                <TktDate>2015-06-26</TktDate>
                <TktSite>XAK</TktSite>
                <TktStation>CAS001</TktStation>
                <TktNbr>1</TktNbr>
            </TktDSSN>
          </TktID> 
        </Ticket> 
      </QueryTicketRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="DLR Query Reservation" id="0a6480ce-40c1-461a-9360-e7e6db66887a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiqa1.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/queryreservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920140610113600002</PayloadID>
         <Target>Test-DLR</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2012-04-23</TransmitDate>
         <TransmitTime>09:51:23.000</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONADLR</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>DLRMobile</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>25</CmdTimeout>
            <CmdDate>2012-04-23</CmdDate>
            <CmdTime>09:51:23.00</CmdTime>
            <CmdInvoice>1234567890</CmdInvoice>
            <CmdDevice>SOAPUI</CmdDevice>
            <CmdOperator>lewit019</CmdOperator>
         </CommandHeader>
         <QueryReservationRequest>
            <RequestType>EntitlementProduct</RequestType>
            <QueriedReservation>
               <ResCode>DLRY1000010000011843</ResCode>
            </QueriedReservation>
         </QueryReservationRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW Reservation 2.10" id="47471011-70c1-411d-9159-d416aad4e931"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiqa2.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>25102080944460018498</PayloadID>
         <Target>Test</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2015-06-25</TransmitDate>
         <TransmitTime>11:47:56.85</TransmitTime>
         <TktSeller>
            <TSMAC>WDWEAI</TSMAC>
            <TSSystem>SBC</TSSystem>
            <TSLocation>SBC</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2016-02-05</CmdDate>
            <CmdTime>17:10:56.85</CmdTime>
            <CmdInvoice>10000000000033600</CmdInvoice>
            <CmdDevice>10.199.129.121</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <ReservationRequest>
            <RequestType>Create</RequestType>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>ELX03</ProdCode>
               <ProdQty>2</ProdQty>
               <ProdPrice>403.64</ProdPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCManual>
                        <CCNbr>4444855457062688</CCNbr>
                        <CCExpiration>1219</CCExpiration>
                        <CCVV>529</CCVV>
                        <CCName>Jame Bo</CCName>
                        <CCStreet>756 PARIS WAY</CCStreet>
                        <CCZipcode>76590</CCZipcode>
                        <CCType>DS</CCType>
                     </CCManual>
                  </CreditCard>
               </PayType>
               <PayAmount>807.48</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>2016-02-05</ResCreateDate>
               <ResPickupDate>2016-02-07</ResPickupDate>
               <ResPickupArea>ElectronicEntitlement</ResPickupArea>
               <ResSalesType>ElectronicEntitlement</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="8001 SOB trl" Addr2="" City="Orlando" Country="USA" Email="JimBo@gmail.com" FirstName="Ann-Marie" LastName="O'Malley" Name="Ann-Marie O'Malley" State="FL" Telephone="7324692388" Zip="32809"/>
                  <Ship Addr1="37 13th st" City="surf city" Country="USA" FirstName="james" LastName="bo" Name="james bo" State="NJ" Telephone="6099346897" Zip="08008"/>
               </DemoData>
            </ClientData>
         </ReservationRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="DLR Reservation" id="c8fcd27b-d9b2-43d7-b142-7ccf1f0b817a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920150929144700002</PayloadID>
         <Target>Test-DLR</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2016-02-04</TransmitDate>
         <TransmitTime>09:29:00.81</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONADLR</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PROGENSTR</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2016-02-04</CmdDate>
            <CmdTime>09:29:00.81</CmdTime>
            <CmdInvoice>00000000008112311</CmdInvoice>
            <CmdDevice>WDPRO</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <ReservationRequest>
            <RequestType>Create</RequestType>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>40814PAH</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>225.00</ProdPrice>
            </Ticket>
            <Ticket>
               <TktItem>2</TktItem>
               <ProdCode>40815PAH</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>212.00</ProdPrice>
            </Ticket>
            <Ticket>
               <TktItem>3</TktItem>
               <ProdCode>33708</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>0.00</ProdPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCManual>
                        <CCNbr>4444855457062688</CCNbr>
                        <CCExpiration>0116</CCExpiration>
                        <CCVV>529</CCVV>
                        <CCName>Todd Lewis</CCName>
                        <CCStreet>756 PARIS WAY</CCStreet>
                        <CCZipcode>76590</CCZipcode>
                        <CCType>VI</CCType>
                     </CCManual>
                  </CreditCard>
               </PayType>
               <PayAmount>437.0</PayAmount>
            </Payment>
            <Eligibility>
               <Group>GP</Group>
               <Member/>
            </Eligibility>
            <Reservation>
               <ResCode>DLR9992015092914471</ResCode>
               <ResCreateDate>2016-02-04</ResCreateDate>
               <ResPickupDate>2016-02-04</ResPickupDate>
               <ResPickupArea>PrintOnWeb</ResPickupArea>
               <ResSalesType>PrintOnWeb</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="415 Forest Lake Drive" City="Warner Robins" Country="USA" Email="todd.lewis@disney.com" FirstName="Todd" LastName="Lewis" Name="Todd Lewis" State="GA" Telephone="4789125779" Zip="31093"/>
                  <Ship Country="" Email="" Name="" Zip=""/>
               </DemoData>
            </ClientData>
         </ReservationRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="DLR eGal Res for Mobile" id="aeb77422-061d-4c9e-8210-dadd69404b50"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://gts-tkt-egal.swna.wdpr.disney.com:3051</con:endpoint><con:request><![CDATA[<Envelope>
   <Header>
      <SourceID>WDPRONADLR</SourceID>
      <MessageID>421187</MessageID>
      <TimeStamp>2012-03-16 22:17:33.207</TimeStamp>
      <MessageType>ORDERS</MessageType>
   </Header>
   <Body>
      <Orders>
         <Order>
            <OrderID>DLR999120418</OrderID>
            <CustomerID>300000783</CustomerID>
            <OrderDate>2012-04-18 09:17:33.207</OrderDate>
            <OrderStatus>2</OrderStatus>
            <OrderTotal>266.00</OrderTotal>
            <OrderContact>
               <Contact>
                  <FirstName>Main</FirstName>
                  <LastName>Store</LastName>
                  <Street1>756 PARIS WAY</Street1>
                  <City>Anaheim</City>
                  <State>CA</State>
                  <Zip>76590</Zip>
                  <Country>USA</Country>
                  <Phone>4075662917</Phone>
                  <Email>todd.lewis@disney.com</Email>
               </Contact>
            </OrderContact>
            <ShipToContact>
               <Contact/>
            </ShipToContact>
            <Shipping>
               <DeliveryMethod>9</DeliveryMethod>
               <DeliveryDetails>PrintOnWeb</DeliveryDetails>
            </Shipping>
            <GroupVisit>
               <VisitDate>2012-04-2000:00:00</VisitDate>
            </GroupVisit>
            <OrderLines>
               <OrderLine>
                  <DetailType>1</DetailType>
                  <PLU>28610PAH</PLU>
                  <Description>2011 Auto Motorcycle Parking PAH</Description>
                  <Qty>1</Qty>
                  <Amount>15.00</Amount>
                  <Total>15.00</Total>
               </OrderLine>
               <OrderLine>
                  <DetailType>1</DetailType>
                  <PLU>29445PAH</PLU>
                  <Description>2012 Consumer 6DPH Adult PAH</Description>
                  <Qty>1</Qty>
                  <Amount>251.00</Amount>
                  <Total>251.00</Total>
               </OrderLine>
               <OrderLine>
                  <DetailType>1</DetailType>
                  <PLU>20025</PLU>
                  <Description>Disneys E-Ticket</Description>
                  <Qty>1</Qty>
                  <Amount>0.00</Amount>
                  <Total>0.00</Total>
               </OrderLine>
               <OrderLine>
                  <DetailType>2</DetailType>
                  <PaymentCode>33</PaymentCode>
                  <PaymentDate>2012-03-16 18:17:33.207</PaymentDate>
                  <Description>VI</Description>
                  <Endorsement>4444855457062688</Endorsement>
                  <BillingZIP>76590</BillingZIP>
                  <Amount>266.0</Amount>
                  <Total>266.00</Total>
                  <ExpDate>0115</ExpDate>
                  <CVN>529</CVN>
               </OrderLine>
            </OrderLines>
         </Order>
      </Orders>
   </Body>
</Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="DLR eGal Qry Ord for Mobile" id="f64a7d6e-de9d-499b-9179-09f109b13fb0"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://gts-tkt-egal.swna.wdpr.disney.com:3051</con:endpoint><con:request><![CDATA[<Envelope>
   <Header>
      <SourceID>WDPRONADLR</SourceID>
      <MessageID>4211871</MessageID>
      <MessageType>QueryOrder</MessageType>
      <SessionID/>
      <TimeStamp>2012-03-16 22:17:33.207</TimeStamp>
      <EchoData/>
      <SystemFields/>
   </Header>
   <Body>
      <QueryOrder>
         <Query>
            <OrderID>DLR99912041751</OrderID>
         </Query>
         <DataRequest>
            <Field>Tickets</Field>
         </DataRequest>
      </QueryOrder>
   </Body>
</Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="DLR eGal Qry Ord Err for Mobile" id="9706d9e6-4264-4741-a212-fd25ec647a6d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://gts-tkt-egal.swna.wdpr.disney.com:3051</con:endpoint><con:request><![CDATA[<Envelope>
   <Header>
      <SourceID>WDPRONADLR</SourceID>
      <MessageID>4211871</MessageID>
      <MessageType>QueryOrder</MessageType>
      <SessionID/>
      <TimeStamp>2012-03-16 22:17:33.207</TimeStamp>
      <EchoData/>
      <SystemFields/>
   </Header>
   <Body>
      <QueryOrder>
         <Query>
            <OrderID>DLR1991204175</OrderID>
         </Query>
         <DataRequest>
            <Field>Tickets</Field>
         </DataRequest>
      </QueryOrder>
   </Body>
</Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="DLR Query Ticket" id="910562bc-ece4-4e2d-9308-9bbc5427512e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8081/DTIWeb/DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="D:/DisneyWorkStation/Projects/DTIGateway/upgradeEntitlement/DTIGateway/Source/config/schemas/query_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920151216166981891</PayloadID>
         <Target>Test-DLR</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2017-09-29</TransmitDate>
         <TransmitTime>00:05:16.25</TransmitTime>
         <TktSeller>
            <TSMAC>SF_QUERY</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>APQUERY_DLR</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2017-09-29</CmdDate>
            <CmdTime>00:05:16.25</CmdTime>
            <CmdInvoice>406811625267106</CmdInvoice>
            <CmdDevice>WDPRO</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <QueryTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <External>804560055500125766</External>
               </TktID>
            </Ticket>
            <IncludeTktDemographics>true</IncludeTktDemographics>
            <IncludePassAttributes>true</IncludePassAttributes>
         </QueryTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="DLR Order From DTI" id="29a6a7fd-78b6-46bc-8dfc-ae25eb2f84e7"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://gts-tkt-egal.swna.wdpr.disney.com:3051</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="DLR eGal Qry Tkt" id="65d54da2-e31a-4735-9d19-a38d132ed160"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dlrtktegaldev.swna.wdpr.disney.com </con:endpoint><con:request><![CDATA[<Envelope>
	<Header>
		<SourceID>WDPRONADLR</SourceID>
		<MessageID>36198432</MessageID>
		<TimeStamp>2012-05-04 10:22:40.687</TimeStamp>
		<MessageType>QueryTicket</MessageType>
	</Header>
	<Body>
		<QueryTicket>
			<Query>
				<VisualID>296600018801115033</VisualID>
			</Query>
			<DataRequest>
				<Field>ItemKind</Field>
				<Field>Returnable</Field>
				<Field>Status</Field>
				<Field>DateSold</Field>
				<Field>TicketDate</Field>
				<Field>StartDateTime</Field>
				<Field>DateOpened</Field>
				<Field>ExpirationDate</Field>
				<Field>EndDateTime</Field>
				<Field>ValidUntil</Field>
				<Field>LockedOut</Field>
				<Field>VisualID</Field>
				<Field>Price</Field>
				<Field>UseCount</Field>
				<Field>Tax</Field>
				<Field>FirstName</Field>
				<Field>LastName</Field>
				<Field>Street1</Field>
				<Field>Street2</Field>
				<Field>City</Field>
				<Field>State</Field>
				<Field>ZIP</Field>
				<Field>CountryCode</Field>
				<Field>Phone</Field>
				<Field>Email</Field>
				<Field>DateUsed</Field>
				<Field>PassKindName</Field>
			</DataRequest>
		</QueryTicket>
	</Body>
</Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW QueryTicket Prod" id="7a3edf9c-e9dc-4102-84c1-05668de56bc7"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiprodb.disney.pvt:9445/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/query_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920140429095800006</PayloadID>  
      <Target>Prod-WDW</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2006-01-04</TransmitDate>  
      <TransmitTime>19:23:57.93</TransmitTime>  
      <TktSeller> 
        <TSMAC>AAAACS</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>003</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>093</CmdTimeout>  
        <CmdDate>2006-01-04</CmdDate>  
        <CmdTime>19:23:57.93</CmdTime>  
        <CmdInvoice>199</CmdInvoice>  
        <CmdDevice>TERM 02</CmdDevice>  
        <CmdOperator>100002645</CmdOperator>  
        <CmdActor>MGR</CmdActor> 
      </CommandHeader>  
      <QueryTicketRequest> 
        <Ticket> 
          <TktItem>1</TktItem>  
          <TktID> 
            <TktDSSN>
            <TktDate>2013-11-13</TktDate>
            <TktSite>WTS</TktSite>
            <TktStation>CAS155</TktStation>
            <TktNbr>21</TktNbr>
            </TktDSSN>
          </TktID> 
        </Ticket> 
      </QueryTicketRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="InfoSys Test Query" id="035fb910-bdc4-41ec-890a-05ae146d9f00"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIInfoSys/servlet/com.disney.dti.infosys.servlet.DTIInfoSysServlet </con:endpoint><con:request><![CDATA[<ProductCatalogRQ xsi:noNamespaceSchemaLocation="\var\opt\apps\RT\schemas\dtiinfosys.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <PayloadHeader>
      <PayloadID>39900000000002007694</PayloadID>
      <Target>Test-WDW</Target>
      <Version>1.0</Version>
      <Comm>
         <Protocol>IP</Protocol>
         <Method>Network</Method>
      </Comm>
      <TransmitDate>2006-05-26</TransmitDate>
      <TransmitTime>08:29:34.374</TransmitTime>
   </PayloadHeader>
   <CommandHeader>
      <CmdTimeout>30</CmdTimeout>
      <CmdRequestor>
         <TSMAC>WDPRONADLR</TSMAC>
         <TSLocation>PROGENSTR</TSLocation>
         <CmdOperator>Bob</CmdOperator>
         <CmdActor>ORG</CmdActor>
      </CmdRequestor>
   </CommandHeader>
   <CommandBody>
      <ProviderType>Disneyland California</ProviderType>
      <TSMAC>WDPRONADLR</TSMAC>
      <TSLocation>PROGENSTR</TSLocation>
      <IncludeSoldOut>true</IncludeSoldOut>
      <OnSaleStartDate>2005-01-31</OnSaleStartDate>
      <SkipResponses>0</SkipResponses>
   </CommandBody>
</ProductCatalogRQ>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="DLR Query Reservation - Prod" id="a8546c83-9629-4744-ab79-e2e9e37d2e37"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://oianp012.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/queryreservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920120531120100017</PayloadID>
         <Target>Prod-DLR</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2012-04-23</TransmitDate>
         <TransmitTime>09:51:23.000</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONADLR</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>DLRMobile</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>25</CmdTimeout>
            <CmdDate>2012-04-23</CmdDate>
            <CmdTime>09:51:23.00</CmdTime>
            <CmdInvoice>1234567890</CmdInvoice>
            <CmdDevice>SOAPUI</CmdDevice>
            <CmdOperator>lewit019</CmdOperator>
         </CommandHeader>
         <QueryReservationRequest>
            <RequestType>EntitlementProduct</RequestType>
            <QueriedReservation>
               <ResCode>DOL74285939002</ResCode>
            </QueriedReservation>
         </QueryReservationRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW Res GC Mismatch" id="640091d9-4e95-448f-b7d0-3b508f75dac8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtistage.disney.pvt/Snow/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920120605091500002</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2012-05-02</TransmitDate>
         <TransmitTime>09:40:24.982</TransmitTime>
         <TktSeller>
            <TSMAC>WDWGROUP</TSMAC>
            <TSSystem>BULK</TSSystem>
            <TSLocation>BOLTYTHNET</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2012-05-02</CmdDate>
            <CmdTime>09:40:24.982</CmdTime>
            <CmdInvoice>9474</CmdInvoice>
            <CmdDevice>qn7pr01ptc02.starwave.com/10.199.112.21</CmdDevice>
            <CmdOperator>System</CmdOperator>
         </CommandHeader>
         <ReservationRequest>
            <RequestType>Create</RequestType>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>MGIFT</ProdCode>
               <ProdQty>3</ProdQty>
               <ProdPrice>239.01</ProdPrice>
            </Ticket>
            <Ticket>
               <TktItem>2</TktItem>
               <ProdCode>FMJA5</ProdCode>
               <ProdQty>2</ProdQty>
               <ProdPrice>261.74</ProdPrice>
               <TktValidity>
                  <ValidStart>2012-05-26</ValidStart>
                  <ValidEnd>2012-06-12</ValidEnd>
               </TktValidity>
            </Ticket>
            <Ticket>
               <TktItem>3</TktItem>
               <ProdCode>MC004</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>0.0</ProdPrice>
            </Ticket>
            <Eligibility>
               <Group>BOLT</Group>
               <Member>G0648521</Member>
            </Eligibility>
            <Reservation>
               <ResCreateDate>2012-06-05</ResCreateDate>
               <ResPickupDate>2012-06-05</ResPickupDate>
               <ResPickupArea>WTSPR</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="200 Celebration Place" Addr2="8th Floor" City="Celebration" Country="USA" Email="ian.c.craig@email.disney.com" FirstName="Ian" LastName="Craig" Name="Test Group" State="FL" Telephone="3219394569" Zip="34786"/>
                  <Ship Addr1="" City="" Country="" Email="" FirstName="" LastName="" Name="Test Group" State="" Telephone="" Zip=""/>
               </DemoData>
               <ClientPaymentMethod>MONEY ORDER</ClientPaymentMethod>
               <ClientFulfillmentMethod>Express Delivery - Tkt SVC - Pre Paids</ClientFulfillmentMethod>
               <ClientDeliveryInstructions/>
               <ClientGroupValidity>
                  <ValidStart>2012-05-26</ValidStart>
                  <ValidEnd>2012-06-12</ValidEnd>
               </ClientGroupValidity>
               <ClientSalesContact>kingm029</ClientSalesContact>
               <TimeRequirement/>
            </ClientData>
         </ReservationRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="BOLT DLR Credit Card" id="20bc0eb3-16a2-453b-83b6-d9acf9a6d9e1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920131004080100001</PayloadID>
         <Target>Test-DLR</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2012-11-07</TransmitDate>
         <TransmitTime>10:08:04.874</TransmitTime>
         <TktSeller>
            <TSMAC>DLRGROUP</TSMAC>
            <TSSystem>BULK</TSSystem>
            <TSLocation>BOLTDLRWED</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2012-11-07</CmdDate>
            <CmdTime>10:08:04.874</CmdTime>
            <CmdInvoice>12206</CmdInvoice>
            <CmdDevice>qn7pr01ptc02.starwave.com/10.199.112.21</CmdDevice>
            <CmdOperator>System</CmdOperator>
         </CommandHeader>
         <ReservationRequest>
            <RequestType>Create</RequestType>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>34449PAH</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>151</ProdPrice>
               <TktValidity>
                  <ValidStart>2013-10-04</ValidStart>
               </TktValidity>
            </Ticket>
            <Ticket>
               <TktItem>2</TktItem>
               <ProdCode>34447PAH</ProdCode>
               <ProdQty>5</ProdQty>
               <ProdPrice>79</ProdPrice>
               <TktValidity>
                  <ValidStart>2013-10-04</ValidStart>
               </TktValidity>
            </Ticket>
            <Ticket>
               <TktItem>3</TktItem>
               <ProdCode>34448PAH</ProdCode>
               <ProdQty>2</ProdQty>
               <ProdPrice>73</ProdPrice>
               <TktValidity>
                  <ValidStart>2013-10-04</ValidStart>
               </TktValidity>
            </Ticket>
            <Ticket>
               <TktItem>2</TktItem>
               <ProdCode>20025</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>0</ProdPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCManual>
                        <CCNbr>4444855457062688</CCNbr>
                        <CCExpiration>1213</CCExpiration>
                        <CCName>Shawn Bruce</CCName>
                        <CCStreet>756 PARIS WAY</CCStreet>
                        <CCZipcode>76590</CCZipcode>
                        <CCType>VI</CCType>
                     </CCManual>
                  </CreditCard>
               </PayType>
               <PayAmount>692</PayAmount>
            </Payment>
            <Eligibility>
               <Group>BOLT</Group>
               <Member>ZMDI12E</Member>
            </Eligibility>
            <Reservation>
               <ResCreateDate>2013-10-04</ResCreateDate>
               <ResPickupDate>2013-10-04</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>PrintAtHome</ResSalesType>
               <ResCode>BLT99920131004080101</ResCode>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="901 Elberta Road" Addr2="SUITE 301" City="Warner Robins" Country="USA" Email="info@greenacresbc.com" FirstName="Jenny" LastName="Johnson" Name="Green Acres Baptist Church" State="GA" Telephone="4789231995" Zip="31093"/>
                  <Ship Addr1="" City="" Country="USA" Email="" FirstName="" LastName="" Name="" State="" Telephone="" Zip=""/>
               </DemoData>
               <ClientPaymentMethod>CREDIT CARD</ClientPaymentMethod>
               <ClientDeliveryInstructions>PLEASE ENSURE THAT ALL OF THE MEAL VOUCHERS ARE IN THE TEAL ENVELOPES, ALL OF THE GIFT CARDS ARE IN THE SEA FOAM COLORED ENVELOPES, THE TICKETS ARE IN THE GREEN ENVELOPES, AND THAT THE TOUR VOUCHERS ARE IN THE LIME ENVELOPES.  ALSO, ENSURE THAT EXACTLY 80 PACKING PEANUTS ARE PLACED IN THE ONE BY ONE FOOT SQUARE BOX.</ClientDeliveryInstructions>
               <ClientGroupValidity>
                  <ValidStart>2013-10-04</ValidStart>
                  <ValidEnd>2013-10-30</ValidEnd>
               </ClientGroupValidity>
               <ClientSalesContact>lewit019</ClientSalesContact>
               <TimeRequirement>Deliver by 05/01/2013</TimeRequirement>
            </ClientData>
         </ReservationRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="BOLT DLR Unpaid" id="6baf4653-d426-4876-abfb-8b6980648830"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920131004080200002</PayloadID>
         <Target>Test-DLR</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2012-09-10</TransmitDate>
         <TransmitTime>12:06:18.890</TransmitTime>
         <TktSeller>
            <TSMAC>DLRGROUP</TSMAC>
            <TSSystem>BULK</TSSystem>
            <TSLocation>BOLTDLRLYT</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2012-09-10</CmdDate>
            <CmdTime>12:06:18.890</CmdTime>
            <CmdInvoice>12101</CmdInvoice>
            <CmdDevice>qn7pr01ptc02.starwave.com/10.199.112.21</CmdDevice>
            <CmdOperator>System</CmdOperator>
         </CommandHeader>
         <ReservationRequest>
            <RequestType>Create</RequestType>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>1819BOLT</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>10</ProdPrice>
            </Ticket>
            <Ticket>
               <TktItem>2</TktItem>
               <ProdCode>33905</ProdCode>
               <ProdQty>10</ProdQty>
               <ProdPrice>56</ProdPrice>
            </Ticket>
            <Eligibility>
               <Group>BOLT</Group>
               <Member>ZMDI12E</Member>
            </Eligibility>
            <Reservation>
               <ResCreateDate>2013-10-04</ResCreateDate>
               <ResPickupDate>2013-10-04</ResPickupDate>
               <ResPickupArea>Overnight</ResPickupArea>
               <ResSalesType>Overnight</ResSalesType>
               <ResCode>BLT9992013100408020</ResCode> 
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="190 Center Street Promenade" City="Anaheim" Country="USA" Email="shawn.p.bruce@disney.com" FirstName="Shawn" LastName="Bruce" Name="DLR BOLT TEST YOUTH GROUP" State="CA" Telephone="7145205182" Zip="92805"/>
                  <Ship Addr1="190 Center Street Promenade" City="Anaheim" Country="USA" Email="shawn.p.bruce@disney.com" FirstName="Richard" LastName="Cartaciano" Name="DLR BOLT TEST YOUTH GROUP" State="CA" Telephone="7145205182" Zip="92805"/>
               </DemoData>
               <ClientPaymentMethod>CASHIER'S CHECK</ClientPaymentMethod>
               <ClientFulfillmentMethod>Mail order - Unpaid</ClientFulfillmentMethod>
               <ClientDeliveryInstructions/>
               <ClientGroupValidity>
                  <ValidStart>2013-10-04</ValidStart>
                  <ValidEnd>2013-11-08</ValidEnd>
               </ClientGroupValidity>
               <ClientSalesContact>brucs003</ClientSalesContact>
               <TimeRequirement>Deliver by 10/30/2012</TimeRequirement>
            </ClientData>
         </ReservationRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW MDX Mixed Order" id="293d91f4-dfc3-4ae6-9c19-17cb6092735a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920121121093400011</PayloadID>  
      <Target>Test</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2012-11-20</TransmitDate>  
      <TransmitTime>17:52:59.37</TransmitTime>  
      <TktSeller> 
        <TSMAC>WDPRONAWDW</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>PROGENSTR</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>2012-11-20</CmdDate>  
        <CmdTime>17:52:59.37</CmdTime>  
        <CmdInvoice>62880963877000008</CmdInvoice>  
        <CmdDevice>10.199.144.90</CmdDevice>  
        <CmdOperator>WDPRO</CmdOperator> 
      </CommandHeader>  
      <ReservationRequest> 
        <RequestType>Create</RequestType>  
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>NB022</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>563.39</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>2</TktItem>  
          <ProdCode>NB032</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>563.39</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>3</TktItem>  
          <ProdCode>M0108</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>0.00</ProdPrice> 
        </Ticket>  
        <Payment> 
          <PayItem>1</PayItem>  
          <PayType> 
            <CreditCard> 
              <CCManual> 
                <CCNbr>4444855457062688</CCNbr>  
                <CCExpiration>0114</CCExpiration>  
                <CCName>Mickey Mouse</CCName>  
                <CCStreet>756 PARIS WAY</CCStreet>  
                <CCZipcode>76590</CCZipcode>  
                <CCType>VI</CCType> 
              </CCManual> 
            </CreditCard> 
          </PayType>  
          <PayAmount>1126.78</PayAmount> 
        </Payment>  
        <Reservation> 
          <ResCreateDate>2012-11-20</ResCreateDate>  
          <ResPickupDate>2012-11-20</ResPickupDate>  
          <ResPickupArea>ElectronicEntitlement</ResPickupArea>  
          <ResSalesType>ElectronicEntitlement</ResSalesType> 
        </Reservation>  
        <ClientData> 
          <ClientType>Private</ClientType>  
          <ClientCategory>WW</ClientCategory>  
          <DemoLanguage>en</DemoLanguage>  
          <DemoData> 
            <Bill Addr1="666 SUNSET BLVD" City="Anaheim" Country="USA" FirstName="Mickey" LastName="Mouse" Name="Mickey Mouse" State="CA" Telephone="8185495302" Zip="92808"/>  
            <Ship FirstName="Binky" LastName="Baldwin" Name="Binky Baldwin" Telephone="818-549-5302"/> 
          </DemoData> 
        </ClientData>  
        <EntitlementAccount> 
          <SpecifiedAccount> 
            <AccountItem>1</AccountItem>  
            <NewAccount> 
              <ExternalReferenceType>SWID</ExternalReferenceType>  
              <ExternalReferenceValue>{TLEWIS14-1A7D-4D6C-A391-141A7DFD6CC4}</ExternalReferenceValue> 
            </NewAccount> 
          </SpecifiedAccount> 
        </EntitlementAccount> 
      </ReservationRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW MDX by Link ID" id="108c1099-c611-417d-b7a8-efc83b52349b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920121121093400008</PayloadID>  
      <Target>Test</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2012-11-20</TransmitDate>  
      <TransmitTime>17:52:59.37</TransmitTime>  
      <TktSeller> 
        <TSMAC>WDPRONAWDW</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>PROGENSTR</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>2012-11-20</CmdDate>  
        <CmdTime>17:52:59.37</CmdTime>  
        <CmdInvoice>62880963877000008</CmdInvoice>  
        <CmdDevice>10.199.144.90</CmdDevice>  
        <CmdOperator>WDPRO</CmdOperator> 
      </CommandHeader>  
      <ReservationRequest> 
        <RequestType>Create</RequestType>  
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>AJ0AY</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>94.79</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>2</TktItem>  
          <ProdCode>AJ0BY</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>88.40</ProdPrice> 
        </Ticket>  
        <Payment> 
          <PayItem>1</PayItem>  
          <PayType> 
            <CreditCard> 
              <CCManual> 
                <CCNbr>4444855457062688</CCNbr>  
                <CCExpiration>0114</CCExpiration>  
                <CCName>Mickey Mouse</CCName>  
                <CCStreet>756 PARIS WAY</CCStreet>  
                <CCZipcode>76590</CCZipcode>  
                <CCType>VI</CCType> 
              </CCManual> 
            </CreditCard> 
          </PayType>  
          <PayAmount>183.19</PayAmount> 
        </Payment>  
        <Reservation> 
          <ResCreateDate>2012-11-20</ResCreateDate>  
          <ResPickupDate>2012-11-20</ResPickupDate>  
          <ResPickupArea>MailOrder</ResPickupArea>  
          <ResSalesType>MailOrder</ResSalesType> 
        </Reservation>  
        <ClientData> 
          <ClientType>Private</ClientType>  
          <ClientCategory>WW</ClientCategory>  
          <DemoLanguage>en</DemoLanguage>  
          <DemoData> 
            <Bill Addr1="666 SUNSET BLVD" City="Anaheim" Country="USA" FirstName="Mickey" LastName="Mouse" Name="Mickey Mouse" State="CA" Telephone="8185495302" Zip="92808"/>  
            <Ship FirstName="Binky" LastName="Baldwin" Name="Binky Baldwin" Telephone="818-549-5302"/> 
          </DemoData> 
        </ClientData>  
        <EntitlementAccount> 
          <SpecifiedAccount> 
            <AccountItem>1</AccountItem>  
            <ExistingAccount> 
              <AccountId>11400121111200001</AccountId>  
            </ExistingAccount> 
          </SpecifiedAccount> 
        </EntitlementAccount> 
      </ReservationRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW Create Tkt Alpha Shells" id="aefb088d-d36f-4026-940d-35aa2326b2a5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiqa2.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/create_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920150902112500003</PayloadID>  
      <Target>Test-WDW</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2016-02-05</TransmitDate>  
      <TransmitTime>14:02:03.280</TransmitTime>  
      <TktSeller> 
        <TSMAC>WDWADMIN</TSMAC>  
        <TSSystem>DTIAdminV1</TSSystem>  
        <TSLocation>mkl2</TSLocation>  
        <TSSecurity>Admin1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>2016-02-05</CmdDate>  
        <CmdTime>14:02:03.280</CmdTime>  
        <CmdInvoice>CreTktReq</CmdInvoice>  
        <CmdDevice>DTICTR</CmdDevice>  
        <CmdOperator>DTI</CmdOperator>  
        <CmdNote>DTI Create 1</CmdNote> 
      </CommandHeader>  
      <CreateTicketRequest> 
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>ALPHA-01</ProdCode>  
          <ProdQty>8</ProdQty>  
          <TktShell>2</TktShell>  
          <TktNote>104372</TktNote> 
        </Ticket> 
      </CreateTicketRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW Upgrade Alpha (8)" id="df0f743b-6355-48bb-aa48-6367ed600c3f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/upgrade_alpha_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920150902143100001</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2013-01-16</TransmitDate>
         <TransmitTime>04:26:16.39</TransmitTime>
         <TktSeller>
            <TSMAC>WDWMerch</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>5941</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2013-01-16</CmdDate>
            <CmdTime>04:26:16.39</CmdTime>
            <CmdInvoice>50100381702006167409</CmdInvoice>
            <CmdDevice>WDPRO</CmdDevice>
            <CmdOperator>mschwartz</CmdOperator>
         </CommandHeader>
         <UpgradeAlphaRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>AKF0D</ProdCode>
               <ProdPrice>138.45</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> AFYIHTFEFYHIEHFE43ESHEEETHEFFEEEEEEIFLIHTFEFYHIEHFE43ESHEEETHEFFEEEEEEI </MagTrack1>
                     <MagTrack2>68=108242</MagTrack2>
                  </Mag>
               </TktID>
               <TktShell>78</TktShell>
            </Ticket>
            <Ticket>
               <TktItem>2</TktItem>
               <ProdCode>AKF0D</ProdCode>
               <ProdPrice>138.45</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> EFSJEQCBCVEFBECB10BPEBBBQFBCCBBBBBBJFBJEQCBCVEFBECB10BPEBBBQFBCCBBBBBBJ </MagTrack1>
                     <MagTrack2>68=108242</MagTrack2>
                  </Mag>
               </TktID>
               <TktShell>78</TktShell>
            </Ticket>
            <Ticket>
               <TktItem>3</TktItem>
               <ProdCode>AKF0D</ProdCode>
               <ProdPrice>138.45</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> EFCKGSEDEXGHDGED32DRGEDDSIDEEDDDDDDKFHKGSEDEXGHDGED32DRGEDDSIDEEDDDDDDK </MagTrack1>
                     <MagTrack2>68=108242</MagTrack2>
                  </Mag>
               </TktID>
               <TktShell>78</TktShell>
            </Ticket>
            <Ticket>
               <TktItem>4</TktItem>
                <ProdCode>AKF0D</ProdCode>
               <ProdPrice>138.45</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> WFDLIUGFGZIJFIGF54FTIGFFULFGGFFFFFFLFGLIUGFGZIJFIGF54FTIGFFULFGGFFFFFFL </MagTrack1>
                     <MagTrack2>68=108242</MagTrack2>
                  </Mag>
               </TktID>
               <TktShell>78</TktShell>
            </Ticket>
            <Ticket>
               <TktItem>5</TktItem>
               <ProdCode>AKF0D</ProdCode>
               <ProdPrice>138.45</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> AFUMKWIHI1KLHKIH76HVKJHHWOHIIHHHHHHMFZMKWIHI1KLHKIH76HVKJHHWOHIIHHHHHHM </MagTrack1>
                     <MagTrack2>68=108242</MagTrack2>
                  </Mag>
               </TktID>
               <TktShell>78</TktShell>
            </Ticket>
            <Ticket>
               <TktItem>6</TktItem>
               <ProdCode>AKF0D</ProdCode>
               <ProdPrice>138.45</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> EFBNMYKJK3MNJMKJ98JXMLJJYRJKKJJJJJJNFSNMYKJK3MNJMKJ98JXMLJJYRJKKJJJJJJN </MagTrack1>
                     <MagTrack2>68=108242</MagTrack2>
                  </Mag>
               </TktID>
               <TktShell>78</TktShell>
            </Ticket>
            <Ticket>
               <TktItem>7</TktItem>
               <ProdCode>AKF0D</ProdCode>
               <ProdPrice>138.45</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> EFBOJVHGH0JKGJHG65GUJIGGVPGHHGGGGGGOFSOJVHGH0JKGJHG65GUJIGGVPGHHGGGGGGO </MagTrack1>
                     <MagTrack2>68=108242</MagTrack2>
                  </Mag>
               </TktID>
               <TktShell>78</TktShell>
            </Ticket>
            <Ticket>
               <TktItem>8</TktItem>
               <ProdCode>AKF0D</ProdCode>
               <ProdPrice>138.45</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> EFBPLXJIJ2LMILJI87IWLLIIXSIJJIIIIIIPFSPLXJIJ2LMILJI87IWLLIIXSIJJIIIIIIP </MagTrack1>
                     <MagTrack2>68=108242</MagTrack2>
                  </Mag>
               </TktID>
               <TktShell>78</TktShell>
            </Ticket>
            <IncludeVisualId>true</IncludeVisualId> 
         </UpgradeAlphaRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW Create AP's" id="48d97431-99ad-462e-ab7d-fec609e43eba"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/create_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920130117105500001</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2012-11-16</TransmitDate>
         <TransmitTime>16:14:03.280</TransmitTime>
         <TktSeller>
            <TSMAC>WDWADMIN</TSMAC>
            <TSSystem>DTIAdminV1</TSSystem>
            <TSLocation>mkl2</TSLocation>
            <TSSecurity>Admin1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2012-11-16</CmdDate>
            <CmdTime>16:14:03.280</CmdTime>
            <CmdInvoice>901123211607220013</CmdInvoice>
            <CmdDevice>CreTktReq</CmdDevice>
            <CmdOperator>DTICTR</CmdOperator>
            <CmdNote>DTI CrTktReq#1682</CmdNote>
         </CommandHeader>
         <CreateTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>ND00D</ProdCode>
               <ProdQty>20</ProdQty>
               <TktShell>78</TktShell>
               <TktNote>104372</TktNote>
            </Ticket>
         </CreateTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="DLR Upgrade Alpha" id="587e6f99-94a3-46f3-b611-76398a162fa6"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtistage.disney.pvt/Snow/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<?xml version="1.0"?>
<Transmission xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/upgrade_alpha_request.xsd">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920130117134500006</PayloadID>  
      <Target>Test-DLR</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>NETWORK</Method> 
      </Comm>  
      <TransmitDate>2013-01-17</TransmitDate>  
      <TransmitTime>13:40:20.869</TransmitTime>  
      <TktSeller> 
        <TSMAC>VLINK</TSMAC>  
        <TSSystem>VLINK</TSSystem>  
        <TSLocation>97010800001</TSLocation>  
        <TSSecurity>VLINK</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>30</CmdTimeout>  
        <CmdDate>2013-01-17</CmdDate>  
        <CmdTime>10:40:19.00</CmdTime>  
        <CmdInvoice>0</CmdInvoice>  
        <CmdDevice>0</CmdDevice>  
        <CmdOperator>00000000</CmdOperator> 
      </CommandHeader>  
      <UpgradeAlphaRequest> 
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>182561</ProdCode>  
          <ProdPrice>269.00</ProdPrice>  
          <TktID> 
            <External>6077530981109365</External> 
          </TktID> 
        </Ticket> 
      </UpgradeAlphaRequest> 
    </Command> 
  </Payload> 
</Transmission>

]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW ABS Res" id="d26e5a84-d181-4b81-b8b9-4e51db82f3a7"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920130125123200002</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2013-01-23</TransmitDate>
         <TransmitTime>15:37:48</TransmitTime>
         <TktSeller>
            <TSMAC/>
            <TSSystem>ABS</TSSystem>
            <TSLocation/>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2013-01-23</CmdDate>
            <CmdTime>15:37:48</CmdTime>
            <CmdInvoice>ABS_TKT_51475645-3ae7-4292-9f9b-8c07d835e1f8</CmdInvoice>
            <CmdDevice>fldcvfsla0246</CmdDevice>
            <CmdOperator>ABS</CmdOperator>
         </CommandHeader>
         <ReservationRequest>
            <RequestType>Create</RequestType>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>WHC12</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>240.00</ProdPrice>
               <TktValidity>
                  <ValidStart>2013-04-27</ValidStart>
               </TktValidity>
            </Ticket>
            <Ticket>
               <TktItem>2</TktItem>
               <ProdCode>MC004</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>0.00</ProdPrice>
               <TktValidity>
                  <ValidStart>2013-04-27</ValidStart>
               </TktValidity>
            </Ticket>
            <Reservation>
               <ResCreateDate>2013-01-23</ResCreateDate>
               <ResPickupDate>2013-01-23</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>IN</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill LastName="Potluri" FirstName="Radhika" Name="Radhika Potluri" Addr1="16571 Main St" Addr2="" City="Lake Buena Vista" State="" Zip="02830" Country="" Telephone="FL4075551212" Email="USAemail@email.com" SellerResNbr=""/>
                  <Ship LastName="Potluri" FirstName="Radhika" Name="Radhika Potluri" Addr1="16571 Main St" Addr2="" City="Lake Buena Vista" State="" Zip="02830" Country="" Telephone="FL4075551212" Email="USAemail@email.com"/>
               </DemoData>
            </ClientData>
            <Agency>
               <IATA/>
               <Agent>ABS</Agent>
            </Agency>
         </ReservationRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW Reservation w Demo" id="c32f0558-7834-4751-bed9-bf47b5e563d5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<?xml version="1.0"?>
<Transmission xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920160105163300001</PayloadID>  
      <Target>Test</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2016-01-05</TransmitDate>  
      <TransmitTime>12:50:18.67</TransmitTime>  
      <TktSeller> 
        <TSMAC>WDPRONAWDW</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>PROGENSTR</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>2016-01-05</CmdDate>  
        <CmdTime>12:50:18.67</CmdTime>  
        <CmdInvoice>00000010000480142</CmdInvoice>  
        <CmdDevice>10.199.147.159</CmdDevice>  
        <CmdOperator>WDPRO</CmdOperator> 
      </CommandHeader>  
      <ReservationRequest> 
        <RequestType>Create</RequestType>  
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>NYF03</ProdCode>  
          <ProdQty>2</ProdQty>  
          <ProdPrice>275.84</ProdPrice>  
          <TktAssignment> 
            <AccountItem>1</AccountItem>  
            <ProdQty>1</ProdQty> 
          </TktAssignment>  
          <TktAssignment> 
            <AccountItem>2</AccountItem>  
            <ProdQty>1</ProdQty> 
          </TktAssignment> 
        </Ticket>  
        <Ticket> 
          <TktItem>2</TktItem>  
          <ProdCode>MC004</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>0.00</ProdPrice> 
        </Ticket>  
        <Payment> 
          <PayItem>1</PayItem>  
          <PayType> 
            <CreditCard> 
              <CCManual> 
                <CCNbr>4444855457062688</CCNbr>  
                <CCExpiration>0118</CCExpiration>  
                <CCVV>529</CCVV>  
                <CCName>Stewie Griffin</CCName>  
                <CCStreet>5151 BUENA VISTA</CCStreet>  
                <CCZipcode>76590</CCZipcode>  
                <CCType>VI</CCType> 
              </CCManual> 
            </CreditCard> 
          </PayType>  
          <PayAmount>551.68</PayAmount> 
        </Payment>  
        <Reservation> 
          <ResCreateDate>2016-01-05</ResCreateDate>  
          <ResPickupDate>2016-01-05</ResPickupDate>  
          <ResPickupArea>WillCall</ResPickupArea>  
          <ResSalesType>Presale</ResSalesType> 
        </Reservation>  
        <ClientData> 
          <ClientType>Private</ClientType>  
          <ClientCategory>WW</ClientCategory>  
          <DemoLanguage>en</DemoLanguage>  
          <DemoData> 
            <Bill Addr1="5151 BUENA VISTA" Addr2="" City="Celebration" Country="USA" Email="WDPRO.QA.AutoTest.Email@disney.com" FirstName="Stewie" LastName="Griffin" Name="Stewie Griffin" State="FL" Telephone="4177644123" Zip="34747"/>  
            <Ship Addr1="1025 North Whickham Road" Addr2="" City="Celebration" Country="USA" FirstName="Ichabod" LastName="Crane" Name="Ichabod Crane" State="FL" Telephone="" Zip="34747"/> 
          </DemoData> 
        </ClientData>  
        <EntitlementAccount> 
          <SpecifiedAccount> 
            <AccountItem>1</AccountItem>  
            <NewAccount> 
              <ExternalReferenceType>SWID</ExternalReferenceType>  
              <ExternalReferenceValue>{CB34C8D7-607B-4215-B3B3-C56C0B888CA4}</ExternalReferenceValue> 
            </NewAccount>  
            <AccountDemoData FirstName="Seraphinia"/> 
          </SpecifiedAccount>  
          <SpecifiedAccount> 
            <AccountItem>2</AccountItem>  
            <NewAccount> 
              <ExternalReferenceType>SWID</ExternalReferenceType>  
              <ExternalReferenceValue>{03FBAF60-8F76-41FB-A169-1A8362718507}</ExternalReferenceValue> 
            </NewAccount>  
            <AccountDemoData FirstName="Ichabod"/> 
          </SpecifiedAccount> 
        </EntitlementAccount> 
      </ReservationRequest> 
    </Command> 
  </Payload> 
</Transmission>

]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW Create Tkt Pmt InApp" id="72d351c7-9b42-4ffc-8f20-d492e1b4ffed"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/create_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920150115113700004</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2015-01-12</TransmitDate>
         <TransmitTime>14:32:38</TransmitTime>
         <TktSeller>
            <TSMAC>MOBILEATS</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>MOBILEATSEC</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2015-01-12</CmdDate>
            <CmdTime>14:32:38</CmdTime>
            <CmdInvoice>A3D3B5A0-9A3A-4BD0-AD9B-79E11736CC8E</CmdInvoice>
            <CmdDevice>DBPJ</CmdDevice>
            <CmdOperator>BOUTK001</CmdOperator>
         </CommandHeader>
         <CreateTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>BK0AY</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdDemoData/>
               <ProdPrice>252.41</ProdPrice>
               <TktAssignment>
                  <AccountItem>1</AccountItem>
                  <ProdQty>1</ProdQty>
               </TktAssignment>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCInApp>
                        <CCNbr>4444855457062688</CCNbr>
                        <CCExpiration>1215</CCExpiration>
                        <CCCryptogram>1234567890123456789012345678901234567890</CCCryptogram>
                        <CCCryptoFormat>B</CCCryptoFormat>
                        <CCName>User Two</CCName>
                        <CCStreet>756 PARIS WAY</CCStreet>
                        <CCZipcode>76590</CCZipcode>
                     </CCInApp>
                  </CreditCard>
               </PayType>
               <PayAmount>252.41</PayAmount>
            </Payment>
            <EntitlementAccount>
               <SpecifiedAccount>
                  <AccountItem>1</AccountItem>
                  <NewAccount>
                     <ExternalReferenceType>SECURE_ID</ExternalReferenceType>
                     <ExternalReferenceValue>9998129247826252</ExternalReferenceValue>
                  </NewAccount>
                  <NewMediaData>
                     <MediaId>9998129247826252</MediaId>
                     <MfrId>99989175045133572</MfrId>
                     <VisualId>99930C355203</VisualId>
                  </NewMediaData>
               </SpecifiedAccount>
            </EntitlementAccount>
         </CreateTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW Create Tkt Pmt Swipe" id="3dbc0d09-8f5d-4347-9c32-7d9446960db5"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiqa1.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/create_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920131016143900007</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2012-11-16</TransmitDate>
         <TransmitTime>16:14:03.280</TransmitTime>
         <TktSeller>
            <TSMAC>MOBILEATS</TSMAC>
            <TSSystem>SOAPUI</TSSystem>
            <TSLocation>MOBILEATS001</TSLocation>
            <TSSecurity>Walt</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2012-11-16</CmdDate>
            <CmdTime>16:14:03.280</CmdTime>
            <CmdInvoice>901123211607220013</CmdInvoice>
            <CmdDevice>JTLSOAPUI</CmdDevice>
            <CmdOperator>LEWIT019</CmdOperator>
         </CommandHeader>
         <CreateTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>AJ0BY</ProdCode>
               <ProdQty>5</ProdQty>
               <ProdPrice>88.40</ProdPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCSwipe>
                         <CCTrack1>%B5424180279791765^FDCS TEST CARD /MASTERCARD^1604011000 1111A123456789012 ?</CCTrack1>
                         <CCTrack2>;5424180279791765=1604101100000123456?</CCTrack2>
                     </CCSwipe>
                  </CreditCard>
               </PayType>
               <PayAmount>442.00</PayAmount>
            </Payment>
            <EntitlementAccount>
               <SpecifiedAccount>
                  <AccountItem>1</AccountItem>
                  <NewAccount>
                     <ExternalReferenceType>SWID</ExternalReferenceType>
                     <ExternalReferenceValue>{TLEWIS14-1A7D-4D6C-A391-141A7DFD6CC4}</ExternalReferenceValue>
                  </NewAccount>
               </SpecifiedAccount>
            </EntitlementAccount>
         </CreateTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="DLR Reservation 25K" id="9f5ceef5-4d3b-4d62-b05c-64539dc22478"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiqa1.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920130506150100004</PayloadID>  
      <Target>Test-DLR</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2013-02-05</TransmitDate>  
      <TransmitTime>09:10:53.541</TransmitTime>  
      <TktSeller> 
        <TSMAC>DLRGROUP</TSMAC>  
        <TSSystem>BULK</TSSystem>  
        <TSLocation>BOLTDLRDYT</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>2013-02-05</CmdDate>  
        <CmdTime>09:10:53.541</CmdTime>  
        <CmdInvoice>12454</CmdInvoice>  
        <CmdDevice>qn7pr01ptc02.starwave.com/10.199.112.21</CmdDevice>  
        <CmdOperator>System</CmdOperator> 
      </CommandHeader>  
      <ReservationRequest> 
        <RequestType>Create</RequestType>  
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>30481</ProdCode>  
          <ProdQty>998</ProdQty>  
          <ProdPrice>153</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>2</TktItem>  
          <ProdCode>30481</ProdCode>  
          <ProdQty>998</ProdQty>  
          <ProdPrice>153</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>3</TktItem>  
          <ProdCode>30481</ProdCode>  
          <ProdQty>998</ProdQty>  
          <ProdPrice>153</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>4</TktItem>  
          <ProdCode>30481</ProdCode>  
          <ProdQty>998</ProdQty>  
          <ProdPrice>153</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>5</TktItem>  
          <ProdCode>30481</ProdCode>  
          <ProdQty>998</ProdQty>  
          <ProdPrice>153</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>6</TktItem>  
          <ProdCode>30481</ProdCode>  
          <ProdQty>998</ProdQty>  
          <ProdPrice>153</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>7</TktItem>  
          <ProdCode>30481</ProdCode>  
          <ProdQty>998</ProdQty>  
          <ProdPrice>153</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>8</TktItem>  
          <ProdCode>30481</ProdCode>  
          <ProdQty>998</ProdQty>  
          <ProdPrice>153</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>9</TktItem>  
          <ProdCode>30481</ProdCode>  
          <ProdQty>998</ProdQty>  
          <ProdPrice>153</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>10</TktItem>  
          <ProdCode>30481</ProdCode>  
          <ProdQty>998</ProdQty>  
          <ProdPrice>153</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>11</TktItem>  
          <ProdCode>30481</ProdCode>  
          <ProdQty>19</ProdQty>  
          <ProdPrice>153</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>12</TktItem>  
          <ProdCode>30480</ProdCode>  
          <ProdQty>998</ProdQty>  
          <ProdPrice>143</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>13</TktItem>  
          <ProdCode>30480</ProdCode>  
          <ProdQty>998</ProdQty>  
          <ProdPrice>143</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>14</TktItem>  
          <ProdCode>30480</ProdCode>  
          <ProdQty>998</ProdQty>  
          <ProdPrice>143</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>15</TktItem>  
          <ProdCode>30480</ProdCode>  
          <ProdQty>998</ProdQty>  
          <ProdPrice>143</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>16</TktItem>  
          <ProdCode>30480</ProdCode>  
          <ProdQty>998</ProdQty>  
          <ProdPrice>143</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>17</TktItem>  
          <ProdCode>30480</ProdCode>  
          <ProdQty>998</ProdQty>  
          <ProdPrice>143</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>18</TktItem>  
          <ProdCode>30480</ProdCode>  
          <ProdQty>998</ProdQty>  
          <ProdPrice>143</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>19</TktItem>  
          <ProdCode>30480</ProdCode>  
          <ProdQty>998</ProdQty>  
          <ProdPrice>143</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>20</TktItem>  
          <ProdCode>30480</ProdCode>  
          <ProdQty>998</ProdQty>  
          <ProdPrice>143</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>21</TktItem>  
          <ProdCode>30480</ProdCode>  
          <ProdQty>998</ProdQty>  
          <ProdPrice>143</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>22</TktItem>  
          <ProdCode>30480</ProdCode>  
          <ProdQty>19</ProdQty>  
          <ProdPrice>143</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>23</TktItem>  
          <ProdCode>22561</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>5</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>24</TktItem>  
          <ProdCode>30479</ProdCode>  
          <ProdQty>998</ProdQty>  
          <ProdPrice>133</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>25</TktItem>  
          <ProdCode>30479</ProdCode>  
          <ProdQty>998</ProdQty>  
          <ProdPrice>133</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>26</TktItem>  
          <ProdCode>30479</ProdCode>  
          <ProdQty>998</ProdQty>  
          <ProdPrice>133</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>27</TktItem>  
          <ProdCode>30479</ProdCode>  
          <ProdQty>9</ProdQty>  
          <ProdPrice>133</ProdPrice> 
        </Ticket>  
        <Eligibility> 
          <Group>BOLT</Group>  
          <Member>ZMDI12E</Member> 
        </Eligibility>  
        <Reservation> 
          <ResCreateDate>2013-05-07</ResCreateDate>  
          <ResPickupDate>2013-05-07</ResPickupDate>  
          <ResPickupArea>WillCall</ResPickupArea>  
          <ResSalesType>Presale</ResSalesType>  
          <ResCode>BLT99901150000012456</ResCode> 
        </Reservation>  
        <ClientData> 
          <ClientType>Private</ClientType>  
          <ClientCategory>WW</ClientCategory>  
          <DemoLanguage>en</DemoLanguage>  
          <DemoData> 
            <Bill Addr1="756 PARIS WAY" City="Celebration" Country="USA" Email="shawn.p.bruce@disney.com" FirstName="Shawn" LastName="Bruce" Name="DLR YOUTH Cert Story 22" State="FL" Telephone="3219394568" Zip="76590"/>  
            <Ship Addr1="" City="" Country="" Email="" FirstName="Shawn" LastName="Bruce" Name="DLR YOUTH Cert Story 22" State="" Telephone="" Zip=""/> 
          </DemoData>  
          <ClientPaymentMethod>ORGANIZATIONAL CHECK</ClientPaymentMethod>  
          <ClientFulfillmentMethod>Standard will call.</ClientFulfillmentMethod>  
          <ClientDeliveryInstructions>ZMDI12E</ClientDeliveryInstructions>  
          <ClientGroupValidity> 
            <ValidStart>2013-02-01</ValidStart>  
            <ValidEnd>2013-02-15</ValidEnd> 
          </ClientGroupValidity>  
          <ClientSalesContact>brucs003</ClientSalesContact>  
          <TimeRequirement/> 
        </ClientData> 
      </ReservationRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW Reservation Change 5 Test" id="002f1825-d0d7-4c66-83a4-b058abbafaf3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920130501092200004</PayloadID>  
      <Target>Test</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2012-12-02</TransmitDate>  
      <TransmitTime>07:17:13.44</TransmitTime>  
      <TktSeller> 
        <TSMAC>WDWGROUP</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>BOLTYTHDIR</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>2012-12-02</CmdDate>  
        <CmdTime>07:17:13.44</CmdTime>  
        <CmdInvoice>75406468463000054</CmdInvoice>  
        <CmdDevice>10.199.144.90</CmdDevice>  
        <CmdOperator>WDPRO</CmdOperator> 
      </CommandHeader>  
      <ReservationRequest> 
        <RequestType>Create</RequestType>  
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>NB003</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdDemoData>
               <TktDemoData FirstName="John" LastName="Doe" DateOfBirth="1954-02-01" Gender="m" Addr1="756 Paris Way" Addr2="Apt B 12" City="Celebration" State="FL" Zip="76590" Country="USA" Telephone="4078889999" Email="somewhere@aol.com" OptInSolicit="YES"/>
          </ProdDemoData>
          <ProdPrice>611.31</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>2</TktItem>  
          <ProdCode>MC004</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>0.00</ProdPrice> 
        </Ticket>  
        <Payment> 
          <PayItem>1</PayItem>  
          <PayType> 
            <CreditCard> 
              <CCManual> 
                <CCNbr>4444855457062688</CCNbr>
                <CCExpiration>1113</CCExpiration> 
                <CCVV>529</CCVV>
                <CCName>John Doe</CCName>
                <CCStreet>756 Paris Way</CCStreet>
                <CCZipcode>76590</CCZipcode>
                <CCType>VI</CCType> 
              </CCManual> 
            </CreditCard> 
          </PayType>  
          <PayAmount>110</PayAmount> 
        </Payment>
        <Payment> 
          <PayItem>2</PayItem>  
          <PayType> 
            <GiftCard> 
              <GCManual> 
                <GCNbr>4444855457062688</GCNbr>
              </GCManual> 
            </GiftCard> 
          </PayType>  
          <PayAmount>0</PayAmount> 
        </Payment>
        <Reservation> 
          <ResCreateDate>2012-12-02</ResCreateDate>  
          <ResPickupDate>2012-12-02</ResPickupDate>  
          <ResPickupArea>MailOrder</ResPickupArea>  
          <ResSalesType>MailOrder</ResSalesType> 
        </Reservation>  
        <ClientData> 
          <ClientType>Private</ClientType>  
          <ClientCategory>WW</ClientCategory>  
          <DemoLanguage>en</DemoLanguage>  
          <DemoData> 
            <Bill Addr1="756 Paris Way" City="Celebration" Country="USA" FirstName="John" LastName="Doe" Name="John Doe" State="FL" Telephone="4078889999" Zip="76590"/>  
            <Ship Addr1="756 Paris Way" City="Celebration" Country="USA" FirstName="Jimmy" LastName="Cricket" Name="Jimmy Cricket" State="FL" Telephone="4075666000" Zip="34747"/> 
          </DemoData> 
        </ClientData> 
      </ReservationRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW Reservation Performance" id="2bd0c9bd-1f80-468a-9980-142e9390c043"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920140812142200041</PayloadID>
         <Target>Test</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2014-08-12</TransmitDate>
         <TransmitTime>08:08:09.71</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PROGENSTR</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2014-08-12</CmdDate>
            <CmdTime>08:08:09.71</CmdTime>
            <CmdInvoice>00000010000014653</CmdInvoice>
            <CmdDevice>10.199.147.159</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <ReservationRequest>
            <RequestType>Create</RequestType>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>WHE12</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>199.00</ProdPrice>
            </Ticket>
            <Ticket>
               <TktItem>2</TktItem>
               <ProdCode>MC004</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>0.00</ProdPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCManual>
                        <CCNbr>4444855457062688</CCNbr>
                        <CCExpiration>1215</CCExpiration>
                        <CCName>Visa</CCName>
                        <CCStreet>756 PARIS WAY</CCStreet>
                        <CCZipcode>76590</CCZipcode>
                     </CCManual>
                  </CreditCard>
               </PayType>
               <PayAmount>199.00</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>2014-08-12</ResCreateDate>
               <ResPickupDate>2014-08-12</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="1143 FRANKLIN ST " City="St. Petersburg" Country="USA" FirstName="User" LastName="Two" Name="User Two" State="FL" Telephone="9865324578" Zip="33716"/>
                  <Ship Name=""/>
               </DemoData>
            </ClientData>
         </ReservationRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW Reservation Installment" id="4ae3fe26-db53-4122-95e8-ccf7bef21eba"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiqa2.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920151002121800010</PayloadID>
      <Target>Test</Target>  
      <Version>1.0</Version>  
      <Comm>
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>
      <TransmitDate>2015-09-08</TransmitDate>  
      <TransmitTime>06:21:50.52</TransmitTime>  
      <TktSeller>
        <TSMAC>AP_MAC</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>AP_LOC</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>2015-09-08</CmdDate>  
        <CmdTime>06:21:50.52</CmdTime>  
        <CmdInvoice>00000010001180702</CmdInvoice>  
        <CmdDevice>10.199.135.18</CmdDevice>  
        <CmdOperator>WDPRO</CmdOperator> 
      </CommandHeader>  
      <ReservationRequest> 
        <RequestType>Create</RequestType>  
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>NWF23</ProdCode>  
          <ProdQty>2</ProdQty> 
          <ProdDemoData>
               <TktDemoData FirstName="John" LastName="Doe" DateOfBirth="1954-01-01" Gender="m" Addr1="1 Paris Way" Addr2="Apt B 1" City="Celebration" State="FL" Zip="76590" Country="USA" Telephone="4071111111" Email="numberone@aol.com" OptInSolicit="YES"/>
               <TktDemoData FirstName="Jane" LastName="Doe" DateOfBirth="1953-02-02" Gender="F" Addr1="2 Paris Way" Addr2="Apt B 2" City="Celebration" State="FL" Zip="76590" Country="USA" Telephone="4072222222" Email="numbertwo@aol.com" OptInSolicit="NO"/>
          </ProdDemoData>           
          <ProdPrice>776.39</ProdPrice>  
          <TktAssignment> 
            <AccountItem>1</AccountItem>  
            <ProdQty>1</ProdQty> 
          </TktAssignment> 
          <TktAssignment> 
            <AccountItem>2</AccountItem>  
            <ProdQty>1</ProdQty> 
          </TktAssignment>           
        </Ticket>  
        <Ticket> 
          <TktItem>2</TktItem>  
          <ProdCode>MC004</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>0.00</ProdPrice> 
        </Ticket>  
        <Payment> 
          <PayItem>1</PayItem>  
          <PayType> 
            <CreditCard> 
              <CCManual> 
                <CCNbr>4444855457062688</CCNbr>
                <CCExpiration>1220</CCExpiration>  
                <CCVV>529</CCVV>
                <CCName>John Doe</CCName>  
                <CCStreet>756 PARIS WAY</CCStreet>  
                <CCZipcode>76590</CCZipcode>  
                <CCType>VI</CCType> 
              </CCManual> 
            </CreditCard> 
          </PayType>  
          <PayAmount>224.00</PayAmount> 
        </Payment>  
        <Payment>
        	<PayItem>2</PayItem>
        	<PayType>
        	   <Installment>
        	      <InstallmentCreditCard>
                   <CCManual>
                      <CCNbr>4444855457062688</CCNbr>
                      <CCExpiration>1220</CCExpiration>
                      <CCName>John Doe</CCName>
                   </CCManual>
        	      </InstallmentCreditCard>                   
                <InstallmentDemoData FirstName="John" MiddleName="Todd" LastName="Doe" DateOfBirth="1988-11-05" Addr1="112 Emory Drive" Addr2="Apt B" City="Warner Robins" State="GA" Zip="31093" Country="USA" Telephone="9129231995" AltTelephone="9129227420" Email="person@server.com"/>
        	   </Installment>
        	</PayType>
        	<PayAmount>1328.78</PayAmount>            	
        </Payment>
        <Reservation> 
          <ResCreateDate>2015-09-08</ResCreateDate>  
          <ResPickupDate>2015-09-08</ResPickupDate>  
          <ResPickupArea>WillCall</ResPickupArea>  
          <ResSalesType>Presale</ResSalesType> 
        </Reservation>  
        <ClientData> 
          <ClientType>Private</ClientType>  
          <ClientCategory>WW</ClientCategory>  
          <DemoLanguage>en</DemoLanguage>  
          <DemoData> 
            <Bill Addr1="778 Billing Lane" Addr2="APT B" City="Billiton" Country="USA" Email="floyd@billingsly.com" FirstName="Floyd" LastName="Billingsly" Name="Floyd Billingsly" State="GA" Telephone="9129231995" Zip="31093" SellerResNbr="TSORDERNUM"/>  
            <Ship Addr1="3000 Ship Street SW" Addr2="APT S" City="Shipsville" Country="USA" Email="herman@shipples.com" FirstName="Herman" LastName="Shipple" Name="Herman Shipple" State="WA" Telephone="3122131234" Zip="98037-4718"/>
          </DemoData> 
        </ClientData>  
        <EntitlementAccount> 
          <SpecifiedAccount> 
            <AccountItem>1</AccountItem>  
            <NewAccount> 
              <ExternalReferenceType>SWID</ExternalReferenceType>  
              <ExternalReferenceValue>{E2905145-EB41-45B0-9051-45EB41E120BD}</ExternalReferenceValue> 
            </NewAccount>  
            <AccountDemoData FirstName="John"/> 
          </SpecifiedAccount> 
          <SpecifiedAccount>          
            <AccountItem>2</AccountItem>  
            <NewAccount> 
              <ExternalReferenceType>SWID</ExternalReferenceType>  
              <ExternalReferenceValue>{E2905145-EB41-45B0-9051-45EB41E120BD}</ExternalReferenceValue> 
            </NewAccount>  
            <AccountDemoData FirstName="Jane"/> 
          </SpecifiedAccount>           
        </EntitlementAccount> 
      </ReservationRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW Reservation Validity Dates" id="c160ca22-bb63-4f32-92f2-cfd07ce2cabf"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiqa1.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920130506091400004</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2013-01-24</TransmitDate>
         <TransmitTime>07:31:21.481</TransmitTime>
         <TktSeller>
            <TSMAC>WDWGROUP</TSMAC>
            <TSSystem>BULK</TSSystem>
            <TSLocation>BOLTYTHDIR</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2013-01-24</CmdDate>
            <CmdTime>07:31:21.481</CmdTime>
            <CmdInvoice>12317</CmdInvoice>
            <CmdDevice>qn7pr01ptc01.starwave.com/10.199.114.0</CmdDevice>
            <CmdOperator>System</CmdOperator>
         </CommandHeader>
         <ReservationRequest>
            <RequestType>Create</RequestType>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>CMJA0</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>0</ProdPrice>
               <TktValidity>
                  <ValidStart>2013-02-23</ValidStart>
                  <ValidEnd>2013-03-13</ValidEnd>
               </TktValidity>
            </Ticket>
            <Ticket>
               <TktItem>2</TktItem>
               <ProdCode>M0032</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>10</ProdPrice>
            </Ticket>
            <Ticket>
               <TktItem>3</TktItem>
               <ProdCode>CMJAD</ProdCode>
               <ProdQty>10</ProdQty>
               <ProdPrice>208.74</ProdPrice>
               <TktValidity>
                  <ValidStart>2013-04-23</ValidStart>
                  <ValidEnd>2013-05-13</ValidEnd>
               </TktValidity>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCManual>
                        <CCNbr>4444855457062688</CCNbr>
                        <CCExpiration>1114</CCExpiration>
                        <CCVV>529</CCVV>
                        <CCName>John Doe</CCName>
                        <CCStreet>756 Paris Way</CCStreet>
                        <CCZipcode>76590</CCZipcode>
                        <CCType>VI</CCType>
                     </CCManual>
                  </CreditCard>
               </PayType>
               <PayAmount>2097.4</PayAmount>
            </Payment>
            <Payment>
               <PayItem>2</PayItem>
               <PayType>
                  <Voucher>
                     <MainCode>7800</MainCode>
                  </Voucher>
               </PayType>
            </Payment>
            <Eligibility>
               <Group>BOLT</Group>
               <Member>G0040776</Member>
            </Eligibility>
            <Reservation>
               <ResCreateDate>2013-01-24</ResCreateDate>
               <ResPickupDate>2013-01-24</ResPickupDate>
               <ResPickupArea>MailOrder</ResPickupArea>
               <ResSalesType>AutomatedMailOrder</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="333 Branson Landing" City="Bransing" Country="USA" Email="jayne.mancia@disney.com" FirstName="Kim" LastName="Payne" Name="Seven Dwarves Mining Academy" State="MO" Telephone="3219394564" Zip="65616"/>
                  <Ship Addr1="200 Celebration Place" Addr2="3rd Floor" City="Celebration" Country="USA" Email="jayne.mancia@disney.com" FirstName="Doc" LastName="Dwarf" Name="Seven Dwarves Mining Academy" State="FL" Telephone="3219394564" Zip="34747"/>
               </DemoData>
               <ClientPaymentMethod>CREDIT CARD</ClientPaymentMethod>
               <ClientFulfillmentMethod>Mail order</ClientFulfillmentMethod>
               <ClientDeliveryInstructions>G0040776 please ship by 01.30.13</ClientDeliveryInstructions>
               <ClientGroupValidity>
                  <ValidStart>2013-02-23</ValidStart>
                  <ValidEnd>2013-03-13</ValidEnd>
               </ClientGroupValidity>
               <ClientSalesContact>mancj004</ClientSalesContact>
               <TimeRequirement>Pick-up by 05/01/2013</TimeRequirement>
            </ClientData>
         </ReservationRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="DLR Query Ticket DEMO" id="60231686-bc97-4d35-9f1d-59234199acbe"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiqa2.disney.pvt/SLab/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/query_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920130506145400004</PayloadID>  
      <Target>Test-DLR</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2013-05-06</TransmitDate>  
      <TransmitTime>08:54:26.08</TransmitTime>  
      <TktSeller> 
        <TSMAC>WDPRONADLR</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>352</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>2013-05-06</CmdDate>  
        <CmdTime>08:54:26.08</CmdTime>  
        <CmdInvoice>297581835310847</CmdInvoice>  
        <CmdDevice>WDPRO</CmdDevice>  
        <CmdOperator>WDPRO</CmdOperator> 
      </CommandHeader>  
      <QueryTicketRequest> 
        <Ticket> 
          <TktItem>1</TktItem>  
          <TktID> 
            <External>293840001100407882</External> 
          </TktID> 
        </Ticket>  
        <IncludeTktDemographics>true</IncludeTktDemographics>  
        <IncludePassAttributes>true</IncludePassAttributes> 
      </QueryTicketRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Son of WDW Reservation" id="7fbac6c4-8845-4c0a-815b-0e8abc6c128f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920130506113500003</PayloadID>  
      <Target>Test</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2012-12-02</TransmitDate>  
      <TransmitTime>07:17:13.44</TransmitTime>  
      <TktSeller> 
        <TSMAC>WDPRONAWDW</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>PROGENSTR</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>2012-12-02</CmdDate>  
        <CmdTime>07:17:13.44</CmdTime>  
        <CmdInvoice>75406468463000054</CmdInvoice>  
        <CmdDevice>10.199.144.90</CmdDevice>  
        <CmdOperator>WDPRO</CmdOperator> 
      </CommandHeader>  
      <ReservationRequest> 
        <RequestType>Create</RequestType>  
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>NB022</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>563.39</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>2</TktItem>  
          <ProdCode>NB032</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>563.39</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>3</TktItem>  
          <ProdCode>MC004</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>0.00</ProdPrice> 
        </Ticket>  
        <Payment> 
          <PayItem>1</PayItem>  
          <PayType> 
            <CreditCard> 
              <CCManual> 
                <CCNbr>4444855457062688</CCNbr>  
                <CCExpiration>1114</CCExpiration>  
                <CCVV>529</CCVV>  
                <CCName>John Doe</CCName>  
                <CCStreet>756 Paris Way</CCStreet>  
                <CCZipcode>76590</CCZipcode>  
                <CCType>VI</CCType> 
              </CCManual> 
            </CreditCard> 
          </PayType>  
          <PayAmount>1126.78</PayAmount> 
        </Payment>  
        <Reservation> 
          <ResCreateDate>2012-12-02</ResCreateDate>  
          <ResPickupDate>2012-12-02</ResPickupDate>  
          <ResPickupArea>WillCall</ResPickupArea>  
          <ResSalesType>Presale</ResSalesType> 
        </Reservation>  
        <ClientData> 
          <ClientType>Private</ClientType>  
          <ClientCategory>WW</ClientCategory>  
          <DemoLanguage>en</DemoLanguage>  
          <DemoData> 
            <Bill Addr1="756 Paris Way" City="Celebration" Country="USA" FirstName="John" LastName="Doe" Name="John Doe" State="FL" Telephone="4078889999" Zip="76590"/>  
            <Ship Addr1="756 Paris Way" City="Celebration" Country="USA" FirstName="Jimmy" LastName="Cricket" Name="Jimmy Cricket" State="FL" Telephone="4075666000" Zip="34747"/> 
          </DemoData> 
        </ClientData> 
      </ReservationRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW Void Ticket 2.10" id="4799b6bd-bbcb-48e7-9773-45f5e4354d6d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiqa2.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/void_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920131016134100007</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2013-09-12</TransmitDate>
         <TransmitTime>10:36:44.00</TransmitTime>
         <TktSeller>
            <TSMAC>WGRESORTS</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>120084</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>120</CmdTimeout>
            <CmdDate>2013-09-12</CmdDate>
            <CmdTime>10:36:44.00</CmdTime>
            <CmdInvoice>7</CmdInvoice>
            <CmdDevice>502</CmdDevice>
            <CmdOperator>SHEPARDC</CmdOperator>
            <CmdActor>MGR</CmdActor>
         </CommandHeader>
         <VoidTicketRequest>
            <Ticket>
               <TktItem>2</TktItem>
               <TktID>
                  <Mag>
                     <MagTrack1> EFCDCOA9ATCD9D98709NTI99929AJ999999DFHDCOA9ATCD9D98709NTI99929AJ999999D </MagTrack1>
                     <MagTrack2>79=100010</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
         </VoidTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW Upgrade Entitlement" id="d4201a1e-d04a-4da7-91c1-37af2206f082"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920151211143200003</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2013-09-10</TransmitDate>
         <TransmitTime>14:27:39</TransmitTime>
         <TktSeller>
            <TSMAC>MOBILEATS</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>MOBILEATSAK</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2013-09-10</CmdDate>
            <CmdTime>14:27:39</CmdTime>
            <CmdInvoice>519B7D94-FC37-4D58-9A38-5CB98B77A772</CmdInvoice>
            <CmdDevice>AAT6</CmdDevice>
            <CmdOperator>PANGS045</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktNID>99300111121500058</TktNID>
               </TktID>
               <ProdCode>CJ00Y</ProdCode>
               <ProdPrice>292.88</ProdPrice>
               <UpgrdPrice>181.05</UpgrdPrice>
               <FromProdCode>A000Y</FromProdCode>
               <FromPrice>111.83</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCSwipe>
                        <CCTrack1>%B5424180279791765^FDCS TEST CARD /MASTERCARD^1604011000 1111A123456789012 ?</CCTrack1>
                        <CCTrack2>;5424180279791765=1604101100000123456?</CCTrack2>
                     </CCSwipe>
                  </CreditCard>
               </PayType>
               <PayAmount>181.05</PayAmount>
            </Payment>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW Upgrade Enttl Bad Prdct" id="cf79282f-79ef-45cb-9228-b8d811de3066"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920131001094500004</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2013-09-17</TransmitDate>
         <TransmitTime>13:39:37</TransmitTime>
         <TktSeller>
            <TSMAC>MOBILEATS</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>MOBILEATSMK</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2013-09-17</CmdDate>
            <CmdTime>13:39:37</CmdTime>
            <CmdInvoice>1F5E6780-A2E9-4C06-956E-E323BC3E4F2B</CmdInvoice>
            <CmdDevice>MAD1</CmdDevice>
            <CmdOperator>STUAC003</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktNID>10800217091300001</TktNID>
               </TktID>
               <ProdCode>BK00Y</ProdCode>
               <ProdPrice>258.8</ProdPrice>
               <UpgrdPrice>164.01</UpgrdPrice>
               <FromProdCode>UAJ0A</FromProdCode>
               <FromPrice>94.79</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCSwipe>
                        <CCTrack1>%B5424180279791765^FDCS TEST CARD /MASTERCARD^1604011000 1111A123456789012 ?</CCTrack1>
                        <CCTrack2>;5424180279791765=1604101100000123456?</CCTrack2>
                     </CCSwipe>
                  </CreditCard>
               </PayType>
               <PayAmount>164.01</PayAmount>
            </Payment>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW Create Tkt Pmt Swipe Exist MID" id="219a1b7d-447d-4799-8edf-543cc9b3500f"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiqa2.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/create_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920131016143600001</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2012-11-16</TransmitDate>
         <TransmitTime>16:14:03.280</TransmitTime>
         <TktSeller>
            <TSMAC>MOBILEATS</TSMAC>
            <TSSystem>SOAPUI</TSSystem>
            <TSLocation>MOBILEATS001</TSLocation>
            <TSSecurity>Walt</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2012-11-16</CmdDate>
            <CmdTime>16:14:03.280</CmdTime>
            <CmdInvoice>901123211607220013</CmdInvoice>
            <CmdDevice>JTLSOAPUI</CmdDevice>
            <CmdOperator>LEWIT019</CmdOperator>
         </CommandHeader>
         <CreateTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>AJ0BY</ProdCode>
               <ProdQty>5</ProdQty>
               <ProdPrice>88.40</ProdPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCSwipe>
                         <CCTrack1>%B5424180279791765^FDCS TEST CARD /MASTERCARD^1604011000 1111A123456789012 ?</CCTrack1>
                         <CCTrack2>;5424180279791765=1604101100000123456?</CCTrack2>
                     </CCSwipe>
                  </CreditCard>
               </PayType>
               <PayAmount>442.00</PayAmount>
            </Payment>
            <EntitlementAccount>
               <SpecifiedAccount>
                  <AccountItem>1</AccountItem>
                  <ExistingAccount>
                     <ExistingMediaId>1009502592803863</ExistingMediaId>
                  </ExistingAccount>
               </SpecifiedAccount>
            </EntitlementAccount>
         </CreateTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="DLR Reservation Failure" id="a1ce627c-a336-4c3e-843f-58c5cc2eea07"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920131008151800038</PayloadID>
         <Target>Test-DLR</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2013-10-08</TransmitDate>
         <TransmitTime>12:05:44.70</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONADLR</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>351</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2013-10-08</CmdDate>
            <CmdTime>12:05:44.70</CmdTime>
            <CmdInvoice>00000000002039390</CmdInvoice>
            <CmdDevice>WDPRO</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <ReservationRequest>
            <RequestType>Create</RequestType>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>35565PAH</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>92.00</ProdPrice>
            </Ticket>
            <Ticket>
               <TktItem>2</TktItem>
               <ProdCode>20025</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>0.00</ProdPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCManual>
                        <CCNbr>4444855457062688</CCNbr>
                        <CCExpiration>0416</CCExpiration>
                        <CCName>PATRICK BOYD</CCName>
                        <CCStreet>756 PARIS WAY</CCStreet>
                        <CCZipcode>76590</CCZipcode>
                        <CCType>VI</CCType>
                     </CCManual>
                  </CreditCard>
               </PayType>
               <PayAmount>92.0</PayAmount>
            </Payment>
            <Eligibility>
               <Group>GP</Group>
               <Member/>
            </Eligibility>
            <Reservation>
               <ResCode>DLR99920131010001</ResCode>
               <ResCreateDate>2013-10-10</ResCreateDate>
               <ResPickupDate>2013-10-10</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>PrintAtHome</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="200 CELEBRATION PLACE" City="CELEBRATION" Country="USA" Email="jan.x.garcia.-nd@disney.com" FirstName="PATRICK" LastName="BOYD" Name="PATRICK BOYD" State="FL" Telephone="7197894561" Zip="34747"/>
                  <Ship Country="" Email="" Name="" Zip=""/>
               </DemoData>
            </ClientData>
         </ReservationRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="DLR eGal Order" id="262b365c-e065-4440-954c-354497c90373"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://GTV8-QA-EGAL.swna.wdpr.disney.com</con:endpoint><con:request><![CDATA[<Envelope>
   <Header>
      <SourceID>WDPRONADLR2</SourceID>
      <MessageID>1091086</MessageID>
      <TimeStamp>2013-10-10 14:52:34.533</TimeStamp>
      <MessageType>ORDERS</MessageType>
   </Header>
   <Body>
      <Orders>
         <Order>
            <OrderID>DLR7816422703</OrderID>
            <CustomerID>300000783</CustomerID>
            <OrderDate>2013-10-10 14:52:34.493</OrderDate>
            <OrderStatus>2</OrderStatus>
            <OrderTotal>92.00</OrderTotal>
            <OrderContact>
               <Contact>
                  <FirstName>PATRICK</FirstName>
                  <LastName>BOYD</LastName>
                  <Street1>200 CELEBRATION PLACE</Street1>
                  <City>CELEBRATION</City>
                  <State>FL</State>
                  <Zip>34747</Zip>
                  <Country>USA</Country>
                  <Phone>7197894561</Phone>
                  <Email>jan.x.garcia.-nd@disney.com</Email>
               </Contact>
            </OrderContact>
            <ShipToContact>
               <Contact/>
            </ShipToContact>
            <Shipping>
               <DeliveryMethod>6</DeliveryMethod>
               <DeliveryDetails>PRNT HOME</DeliveryDetails>
            </Shipping>
            <GroupVisit>
               <VisitDate>2013-10-0800:00:00</VisitDate>
               <Description>PATRICK BOYD</Description>
            </GroupVisit>
            <OrderLines>
               <OrderLine>
                  <DetailType>1</DetailType>
                  <PLU>35565PAH</PLU>
                  <Description>WDPRO PAH 1 Day 1 Park Adult 2014</Description>
                  <Qty>1</Qty>
                  <Amount>92.00</Amount>
                  <Total>92.00</Total>
               </OrderLine>
               <OrderLine>
                  <DetailType>1</DetailType>
                  <PLU>20025</PLU>
                  <Description>Disneys E-Ticket</Description>
                  <Qty>1</Qty>
                  <Amount>0.00</Amount>
                  <Total>0.00</Total>
               </OrderLine>
               <OrderLine>
                  <DetailType>2</DetailType>
                  <PaymentCode>33</PaymentCode>
                  <PaymentDate>2013-10-10 10:52:34.533</PaymentDate>
                  <Description>VI</Description>
                  <Endorsement>4444855457062688</Endorsement>
                  <BillingZIP>76590</BillingZIP>
                  <Amount>92.0</Amount>
                  <Total>92.00</Total>
                  <ExpDate>0416</ExpDate>
               </OrderLine>
            </OrderLines>
         </Order>
      </Orders>
   </Body>
</Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW Create Ticket on Account w Media" id="568b2d68-baea-4c92-99fc-607bc8752efb"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/create_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920131022105100006</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2013-10-22</TransmitDate>
         <TransmitTime>07:40:57</TransmitTime>
         <TktSeller>
            <TSMAC>MOBILEATS</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>MOBILEATSEC</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2013-10-22</CmdDate>
            <CmdTime>07:40:57</CmdTime>
            <CmdInvoice>8486A0D3-8E5B-44D5-89F3-1B2C2AE0ABE8</CmdInvoice>
            <CmdDevice>EMT4</CmdDevice>
            <CmdOperator>STUAC003</CmdOperator>
         </CommandHeader>
         <CreateTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>A000Y</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>101.18</ProdPrice>
               <TktAssignment>
                  <AccountItem>1</AccountItem>
                  <ProdQty>1</ProdQty>
               </TktAssignment>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCSwipe>
                        <CCTrack1>%B5424180279791765^FDCS TEST CARD /MASTERCARD^1604011000 1111A123456789012 ?</CCTrack1>
                        <CCTrack2>;5424180279791765=1604101100000123456?</CCTrack2>
                     </CCSwipe>
                  </CreditCard>
               </PayType>
               <PayAmount>101.18</PayAmount>
            </Payment>
            <EntitlementAccount>
               <SpecifiedAccount>
                  <AccountItem>1</AccountItem>
                  <NewAccount>
                     <ExternalReferenceType>XBANDID</ExternalReferenceType>
                     <ExternalReferenceValue>1021104590570293</ExternalReferenceValue>
                  </NewAccount>
                  <NewMediaData>
                     <MediaId>9991104590570294</MediaId>
                     <MfrId>99975DBA8B2B81</MfrId>
                     <VisualId>999101271240</VisualId>
                  </NewMediaData>
               </SpecifiedAccount>
            </EntitlementAccount>
         </CreateTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Copy of WDW QueryTicket" id="f2b08f99-649e-4b00-92c9-a42cb6d849a8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://wm-flwdw-ats023:8480/Hercules/services/LookupEntitlement/KEB3-WIN7-VM/KEB3-WIN7-VM/X/x9999991501380828</con:endpoint><con:request/><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW Upgrade Enttl Zero Cost" id="d540c9de-e4b2-4c99-88e4-128eea992681"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920131127133400006</PayloadID>  
      <Target>Test-WDW</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2013-11-20</TransmitDate>  
      <TransmitTime>15:27:27</TransmitTime>  
      <TktSeller> 
        <TSMAC>MOBILEATS</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>MOBILEATSEC</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>2013-11-20</CmdDate>  
        <CmdTime>15:27:27</CmdTime>  
        <CmdInvoice>85813292-298D-4D75-90F3-4887B339C80F</CmdInvoice>  
        <CmdDevice>EMT4</CmdDevice>  
        <CmdOperator>PANGS045</CmdOperator> 
      </CommandHeader>  
      <UpgradeEntitlementRequest> 
        <Ticket> 
          <TktItem>1</TktItem>  
          <TktID> 
            <TktNID>12000228051300014</TktNID> 
          </TktID>  
          <ProdCode>A001Y</ProdCode>  
          <ProdPrice>94.79</ProdPrice>  
          <UpgrdPrice>0.0</UpgrdPrice>  
          <FromProdCode>AJ0AY</FromProdCode>  
          <FromPrice>94.79</FromPrice> 
        </Ticket> 
      </UpgradeEntitlementRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW Forbidden Res" id="bdbaa033-8906-4027-9294-8061bf49cf76"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<?xml version="1.0"?>

<Transmission xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920131129114900003</PayloadID>  
      <Target>Test-WDW</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2013-11-27</TransmitDate>  
      <TransmitTime>10:36:41</TransmitTime>  
      <TktSeller> 
        <TSMAC>WDWEAI</TSMAC>  
        <TSSystem>SBC</TSSystem>  
        <TSLocation>SBC</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>2013-11-29</CmdDate>  
        <CmdTime>10:36:41</CmdTime>  
        <CmdInvoice>e6768b49-a331-88b-429a-3482aabe8ee7</CmdInvoice>  
        <CmdDevice>fldcvfsla0269</CmdDevice>  
        <CmdOperator>test134.user</CmdOperator> 
      </CommandHeader>  
      <ReservationRequest> 
        <RequestType>Create</RequestType>  
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>NB004</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>648.59</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>2</TktItem>  
          <ProdCode>MC004</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>0.00</ProdPrice> 
        </Ticket>  
        <Payment> 
          <PayItem>1</PayItem>  
          <PayType> 
            <CreditCard> 
              <CCManual> 
                <CCNbr>4444855457062688</CCNbr>  
                <CCExpiration>1214</CCExpiration>  
                <CCName>Visa</CCName>  
                <CCStreet>756 PARIS WAY</CCStreet>  
                <CCZipcode>76590</CCZipcode> 
              </CCManual> 
            </CreditCard> 
          </PayType>  
          <PayAmount>648.59</PayAmount> 
        </Payment>  
        <Reservation> 
          <ResCreateDate>2013-11-29</ResCreateDate>  
          <ResPickupDate>2013-11-29</ResPickupDate>  
          <ResPickupArea>WillCall</ResPickupArea>  
          <ResSalesType>Presale</ResSalesType> 
        </Reservation>  
        <ClientData> 
          <ClientType>Private</ClientType>  
          <ClientCategory>IN</ClientCategory>  
          <DemoLanguage>en</DemoLanguage>  
          <DemoData> 
            <Bill Addr1="200 Showbiz Blvd" Addr2="" City="Orlando" Country="USA" Email="" FirstName="Anthony" LastName="Apple" Name="Anthony Apple" SellerResNbr="" State="FL" Telephone="6789050355" Zip="32830-8475"/>  
            <Ship Addr1="200 Showbiz Blvd" Addr2="" City="Orlando" Country="USA" Email="" FirstName="Anthony" LastName="Apple" Name="Anthony Apple" State="FL" Telephone="6789050355" Zip="32830-8475"/> 
          </DemoData> 
        </ClientData>  
        <Agency> 
          <IATA/>  
          <Agent>test134.user</Agent> 
        </Agency>  
        <Note>@DNIS=5050</Note> 
      </ReservationRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW BOLT Large Reservation" id="d3eaa970-c9d3-4c37-9636-8a19deff5a79"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920131206145100012</PayloadID>  
      <Target>Test-WDW</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2013-12-05</TransmitDate>  
      <TransmitTime>06:45:45.918</TransmitTime>  
      <TktSeller> 
        <TSMAC>WDWGROUP</TSMAC>  
        <TSSystem>BULK</TSSystem>  
        <TSLocation>BOLTYTHDIR</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>2013-12-05</CmdDate>  
        <CmdTime>06:45:45.918</CmdTime>  
        <CmdInvoice>13309</CmdInvoice>  
        <CmdDevice>qn7pr01ptc01.starwave.com/10.199.114.0</CmdDevice>  
        <CmdOperator>System</CmdOperator> 
      </CommandHeader>  
      <ReservationRequest> 
        <RequestType>Create</RequestType>  
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>AAJ0S</ProdCode>  
          <ProdQty>274</ProdQty>  
          <ProdPrice>48.99</ProdPrice>  
          <TktValidity> 
            <ValidStart>2014-01-29</ValidStart>  
            <ValidEnd>2014-02-13</ValidEnd> 
          </TktValidity> 
        </Ticket>  
        <Ticket> 
          <TktItem>2</TktItem>  
          <ProdCode>M0009</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>0</ProdPrice> 
        </Ticket>  
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCManual>
                        <CCNbr>4444855457062688</CCNbr>
                        <CCExpiration>0115</CCExpiration>
                        <CCVV>529</CCVV>
                        <CCName>User Two</CCName>
                        <CCStreet>756 PARIS WAY</CCStreet>
                        <CCZipcode>76590</CCZipcode>
                        <CCType>VI</CCType>
                     </CCManual>
                  </CreditCard>
               </PayType>
               <PayAmount>13423.26</PayAmount>
            </Payment> 
        <Eligibility> 
          <Group>BOLT</Group>  
          <Member>G0123456</Member> 
        </Eligibility>  
        <Reservation> 
          <ResCreateDate>2013-12-06</ResCreateDate>  
          <ResPickupDate>2013-12-06</ResPickupDate>  
          <ResPickupArea>MailOrder</ResPickupArea>  
          <ResSalesType>MailOrder</ResSalesType> 
        </Reservation>  
        <ClientData> 
          <ClientType>Private</ClientType>  
          <ClientCategory>WW</ClientCategory>  
          <DemoLanguage>en</DemoLanguage>  
          <DemoData> 
            <Bill Addr1="200 Celebration Place" City="Celebration" Country="USA" Email="shawn.p.bruce@disney.com" FirstName="James" LastName="Sullivan" Name="Todd Test Order 12/6" State="FL" Telephone="3219394564" Zip="34747"/>  
            <Ship Addr1="200 Celebration Place" City="Celebration" Country="USA" Email="shawn.p.bruce@disney.com" FirstName="James" LastName="Sullivan" Name="Todd Test Order 12/6" State="FL" Telephone="3219394568" Zip="34747"/> 
          </DemoData>  
          <ClientPaymentMethod>CREDIT CARD</ClientPaymentMethod>  
          <ClientFulfillmentMethod>Mail order fulfill by Ticketing</ClientFulfillmentMethod>  
          <ClientDeliveryInstructions/>  
          <ClientGroupValidity> 
            <ValidStart>2014-01-29</ValidStart>  
            <ValidEnd>2014-02-13</ValidEnd> 
          </ClientGroupValidity>  
          <ClientSalesContact>brucs003</ClientSalesContact>  
          <TimeRequirement>Deliver by 01/31/2014</TimeRequirement> 
        </ClientData> 
      </ReservationRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW Reservation SBC" id="d546ec69-2842-41e4-be92-c28dfadf3e43"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiqa2.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920131223104400017</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2013-12-23</TransmitDate>
         <TransmitTime>08:24:18</TransmitTime>
         <TktSeller>
            <TSMAC>WDWEAI</TSMAC>
            <TSSystem>SBC</TSSystem>
            <TSLocation>SBC</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2013-12-23</CmdDate>
            <CmdTime>08:24:18</CmdTime>
            <CmdInvoice>35afc8b6-a331-88b-431f-a0a76cd8965d</CmdInvoice>
            <CmdDevice>123456789012345678</CmdDevice>
            <CmdOperator>test100.user</CmdOperator>
         </CommandHeader>
         <ReservationRequest>
            <RequestType>Create</RequestType>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>WHE12</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>199.00</ProdPrice>
            </Ticket>
            <Ticket>
               <TktItem>2</TktItem>
               <ProdCode>MC004</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>0.00</ProdPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCManual>
                        <CCNbr>4444855457062688</CCNbr>
                        <CCExpiration>1215</CCExpiration>
                        <CCName>Visa</CCName>
                        <CCStreet>756 PARIS WAY</CCStreet>
                        <CCZipcode>76590</CCZipcode>
                     </CCManual>
                  </CreditCard>
               </PayType>
               <PayAmount>199.00</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>2013-12-23</ResCreateDate>
               <ResPickupDate>2013-12-23</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>IN</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="1000 Bill St" Addr2="Apt. B" City="BILLINGS" Country="USA" Email="" FirstName="BILL" LastName="STILL" Name="BILL STILL" SellerResNbr="" State="MT" Telephone="3122131234" Zip="98037-4718"/>
                  <Ship Addr1="2000 Ship St" Addr2="Apt. S" City="SHIPFORD" Country="USA" Email="" FirstName="SHIOWNER" LastName="MOSP" Name="SHIOWNER MOSP" State="WA" Telephone="3122131234" Zip="98037-4718"/>
               </DemoData>
            </ClientData>
            <Agency>
               <IATA/>
               <Agent>test100.user</Agent>
            </Agency>
            <Note>@DNIS=3322</Note>
         </ReservationRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="BOLT DLR Reservation" id="27dc76cf-bf85-457a-8773-e5fe5d6f44a9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiqa2.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920140103083300004</PayloadID>  
      <Target>Test-DLR</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2014-01-06</TransmitDate>  
      <TransmitTime>12:01:05.126</TransmitTime>  
      <TktSeller> 
        <TSMAC>DLRGROUP</TSMAC>  
        <TSSystem>BULK</TSSystem>  
        <TSLocation>BOLTDLRCMA</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>2014-01-02</CmdDate>  
        <CmdTime>12:01:05.126</CmdTime>  
        <CmdInvoice>13334</CmdInvoice>  
        <CmdDevice>qn7pr01ptc02.starwave.com/10.199.112.21</CmdDevice>  
        <CmdOperator>System</CmdOperator> 
      </CommandHeader>  
      <ReservationRequest> 
        <RequestType>Create</RequestType>  
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>37419</ProdCode>  
          <ProdQty>63</ProdQty>  
          <ProdPrice>72</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>2</TktItem>  
          <ProdCode>37422</ProdCode>  
          <ProdQty>58</ProdQty>  
          <ProdPrice>72</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>3</TktItem>  
          <ProdCode>37409</ProdCode>  
          <ProdQty>63</ProdQty>  
          <ProdPrice>49</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>4</TktItem>  
          <ProdCode>37420</ProdCode>  
          <ProdQty>63</ProdQty>  
          <ProdPrice>72</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>5</TktItem>  
          <ProdCode>37421</ProdCode>  
          <ProdQty>63</ProdQty>  
          <ProdPrice>72</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>6</TktItem>  
          <ProdCode>37408</ProdCode>  
          <ProdQty>63</ProdQty>  
          <ProdPrice>49</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>7</TktItem>  
          <ProdCode>37407</ProdCode>  
          <ProdQty>63</ProdQty>  
          <ProdPrice>49</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>8</TktItem>  
          <ProdCode>37410</ProdCode>  
          <ProdQty>63</ProdQty>  
          <ProdPrice>49</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>9</TktItem>  
          <ProdCode>37544SGN10</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>10</ProdPrice> 
        </Ticket>  
        <Eligibility> 
          <Group>BOLT</Group>  
          <Member>ZM2A14C</Member> 
        </Eligibility>  
        <Reservation> 
          <ResCreateDate>2014-01-06</ResCreateDate>  
          <ResPickupDate>2014-01-06</ResPickupDate>  
          <ResPickupArea>OvernightSignature</ResPickupArea>  
          <ResSalesType>OvernightSignature</ResSalesType>  
          <ResCode>BLT99901100000013336</ResCode> 
        </Reservation>  
        <ClientData> 
          <ClientType>Private</ClientType>  
          <ClientCategory>WW</ClientCategory>  
          <DemoLanguage>en</DemoLanguage>  
          <DemoData> 
            <Bill Addr1="222 S. Harbor Blvd." Addr2="Suite 400" City="Anaheim" Country="USA" Email="carlos.machin@disney.com" FirstName="Carlos" LastName="Machin" Name="Vacations by Carlos" State="CA" Telephone="7145205091" Zip="92802"/>  
            <Ship Addr1="222 S. Harbor Blvd." Addr2="Suite 400" City="Anaheim" Country="USA" Email="carlos.machin@disney.com" FirstName="Carlos" LastName="Machin" Name="Vacations by Carlos" State="CA" Telephone="7145205091" Zip="92802"/> 
          </DemoData>  
          <ClientPaymentMethod>ORGANIZATIONAL CHECK</ClientPaymentMethod>  
          <ClientFulfillmentMethod>Mail order fulfill by Ticketing</ClientFulfillmentMethod>  
          <ClientDeliveryInstructions/>  
          <ClientGroupValidity> 
            <ValidStart>2014-01-12</ValidStart>  
            <ValidEnd>2014-02-22</ValidEnd> 
          </ClientGroupValidity>  
          <ClientSalesContact>machj002</ClientSalesContact>  
          <TimeRequirement/> 
        </ClientData> 
      </ReservationRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW Res w/SWID" id="9db0045e-fde3-43a3-b7bc-29683f698c76"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <Payload>
        <PayloadHeader>
            <PayloadID>99920140110092100005</PayloadID>
            <Target>Test</Target>
            <Version>1.0</Version>
            <Comm>
                <Protocol>IP</Protocol>
                <Method>Network</Method>
            </Comm>
            <TransmitDate>2014-01-09</TransmitDate>
            <TransmitTime>11:58:14.84</TransmitTime>
            <TktSeller>
                <TSMAC>WDPRONAWDW</TSMAC>
                <TSSystem>CC</TSSystem>
                <TSLocation>PROGENSTR</TSLocation>
                <TSSecurity>WaltDisney1</TSSecurity>
            </TktSeller>
            <CommandCount>1</CommandCount>
        </PayloadHeader>
        <Command>
            <CommandHeader>
                <CmdItem>1</CmdItem>
                <CmdTimeout>45</CmdTimeout>
                <CmdDate>2014-01-09</CmdDate>
                <CmdTime>11:58:14.84</CmdTime>
                <CmdInvoice>00000020000010751</CmdInvoice>
                <CmdDevice>10.103.21.227</CmdDevice>
                <CmdOperator>WDPRO</CmdOperator>
            </CommandHeader>
            <ReservationRequest>
                <RequestType>Create</RequestType>
                <Ticket>
                    <TktItem>1</TktItem>
                    <ProdCode>WHE11</ProdCode>
                    <ProdQty>2</ProdQty>
                    <ProdDemoData>
                        <TktDemoData Addr1="555 S. Vermont Ave" City="Los Angeles" Country="USA" DateOfBirth="1970-01-01" FirstName="James" Gender="M" LastName="Lee" OptInSolicit="NO" State="CA" Telephone="111-111-1111" Zip="90005"/>
                        <TktDemoData Addr1="555 S. Vermont Ave" City="Los Angeles" Country="USA" DateOfBirth="1970-01-01" FirstName="James" Gender="M" LastName="Lee" OptInSolicit="NO" State="CA" Telephone="111-111-1111" Zip="90005"/>
                    </ProdDemoData>
                    <ProdPrice>95.85</ProdPrice>
                    <TktAssignment>
                        <AccountItem>1</AccountItem>
                        <ProdQty>2</ProdQty>
                    </TktAssignment>
                </Ticket>
                <Ticket>
                    <TktItem>2</TktItem>
                    <ProdCode>MC004</ProdCode>
                    <ProdQty>1</ProdQty>
                    <ProdPrice>0.00</ProdPrice>
                </Ticket>
                <Payment>
                    <PayItem>1</PayItem>
                    <PayType>
                        <CreditCard>
                            <CCManual>
                                <CCNbr>4444855457062688</CCNbr>
                                <CCExpiration>0115</CCExpiration>
                                <CCVV>529</CCVV>
                                <CCName>Sam Mathew</CCName>
                                <CCStreet>756 Paris Way</CCStreet>
                                <CCZipcode>76590</CCZipcode>
                                <CCType>VI</CCType>
                            </CCManual>
                        </CreditCard>
                    </PayType>
                    <PayAmount>191.7</PayAmount>
                </Payment>
                <Reservation>
                    <ResCreateDate>2014-01-09</ResCreateDate>
                    <ResPickupDate>2014-01-09</ResPickupDate>
                    <ResPickupArea>WillCall</ResPickupArea>
                    <ResSalesType>Presale</ResSalesType>
                </Reservation>
                <ClientData>
                    <ClientType>Private</ClientType>
                    <ClientCategory>WW</ClientCategory>
                    <DemoLanguage>en</DemoLanguage>
                    <DemoData>
                        <Bill Addr1="756 Paris Way" Addr2="" City="Waldwick" Country="USA" Email="james.lee@disney.com" FirstName="Sam" LastName="Mathew" Name="Sam Mathew" State="NJ" Telephone="818-549-0000" Zip="76590"/>
                        <Ship Addr1="22 Lincoln Pl" Addr2="" City="Waldwick" Country="USA" FirstName="Sam" LastName="Mathew" Name="Sam Mathew" State="NJ" Telephone="508-982-9700" Zip="07463"/>
                    </DemoData>
                </ClientData>
                <EntitlementAccount>
                    <SpecifiedAccount>
                        <AccountItem>1</AccountItem>
                        <NewAccount>
                            <ExternalReferenceType>SWID</ExternalReferenceType>
                            <ExternalReferenceValue>C93C3EB3-CD54-464E-BC3E-B3CD54364E0B</ExternalReferenceValue>
                        </NewAccount>
                    </SpecifiedAccount>
                </EntitlementAccount>
            </ReservationRequest>
        </Command>
    </Payload>
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="DLR BOLT Carlos Order" id="530e69ec-4c4e-48ea-b827-f7619d8cda8b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920140117033100001</PayloadID>  
      <Target>Test-DLR</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2014-01-17</TransmitDate>  
      <TransmitTime>11:35:19.941</TransmitTime>  
      <TktSeller> 
        <TSMAC>DLRGROUP</TSMAC>  
        <TSSystem>BULK</TSSystem>  
        <TSLocation>BOLTDLRDYT</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>2014-01-17</CmdDate>  
        <CmdTime>11:35:19.941</CmdTime>  
        <CmdInvoice>13400</CmdInvoice>  
        <CmdDevice>qn7pr01ptc01.starwave.com/10.199.114.0</CmdDevice>  
        <CmdOperator>System</CmdOperator> 
      </CommandHeader>  
      <ReservationRequest> 
        <RequestType>Create</RequestType>  
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>37243</ProdCode>  
          <ProdQty>15</ProdQty>  
          <ProdPrice>149</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>2</TktItem>  
          <ProdCode>37259</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>0</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>3</TktItem>  
          <ProdCode>37544SGN10</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>10</ProdPrice> 
        </Ticket>  
        <Eligibility> 
          <Group>BOLT</Group>  
          <Member>ZM2A14BZ</Member> 
        </Eligibility>  
        <Reservation> 
          <ResCreateDate>2014-01-17</ResCreateDate>  
          <ResPickupDate>2014-01-17</ResPickupDate>  
          <ResPickupArea>Overnight</ResPickupArea>  
          <ResSalesType>Overnight</ResSalesType>  
          <ResCode>BLT99920140117153201</ResCode> 
        </Reservation>  
        <ClientData> 
          <ClientType>Private</ClientType>  
          <ClientCategory>WW</ClientCategory>  
          <DemoLanguage>en</DemoLanguage>  
          <DemoData> 
            <Bill Addr1="3333 Spit Spot Rd" Addr2="Suite 333" City="Garden Grove" Country="USA" Email="tom.matts@disney.com" FirstName="Tom" LastName="Matts" Name="Trips Shipped by Tom" State="CA" Telephone="7145553333" Zip="92833"/>  
            <Ship Addr1="444 Chim Cheree Ave" Addr2="Suite 444" City="Anaheim" Country="USA" Email="todd.lewis@disney.com" FirstName="Todd" LastName="Lewis" Name="Pay Todd's Bill Inc" State="CA" Telephone="7145554444" Zip="92844"/> 
          </DemoData>  
          <ClientPaymentMethod>ORGANIZATIONAL CHECK</ClientPaymentMethod>  
          <ClientFulfillmentMethod>Mail order fulfill by Ticketing</ClientFulfillmentMethod>  
          <ClientDeliveryInstructions/>  
          <ClientGroupValidity> 
            <ValidStart>2014-03-25</ValidStart>  
            <ValidEnd>2014-04-09</ValidEnd> 
          </ClientGroupValidity>  
          <ClientSalesContact>machj002</ClientSalesContact>  
          <TimeRequirement>Deliver by 03/15/2014</TimeRequirement> 
        </ClientData>  
        <Agency> 
          <IATA>12-345678</IATA> 
        </Agency> 
      </ReservationRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW QueryTicket AAANat" id="db4c22ea-29fd-4b51-bc3b-305b526649fd"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiqa1.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<?xml version="1.0"?>
<Transmission xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/query_ticket_request.xsd">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920140131114100002</PayloadID>  
      <Target>Test-WDW</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2014-01-31</TransmitDate>  
      <TransmitTime>11:16:41.955</TransmitTime>  
      <TktSeller> 
        <TSMAC>AAA889P</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>522</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>2014-01-31</CmdDate>  
        <CmdTime>11:16:41.955</CmdTime>  
        <CmdInvoice>2018895220000011272</CmdInvoice>  
        <CmdDevice>PAULH</CmdDevice>  
        <CmdOperator>PAULH</CmdOperator>  
        <CmdActor>MGR</CmdActor> 
      </CommandHeader>  
      <QueryTicketRequest> 
        <Ticket> 
          <TktItem>1</TktItem>  
          <TktID> 
            <Mag> 
              <MagTrack1> EFRCA7878RAB7976P67HGX77AY77B777777CFCCA7878RAB7976P67HGX77AY77B777777C </MagTrack1>  
              <MagTrack2>79=100010</MagTrack2> 
            </Mag> 
          </TktID> 
        </Ticket> 
      </QueryTicketRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW Create Tkt WOptIn" id="44fddfa0-f9ac-43b8-87f2-ff03f45c4008"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiqa2.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/create_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920140131141800004</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2014-01-24</TransmitDate>
         <TransmitTime>11:43:17</TransmitTime>
         <TktSeller>
            <TSMAC>MOBILEATS</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>MOBILEATSEC</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2014-01-24</CmdDate>
            <CmdTime>11:43:17</CmdTime>
            <CmdInvoice>6F5604AE-642A-4EE3-A868-207FFE54323C</CmdInvoice>
            <CmdDevice>EMT5</CmdDevice>
            <CmdOperator>STUAC003</CmdOperator>
         </CommandHeader>
         <CreateTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>CJF0J</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdDemoData>
                  <TktDemoData Addr1="848 Bighorn St" City="Oviedo" Country="USA" DateOfBirth="1971-01-24" Email="ucfbama@att.net" FirstName="Craig" Gender="M" LastName="Stuart" OptInSolicit="YES" State="FL" Telephone="4075423179" Zip="32765"/>
               </ProdDemoData>
               <ProdPrice>190.64</ProdPrice>
               <TktAssignment>
                  <AccountItem>1</AccountItem>
                  <ProdQty>1</ProdQty>
               </TktAssignment>
            </Ticket>
            <EntitlementAccount>
               <SpecifiedAccount>
                  <AccountItem>1</AccountItem>
                  <ExistingAccount>
                     <AccountId>12000207011400030</AccountId>
                  </ExistingAccount>
               </SpecifiedAccount>
            </EntitlementAccount>
         </CreateTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW Create Tkt Eligibility" id="be3f8190-485e-48a8-8112-6a96fe72111a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<?xml version="1.0"?>
<Transmission xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/create_ticket_request.xsd">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920140203152400007</PayloadID>  
      <Target>Test-WDW</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2014-02-03</TransmitDate>  
      <TransmitTime>08:52:41</TransmitTime>  
      <TktSeller> 
        <TSMAC>MOBILEATS</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>MOBILEATSEC</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>2014-02-03</CmdDate>  
        <CmdTime>08:52:41</CmdTime>  
        <CmdInvoice>16B0A44E-C3CD-4535-8E7F-238CEF83F12E</CmdInvoice>  
        <CmdDevice>EMT5</CmdDevice>  
        <CmdOperator>STUAC003</CmdOperator> 
      </CommandHeader>  
      <CreateTicketRequest> 
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>DK00Y</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>359.97</ProdPrice>
          <TktValidity>
              <ValidStart>2014-01-25</ValidStart> 
              <ValidEnd>2014-04-07</ValidEnd> 
          </TktValidity>
          <TktAssignment> 
            <AccountItem>1</AccountItem>  
            <ProdQty>1</ProdQty> 
          </TktAssignment> 
        </Ticket>  
        <Ticket> 
          <TktItem>2</TktItem>  
          <ProdCode>DK01Y</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>339.74</ProdPrice>  
          <TktValidity>
              <ValidStart>2014-01-25</ValidStart> 
              <ValidEnd>2014-04-07</ValidEnd> 
          </TktValidity>
          <TktAssignment> 
            <AccountItem>2</AccountItem>  
            <ProdQty>1</ProdQty> 
          </TktAssignment> 
        </Ticket>  
        <Payment> 
          <PayItem>1</PayItem>  
          <PayType> 
            <CreditCard> 
              <CCSwipe> 
                <CCTrack1>%B5424180279791765^FDCS TEST CARD /MASTERCARD^1604011000 1111A123456789012 ?</CCTrack1>  
                <CCTrack2>;5424180279791765=1604101100000123456?</CCTrack2> 
              </CCSwipe> 
            </CreditCard> 
          </PayType>  
          <PayAmount>699.71</PayAmount> 
        </Payment>  
        <Eligibility>
			<Group>Sports</Group>
			<Member>4227268</Member>
		</Eligibility>
        <EntitlementAccount> 
          <SpecifiedAccount> 
            <AccountItem>1</AccountItem>  
            <NewAccount> 
              <ExternalReferenceType>XBANDID</ExternalReferenceType>  
              <ExternalReferenceValue>1029448081197308</ExternalReferenceValue> 
            </NewAccount>  
          </SpecifiedAccount>  
          <SpecifiedAccount> 
            <AccountItem>2</AccountItem>  
            <NewAccount> 
              <ExternalReferenceType>XBANDID</ExternalReferenceType>  
              <ExternalReferenceValue>1029447507078086</ExternalReferenceValue> 
            </NewAccount>  
          </SpecifiedAccount> 
        </EntitlementAccount> 
      </CreateTicketRequest> 
    </Command> 
  </Payload> 
</Transmission>

]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="DLR Mobile Reservation" id="d57a43d2-3cde-4d2c-8b80-ae18ba729f3a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiqa1.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<?xml version="1.0"?>
<Transmission xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920140207081100001</PayloadID>  
      <Target>Test-DLR</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2014-02-03</TransmitDate>  
      <TransmitTime>12:34:18.78</TransmitTime>  
      <TktSeller> 
        <TSMAC>WDPRONADLR</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>DLRMobile</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>25</CmdTimeout>  
        <CmdDate>2014-02-03</CmdDate>  
        <CmdTime>12:34:18.78</CmdTime>  
        <CmdInvoice>10000000000003094</CmdInvoice>  
        <CmdDevice>10.199.144.90</CmdDevice>  
        <CmdOperator>WDPRO</CmdOperator> 
      </CommandHeader>  
      <ReservationRequest> 
        <RequestType>Create</RequestType>  
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>35566PAH</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>86.00</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>2</TktItem>  
          <ProdCode>35565PAH</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>92.00</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>3</TktItem>  
          <ProdCode>35568PAH</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>131.00</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>4</TktItem>  
          <ProdCode>35567PAH</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>137.00</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>5</TktItem>  
          <ProdCode>33708</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>0.00</ProdPrice> 
        </Ticket>  
        <Payment> 
          <PayItem>1</PayItem>  
          <PayType> 
            <CreditCard> 
              <CCManual> 
                <CCNbr>4444855457062688</CCNbr>  
                <CCExpiration>0215</CCExpiration>  
                <CCVV>529</CCVV>  
                <CCName>vfdds bvfd</CCName>  
                <CCStreet>ggdd</CCStreet>  
                <CCZipcode>76590</CCZipcode>  
                <CCType>VI</CCType> 
              </CCManual> 
            </CreditCard> 
          </PayType>  
          <PayAmount>446.0</PayAmount> 
        </Payment>  
        <Eligibility> 
          <Group>GP</Group>  
          <Member/> 
        </Eligibility>  
        <Reservation> 
          <ResCode>DLRY1000010000010219</ResCode>  
          <ResCreateDate>2014-02-03</ResCreateDate>  
          <ResPickupDate>2014-02-03</ResPickupDate>  
          <ResPickupArea>PrintOnWeb</ResPickupArea>  
          <ResSalesType>PrintOnWeb</ResSalesType> 
        </Reservation>  
        <ClientData> 
          <ClientType>Private</ClientType>  
          <ClientCategory>WW</ClientCategory>  
          <DemoLanguage>en</DemoLanguage>  
          <DemoData> 
            <Bill Addr1="ggdd" Addr2="" City="lake buena vista" Country="USA" Email="agustin.catalano@globant.com" FirstName="vfdds" LastName="bvfd" Name="vfdds bvfd" State="FL" Telephone="5554443210" Zip="32830"/>  
            <Ship Addr1="ggdd" Addr2="" City="lake buena vista" Country="USA" Email="agustin.catalano@globant.com" FirstName="vfdds" LastName="bvfd" Name="vfdds bvfd" State="FL" Telephone="5554443210" Zip="32830"/> 
          </DemoData> 
        </ClientData> 
      </ReservationRequest> 
    </Command> 
  </Payload> 
</Transmission>

]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW Reservation w Acct Demo" id="b8c1e886-08b1-4bc4-9638-39411034717b"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <Payload>
        <PayloadHeader>
            <PayloadID>99920140228081700012</PayloadID>
            <Target>Test</Target>
            <Version>1.0</Version>
            <Comm>
                <Protocol>IP</Protocol>
                <Method>Network</Method>
            </Comm>
            <TransmitDate>2014-02-26</TransmitDate>
            <TransmitTime>09:20:03.43</TransmitTime>
            <TktSeller>
                <TSMAC>WDPRONAWDW</TSMAC>
                <TSSystem>CC</TSSystem>
                <TSLocation>PROGENSTR</TSLocation>
                <TSSecurity>WaltDisney1</TSSecurity>
            </TktSeller>
            <CommandCount>1</CommandCount>
        </PayloadHeader>
        <Command>
            <CommandHeader>
                <CmdItem>1</CmdItem>
                <CmdTimeout>45</CmdTimeout>
                <CmdDate>2014-02-26</CmdDate>
                <CmdTime>09:20:03.43</CmdTime>
                <CmdInvoice>10000000000003698</CmdInvoice>
                <CmdDevice>10.199.147.159</CmdDevice>
                <CmdOperator>WDPRO</CmdOperator>
            </CommandHeader>
            <ReservationRequest>
                <RequestType>Create</RequestType>
                <Ticket>
                    <TktItem>1</TktItem>
                    <ProdCode>BK0AY</ProdCode>
                    <ProdQty>1</ProdQty>
                    <ProdPrice>252.41</ProdPrice>
                    <TktAssignment>
                        <AccountItem>4</AccountItem>
                        <ProdQty>1</ProdQty>
                    </TktAssignment>
                </Ticket>
                <Ticket>
                    <TktItem>2</TktItem>
                    <ProdCode>BK0BY</ProdCode>
                    <ProdQty>1</ProdQty>
                    <ProdPrice>238.56</ProdPrice>
                    <TktAssignment>
                        <AccountItem>3</AccountItem>
                        <ProdQty>1</ProdQty>
                    </TktAssignment>
                </Ticket>
                <Ticket>
                    <TktItem>3</TktItem>
                    <ProdCode>WHE11</ProdCode>
                    <ProdQty>1</ProdQty>
                    <ProdPrice>149.00</ProdPrice>
                    <TktAssignment>
                        <AccountItem>4</AccountItem>
                        <ProdQty>1</ProdQty>
                    </TktAssignment>
                </Ticket>
                <Ticket>
                    <TktItem>4</TktItem>
                    <ProdCode>R8001</ProdCode>
                    <ProdQty>1</ProdQty>
                    <ProdPrice>56.45</ProdPrice>
                    <TktAssignment>
                        <AccountItem>4</AccountItem>
                        <ProdQty>1</ProdQty>
                    </TktAssignment>
                </Ticket>
                <Ticket>
                    <TktItem>5</TktItem>
                    <ProdCode>R8011</ProdCode>
                    <ProdQty>3</ProdQty>
                    <ProdPrice>47.93</ProdPrice>
                    <TktAssignment>
                        <AccountItem>1</AccountItem>
                        <ProdQty>1</ProdQty>
                    </TktAssignment>
                    <TktAssignment>
                        <AccountItem>2</AccountItem>
                        <ProdQty>1</ProdQty>
                    </TktAssignment>
                    <TktAssignment>
                        <AccountItem>3</AccountItem>
                        <ProdQty>1</ProdQty>
                    </TktAssignment>
                </Ticket>
                <Ticket>
                    <TktItem>6</TktItem>
                    <ProdCode>NB004</ProdCode>
                    <ProdQty>1</ProdQty>
                    <ProdPrice>675.21</ProdPrice>
                    <TktAssignment>
                        <AccountItem>4</AccountItem>
                        <ProdQty>1</ProdQty>
                    </TktAssignment>
                </Ticket>
                <Ticket>
                    <TktItem>7</TktItem>
                    <ProdCode>NB014</ProdCode>
                    <ProdQty>1</ProdQty>
                    <ProdPrice>675.21</ProdPrice>
                    <TktAssignment>
                        <AccountItem>3</AccountItem>
                        <ProdQty>1</ProdQty>
                    </TktAssignment>
                </Ticket>
                <Ticket>
                    <TktItem>8</TktItem>
                    <ProdCode>DJF07</ProdCode>
                    <ProdQty>1</ProdQty>
                    <ProdPrice>211.94</ProdPrice>
                    <TktAssignment>
                        <AccountItem>2</AccountItem>
                        <ProdQty>1</ProdQty>
                    </TktAssignment>
                </Ticket>
                <Ticket>
                    <TktItem>9</TktItem>
                    <ProdCode>DJF17</ProdCode>
                    <ProdQty>1</ProdQty>
                    <ProdPrice>199.16</ProdPrice>
                    <TktAssignment>
                        <AccountItem>1</AccountItem>
                        <ProdQty>1</ProdQty>
                    </TktAssignment>
                </Ticket>
                <Ticket>
                    <TktItem>10</TktItem>
                    <ProdCode>N1762</ProdCode>
                    <ProdQty>1</ProdQty>
                    <ProdPrice>190.64</ProdPrice>
                    <TktAssignment>
                        <AccountItem>4</AccountItem>
                        <ProdQty>1</ProdQty>
                    </TktAssignment>
                </Ticket>
                <Ticket>
                    <TktItem>11</TktItem>
                    <ProdCode>N1772</ProdCode>
                    <ProdQty>1</ProdQty>
                    <ProdPrice>190.64</ProdPrice>
                    <TktAssignment>
                        <AccountItem>3</AccountItem>
                        <ProdQty>1</ProdQty>
                    </TktAssignment>
                </Ticket>
                <Ticket>
                    <TktItem>12</TktItem>
                    <ProdCode>M0107</ProdCode>
                    <ProdQty>1</ProdQty>
                    <ProdPrice>0.00</ProdPrice>
                </Ticket>
                <Payment>
                    <PayItem>1</PayItem>
                    <PayType>
                        <CreditCard>
                            <CCManual>
                                <CCNbr>4012000033330026</CCNbr>
                                <CCExpiration>0115</CCExpiration>
                                <CCVV>397</CCVV>
                                <CCName>Snow White</CCName>
                                <CCStreet>5151 BUENA VISTA</CCStreet>
                                <CCZipcode>34747</CCZipcode>
                                <CCType>VI</CCType>
                            </CCManual>
                        </CreditCard>
                    </PayType>
                    <PayAmount>2983.01</PayAmount>
                </Payment>
                <Reservation>
                    <ResCreateDate>2014-02-28</ResCreateDate>
                    <ResPickupDate>2014-03-12</ResPickupDate>
                    <ResPickupArea>MailOrder</ResPickupArea>
                    <ResSalesType>MailOrder</ResSalesType>
                </Reservation>
                <ClientData>
                    <ClientType>Private</ClientType>
                    <ClientCategory>WW</ClientCategory>
                    <DemoLanguage>en</DemoLanguage>
                    <DemoData>
                        <Bill Addr1="5151 BUENA VISTA" Addr2="" City="Celebraton" Country="USA" Email="todd.lewis@disney.com" FirstName="Snow" LastName="White" Name="Snow White" State="FL" Telephone="1231231234" Zip="34747"/>
                        <Ship Addr1="1313 S Harbor Blvd" City="Anaheim" Country="USA" FirstName="Snow" LastName="White" Name="Snow White" State="CA" Telephone="1231231234" Zip="92808"/>
                    </DemoData>
                </ClientData>
                <EntitlementAccount>
                    <SpecifiedAccount>
                        <AccountItem>1</AccountItem>
                        <NewAccount>
                            <ExternalReferenceType>GUID</ExternalReferenceType>
                            <ExternalReferenceValue>e0dd7685-75f2-4156-aee8-822f0feb6244</ExternalReferenceValue>
                        </NewAccount>
                        <AccountDemoData FirstName="Alpha" MiddleName="Alan" LastName="Applebee" Suffix="Junior" DateOfBirth="1954-02-01" Addr1="112 Emory Drive" Addr2="Apartment 2B" City="Warner Robins" State="GA" Zip="31093" Country="US" Email="todd.lewis@disney.com" OptInSolicit="YES"/>
                    </SpecifiedAccount>
                    <SpecifiedAccount>
                        <AccountItem>2</AccountItem>
                        <NewAccount>
                            <ExternalReferenceType>GUID</ExternalReferenceType>
                            <ExternalReferenceValue>a018d83b-f8be-40f8-acc3-e2a378a8f86b</ExternalReferenceValue>
                        </NewAccount>
                        <AccountDemoData FirstName="Bravo"/>
                    </SpecifiedAccount>
                    <SpecifiedAccount>
                        <AccountItem>3</AccountItem>
                        <NewAccount>
                            <ExternalReferenceType>GUID</ExternalReferenceType>
                            <ExternalReferenceValue>d588ea4f-42df-4684-a091-c8e9a09ab605</ExternalReferenceValue>
                        </NewAccount>
                        <AccountDemoData FirstName="Charlie"/>
                    </SpecifiedAccount>
                    <SpecifiedAccount>
                        <AccountItem>4</AccountItem>
                        <NewAccount>
                            <ExternalReferenceType>SWID</ExternalReferenceType>
                            <ExternalReferenceValue>{00736D68-F35F-4BCA-B36D-68F35F1BCAB8}</ExternalReferenceValue>
                        </NewAccount>
                        <AccountDemoData FirstName="Delta"/>
                    </SpecifiedAccount>
                </EntitlementAccount>
            </ReservationRequest>
        </Command>
    </Payload>
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="DLR Res 301" id="2d798fb5-f7c0-4aea-b19c-bd08454b48c9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiqa1.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<?xml version="1.0"?>

<Transmission xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99910000000000005171</PayloadID>  
      <Target>Test-DLR</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2014-04-28</TransmitDate>  
      <TransmitTime>12:37:47.67</TransmitTime>  
      <TktSeller> 
        <TSMAC>WDPRONADLR</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>PROGENSTR</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>25</CmdTimeout>  
        <CmdDate>2014-04-28</CmdDate>  
        <CmdTime>12:37:47.67</CmdTime>  
        <CmdInvoice>10000000000005171</CmdInvoice>  
        <CmdDevice>10.199.144.90</CmdDevice>  
        <CmdOperator>WDPRO</CmdOperator> 
      </CommandHeader>  
      <ReservationRequest> 
        <RequestType>Create</RequestType>  
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>38130PAH</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>266.00</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>2</TktItem>  
          <ProdCode>33708</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>0.00</ProdPrice> 
        </Ticket>  
        <Payment> 
          <PayItem>1</PayItem>  
          <PayType> 
            <CreditCard> 
              <CCManual> 
                <CCNbr>1111111111113069</CCNbr>  
                <CCExpiration>0416</CCExpiration>  
                <CCName>RAJIV KUMAR</CCName>  
                <CCStreet>22 LINCOLN PLACE</CCStreet>  
                <CCZipcode>07463</CCZipcode>  
                <CCType>IV</CCType> 
              </CCManual> 
            </CreditCard> 
          </PayType>  
          <PayAmount>266.0</PayAmount> 
        </Payment>  
        <Eligibility> 
          <Group>GP</Group>  
          <Member/> 
        </Eligibility>  
        <Reservation> 
          <ResCode>DLRY1000010000010558</ResCode>  
          <ResCreateDate>2014-04-28</ResCreateDate>  
          <ResPickupDate>2014-04-28</ResPickupDate>  
          <ResPickupArea>PrintOnWeb</ResPickupArea>  
          <ResSalesType>PrintOnWeb</ResSalesType> 
        </Reservation>  
        <ClientData> 
          <ClientType>Private</ClientType>  
          <ClientCategory>WW</ClientCategory>  
          <DemoLanguage>en</DemoLanguage>  
          <DemoData> 
            <Bill Addr1="22 LINCOLN PLACE" Addr2="" City="WALDWICK" Country="US" Email="rajiv.x.kumar.-nd@disney.com" FirstName="RAJIV" LastName="KUMAR" Name="RAJIV KUMAR" State="NJ" Zip="07463"/>  
            <Ship FirstName="" LastName="" Name=" "/> 
          </DemoData> 
        </ClientData> 
      </ReservationRequest> 
    </Command> 
  </Payload> 
</Transmission>

]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="DLR Void Ticket 2.10" id="1eeb1de4-9049-42b4-a149-262c8d70e4c9"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiqa2.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/void_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920140606081400003</PayloadID>
         <Target>Test-DLR</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2013-09-12</TransmitDate>
         <TransmitTime>10:36:44.00</TransmitTime>
         <TktSeller>
            <TSMAC>VLINK</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>97016000002</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>120</CmdTimeout>
            <CmdDate>2013-09-12</CmdDate>
            <CmdTime>10:36:44.00</CmdTime>
            <CmdInvoice>7</CmdInvoice>
            <CmdDevice>502</CmdDevice>
            <CmdOperator>SHEPARDC</CmdOperator>
            <CmdActor>MGR</CmdActor>
         </CommandHeader>
         <VoidTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <External>802100055100003340</External>
               </TktID>
            </Ticket>
         </VoidTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW Create Specified Acct" id="6fbdfdc4-b7e4-44f0-8c45-4320cf9dcfd3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiqa1.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<?xml version="1.0"?>

<Transmission xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/create_ticket_request.xsd">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920140703080500002</PayloadID>  
      <Target>Test-WDW</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2014-07-02</TransmitDate>  
      <TransmitTime>15:50:28</TransmitTime>  
      <TktSeller> 
        <TSMAC>MOBILEATS</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>MOBILEATSAK</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>2014-07-02</CmdDate>  
        <CmdTime>15:50:28</CmdTime>  
        <CmdInvoice>E905B04A-13B2-4F25-A621-EF10CDF66905</CmdInvoice>  
        <CmdDevice>AB0S</CmdDevice>  
        <CmdOperator>ZAPPD002</CmdOperator> 
      </CommandHeader>  
      <CreateTicketRequest> 
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>ABL01</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdDemoData/>  
          <ProdPrice>0.0</ProdPrice>  
          <TktAssignment> 
            <AccountItem>1</AccountItem>  
            <ProdQty>1</ProdQty> 
          </TktAssignment> 
        </Ticket>  
        <EntitlementAccount> 
          <SpecifiedAccount> 
            <AccountItem>1</AccountItem>  
            <ExistingAccount> 
              <AccountId>09307802071400261</AccountId> 
            </ExistingAccount> 
          </SpecifiedAccount> 
        </EntitlementAccount> 
      </CreateTicketRequest> 
    </Command> 
  </Payload> 
</Transmission>

]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="WDW HERA Upgrade" id="dd2e6993-e97e-413f-95d8-51c845897628"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiqa2.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920140801124200001</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2014-08-01</TransmitDate>
         <TransmitTime>09:37:15</TransmitTime>
         <TktSeller>
            <TSMAC>MOBILEATS</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>MOBILEATSEC</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2014-08-01</CmdDate>
            <CmdTime>09:37:15</CmdTime>
            <CmdInvoice>D3724DF0-A3A9-43EF-8EEF-DAD601848E04</CmdInvoice>
            <CmdDevice>EMT5</CmdDevice>
            <CmdOperator>STUAC003</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktNID>11400101081400006</TktNID>
               </TktID>
               <ProdCode>IT0AY</ProdCode>
               <ProdPrice>772.13</ProdPrice>
               <UpgrdPrice>37.28</UpgrdPrice>
               <FromProdCode>HTO01</FromProdCode>
               <FromPrice>734.85</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCSwipe>
                        <CCTrack1>%B4012000033330026^FDCS TEST CARD   /VISA^160410054321000000000000000  150  A?;</CCTrack1>
                        <CCTrack2>4012000033330026=16041011000012345678?</CCTrack2>
                     </CCSwipe>
                  </CreditCard>
               </PayType>
               <PayAmount>37.28</PayAmount>
            </Payment>
            <Payment>
               <PayItem>2</PayItem>
               <PayType>
                  <Voucher>
                     <MainCode>7800</MainCode>
                  </Voucher>
               </PayType>
               <PayAmount>102.87</PayAmount>
            </Payment>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call name="DLR Reservation KGB NPE" id="164c2604-e03c-4b63-a6a3-680c651ffee1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd">
  <Payload>
    <PayloadHeader>
      <PayloadID>99920140806112900005</PayloadID>
     <Target>Test-DLR</Target>
      <Version>1.0</Version>
      <Comm>
        <Protocol>IP</Protocol>
        <Method>Network</Method>
      </Comm>
      <TransmitDate>2014-08-05</TransmitDate>
      <TransmitTime>12:22:43.86</TransmitTime>
      <TktSeller>
        <TSMAC>WDPRONADLR</TSMAC>
        <TSSystem>CC</TSSystem>
        <TSLocation>PROGENSTR</TSLocation>
        <TSSecurity>WaltDisney1</TSSecurity>
      </TktSeller>
      <CommandCount>1</CommandCount>
    </PayloadHeader>
    <Command>
      <CommandHeader>
        <CmdItem>1</CmdItem>
        <CmdTimeout>25</CmdTimeout>
        <CmdDate>2014-08-05</CmdDate>
        <CmdTime>12:22:43.86</CmdTime>
        <CmdInvoice>10000000000010592</CmdInvoice>
        <CmdDevice>10.199.144.90</CmdDevice>
        <CmdOperator>WDPRO</CmdOperator>
      </CommandHeader>
      <ReservationRequest>
        <RequestType>Create</RequestType>
        <Ticket>
          <TktItem>1</TktItem>
          <ProdCode>38128PAH</ProdCode>
          <ProdQty>1</ProdQty>
          <ProdPrice>250.00</ProdPrice>
        </Ticket>
        <Ticket>
          <TktItem>2</TktItem>
          <ProdCode>33708</ProdCode>
          <ProdQty>1</ProdQty>
          <ProdPrice>0.00</ProdPrice>
        </Ticket>
        <Payment>
          <PayItem>1</PayItem>
          <PayType>
            <GiftCard>
              <GCManual>
                <GCNbr>7777000022671234</GCNbr>
              </GCManual>
            </GiftCard>
          </PayType>
          <PayAmount>250.0</PayAmount>
        </Payment>
        <Eligibility>
          <Group>GP</Group>
          <Member/>
        </Eligibility>
        <Reservation>
          <ResCode>DLRY1000010000019609</ResCode>
          <ResCreateDate>2014-08-06</ResCreateDate>
          <ResPickupDate>2014-08-06</ResPickupDate>
          <ResPickupArea>PrintOnWeb</ResPickupArea>
          <ResSalesType>PrintOnWeb</ResSalesType>
        </Reservation>
        <ClientData>
          <ClientType>Private</ClientType>
          <ClientCategory>WW</ClientCategory>
          <DemoLanguage>en</DemoLanguage>
          <DemoData>
            <Bill Addr1="661 SUNSET BLVD" City="ANAHEIM" Country="USA" Email="matias.petrone@globant.com" FirstName="Matias" LastName="Petrone" Name="Matias Petrone" State="CA" Telephone="1234567890" Zip="92808"/>
          </DemoData>
        </ClientData>
      </ReservationRequest>
    </Command>
  </Payload>
</Transmission>
]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call id="77ba7f1c-2743-4a2e-9a47-f4d45d9bbeac" name="DLR Omnico AP Query Ticket"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiprod.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/query_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920140822133700001</PayloadID>
         <Target>Prod-DLR</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2014-08-21</TransmitDate>
         <TransmitTime>16:16:39.000</TransmitTime>
         <TktSeller>
            <TSMAC>DLRMerch</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>0060</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>25</CmdTimeout>
            <CmdDate>2014-08-21</CmdDate>
            <CmdTime>16:16:39.00</CmdTime>
            <CmdInvoice>036000600002</CmdInvoice>
            <CmdDevice>2</CmdDevice>
            <CmdOperator>00318175</CmdOperator>
            <CmdActor>MGR</CmdActor>
         </CommandHeader>
         <QueryTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <External>801470019504472206</External>
               </TktID>
            </Ticket>
         </QueryTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call id="ab7ced38-6bd4-4288-a1b2-262075cfb101" name="WDW Reservation DORMS A"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiqa2.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<?xml version="1.0"?>
<Transmission xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920151112161400004</PayloadID>  
      <Target>Test-WDW</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2015-11-02</TransmitDate>  
      <TransmitTime>22:06:25</TransmitTime>  
      <TktSeller> 
        <TSMAC>WDWEAI</TSMAC>  
        <TSSystem>SBC</TSSystem>  
        <TSLocation>SBC</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>2015-11-02</CmdDate>  
        <CmdTime>22:06:25</CmdTime>  
        <CmdInvoice>cca58b2e-a334-20b-50cb-4f551ed1ad78</CmdInvoice>  
        <CmdDevice>fldcvpsla0531</CmdDevice>  
        <CmdOperator>SNYDA033</CmdOperator> 
      </CommandHeader>  
      <ReservationRequest> 
        <RequestType>Create</RequestType>  
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>NYF01</ProdCode>  
          <ProdQty>3</ProdQty>  
          <ProdPrice>414.29</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>2</TktItem>  
          <ProdCode>NYF11</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>414.29</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>3</TktItem>  
          <ProdCode>S002H</ProdCode>  
          <ProdQty>3</ProdQty>  
          <ProdPrice>84.14</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>4</TktItem>  
          <ProdCode>S003H</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>78.81</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>5</TktItem>  
          <ProdCode>M0032</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>0.00</ProdPrice> 
        </Ticket>  
        <Payment> 
          <PayItem>1</PayItem>  
               <PayType>
                  <CreditCard>
                     <CCManual>
                        <CCNbr>4444855457062688</CCNbr>
                        <CCExpiration>0117</CCExpiration>
                        <CCVV>529</CCVV>
                        <CCName>User Two</CCName>
                        <CCStreet>756 PARIS WAY</CCStreet>
                        <CCZipcode>76590</CCZipcode>
                        <CCType>VI</CCType>
                     </CCManual>
                  </CreditCard>
               </PayType>
          <PayAmount>1988.39</PayAmount> 
        </Payment>  
        <Reservation> 
          <ResCreateDate>2015-11-02</ResCreateDate>  
          <ResPickupDate>2015-11-02</ResPickupDate>  
          <ResPickupArea>MailOrder</ResPickupArea>  
          <ResSalesType>Overnight</ResSalesType> 
        </Reservation>  
        <ClientData> 
          <ClientType>Private</ClientType>  
          <ClientCategory>IN</ClientCategory>  
          <DemoLanguage>en</DemoLanguage>  
          <DemoData> 
            <Bill Addr1="17409 New Cross Cir" Addr2="" City="Lithia" Country="USA" Email="BJEFF1017@AOL.COM" FirstName="Becky" LastName="Jefferson" Name="Becky Jefferson" SellerResNbr="" State="FL" Telephone="8137160193" Zip="33547-4916"/>  
            <Ship Addr1="17409 New Cross Cir" Addr2="" City="Lithia" Country="USA" Email="" FirstName="Becky" LastName="Jefferson" Name="Becky Jefferson" State="FL" Telephone="8137160193" Zip="33547-4916"/> 
          </DemoData> 
        </ClientData>  
        <Agency> 
          <IATA/>  
          <Agent>SNYDA033</Agent> 
        </Agency>  
        <Note>@DNIS=25277</Note> 
      </ReservationRequest> 
    </Command> 
  </Payload> 
</Transmission>

]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call id="1cc8b42e-8ca7-4be6-bf0c-c58214a85730" name="WDW Reservation HDKL Test"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920141015133900001</PayloadID>
         <Target>Test</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2014-10-15</TransmitDate>
         <TransmitTime>10:26:26.66</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PROGENSTR</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2014-10-15</CmdDate>
            <CmdTime>10:26:26.66</CmdTime>
            <CmdInvoice>00000010000045609</CmdInvoice>
            <CmdDevice>10.199.144.90</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <ReservationRequest>
            <RequestType>Create</RequestType>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>HJ0AY</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>355.71</ProdPrice>
               <TktAssignment>
                  <AccountItem>1</AccountItem>
                  <ProdQty>1</ProdQty>
               </TktAssignment>
            </Ticket>
            <Ticket>
               <TktItem>2</TktItem>
               <ProdCode>MC004</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>0.00</ProdPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCManual>
                        <CCNbr>4444855457062688</CCNbr>
                        <CCExpiration>0115</CCExpiration>
                        <CCName>Joe Montana</CCName>
                        <CCStreet>756 Paris Way</CCStreet>
                        <CCZipcode>92870</CCZipcode>
                        <CCType>VI</CCType>
                     </CCManual>
                  </CreditCard>
               </PayType>
               <PayAmount>355.71</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>2014-10-15</ResCreateDate>
               <ResPickupDate>2014-10-15</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="756 Paris Way" Addr2="" City="Placentia" Country="US" Email="wdpro.tester.70@gmail.com" FirstName="wdpro" LastName="tester" Name="wdpro tester" State="CA" Zip="92870"/>
                  <Ship Name=""/>
               </DemoData>
            </ClientData>
            <EntitlementAccount>
               <SpecifiedAccount>
                  <AccountItem>1</AccountItem>
                  <NewAccount>
                     <ExternalReferenceType>SWID</ExternalReferenceType>
                     <ExternalReferenceValue>{976F9E4D-2C9D-49E7-AF9E-4D2C9D09E706}</ExternalReferenceValue>
                  </NewAccount>
                  <AccountDemoData FirstName="wdpro"/>
               </SpecifiedAccount>
            </EntitlementAccount>
         </ReservationRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call id="1c8c7d1b-4edd-4984-a2f6-c0ba0df678a1" name="WDW Create Guest Inconv"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiqa2.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/create_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920141020083700007</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2012-11-16</TransmitDate>
         <TransmitTime>16:14:03.280</TransmitTime>
         <TktSeller>
            <TSMAC>MOBILEATS</TSMAC>
            <TSSystem>SOAPUI</TSSystem>
            <TSLocation>MOBILEATSEC</TSLocation>
            <TSSecurity>Walt</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2012-11-16</CmdDate>
            <CmdTime>16:14:03.280</CmdTime>
            <CmdInvoice>901123211607220013</CmdInvoice>
            <CmdDevice>JTLSOAPUI</CmdDevice>
            <CmdOperator>LEWIT019</CmdOperator>
         </CommandHeader>
         <CreateTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>A00AY</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>105.44</ProdPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Voucher>
                  	<MainCode>7800</MainCode>
                  </Voucher>
               </PayType>
               <PayAmount>105.44</PayAmount>
            </Payment>
            <EntitlementAccount>
               <SpecifiedAccount>
                  <AccountItem>1</AccountItem>
                  <NewAccount>
                     <ExternalReferenceType>SWID</ExternalReferenceType>
                     <ExternalReferenceValue>{TLEWIS14-1A7D-4D6C-A391-141A7DFD6CC4}</ExternalReferenceValue>
                  </NewAccount>
               </SpecifiedAccount>
            </EntitlementAccount>
            <AuditNotation>ABCDEFGHIJKLMNOPRSTUVWXYZ0123456789ABCD</AuditNotation>
         </CreateTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call id="34810f00-cec1-4a33-8e3a-44639007c03d" name="DLR Query Ticket Prod"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiprod.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<?xml version="1.0"?>
<Transmission xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/query_ticket_request.xsd">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920151023154100001</PayloadID>  
      <Target>Prod-DLR</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2015-10-23</TransmitDate>  
      <TransmitTime>12:35:06.000</TransmitTime>  
      <TktSeller> 
        <TSMAC>DLRMerch</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>1357</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>25</CmdTimeout>  
        <CmdDate>2015-10-23</CmdDate>  
        <CmdTime>12:35:06.00</CmdTime>  
        <CmdInvoice>003613570020</CmdInvoice>  
        <CmdDevice>20</CmdDevice>  
        <CmdOperator>00003181</CmdOperator>  
        <CmdActor>MGR</CmdActor> 
      </CommandHeader>  
      <QueryTicketRequest> 
        <Ticket> 
          <TktItem>1</TktItem>  
          <TktID> 
            <External>803550012204378769</External> 
          </TktID> 
        </Ticket> 
      </QueryTicketRequest> 
    </Command> 
  </Payload> 
</Transmission>

]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call id="7873d8f4-4ced-40b7-9d1f-4025ba91f99b" name="WDW Reservation 2.12 Problem"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiprodb.disney.pvt:9445/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920121028063800006</PayloadID>  
      <Target>Prod-WDW</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2014-10-28</TransmitDate>  
      <TransmitTime>03:23:14.86</TransmitTime>  
      <TktSeller> 
        <TSMAC>WDPRONAWDW</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>PROGENSTR</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>2014-10-28</CmdDate>  
        <CmdTime>03:23:14.86</CmdTime>  
        <CmdInvoice>00000010001407505</CmdInvoice>  
        <CmdDevice>10.198.145.126</CmdDevice>  
        <CmdOperator>WDPRO</CmdOperator> 
      </CommandHeader>  
      <ReservationRequest> 
        <RequestType>Create</RequestType>  
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>NB004</ProdCode>  
          <ProdQty>2</ProdQty>  
          <ProdPrice>675.21</ProdPrice>  
          <TktAssignment> 
            <AccountItem>1</AccountItem>  
            <ProdQty>1</ProdQty> 
          </TktAssignment>  
          <TktAssignment> 
            <AccountItem>2</AccountItem>  
            <ProdQty>1</ProdQty> 
          </TktAssignment> 
        </Ticket>  
        <Ticket> 
          <TktItem>2</TktItem>  
          <ProdCode>M0007</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>25.00</ProdPrice> 
        </Ticket>  
        <Payment> 
          <PayItem>1</PayItem>  
          <PayType> 
            <CreditCard> 
              <CCManual> 
                <CCNbr>4444855457061111</CCNbr>  
                <CCExpiration>1017</CCExpiration>  
                <CCVV>999</CCVV>  
                <CCName>DAVID HOLT</CCName>  
                <CCStreet>2 The Paddock, Oswaldtwistle</CCStreet>  
                <CCZipcode>76590</CCZipcode>  
                <CCType>MC</CCType> 
              </CCManual> 
            </CreditCard> 
          </PayType>  
          <PayAmount>1375.42</PayAmount> 
        </Payment>  
        <Reservation> 
          <ResCreateDate>2014-10-28</ResCreateDate>  
          <ResPickupDate>2014-10-28</ResPickupDate>  
          <ResPickupArea>MailOrder</ResPickupArea>  
          <ResSalesType>Overnight</ResSalesType> 
        </Reservation>  
        <ClientData> 
          <ClientType>Private</ClientType>  
          <ClientCategory>WW</ClientCategory>  
          <DemoLanguage>en</DemoLanguage>  
          <DemoData> 
            <Bill Addr1="2 The Paddock" Addr2="Oswaldtwistle" City="Accrington" Country="GBR" Email="a.holt67@ntlworld.com" FirstName="DAVID" LastName="HOLT" Name="DAVID HOLT" State="Lancashire" Telephone="01254872785" Zip="BB5 3AB"/>  
            <Ship Addr1="2 The Paddock" Addr2="Oswaldtwistle" City="Accrington" Country="GBR" FirstName="Anne" LastName="Holt" Name="Anne Holt" State="Lancashire" Telephone="01254872785" Zip="BB5 3AB"/> 
          </DemoData> 
        </ClientData>  
        <EntitlementAccount> 
          <SpecifiedAccount> 
            <AccountItem>1</AccountItem>  
            <NewAccount> 
              <ExternalReferenceType>GUID</ExternalReferenceType>  
              <ExternalReferenceValue>d6b91d27-5462-49e3-b7bb-3a16a7054c94</ExternalReferenceValue> 
            </NewAccount>  
            <AccountDemoData FirstName="David"/> 
          </SpecifiedAccount>  
          <SpecifiedAccount> 
            <AccountItem>2</AccountItem>  
            <NewAccount> 
              <ExternalReferenceType>SWID</ExternalReferenceType>  
              <ExternalReferenceValue>{D31B70A5-4157-44DD-B3EE-39C147766AFB}</ExternalReferenceValue> 
            </NewAccount>  
            <AccountDemoData FirstName="anne"/> 
          </SpecifiedAccount> 
        </EntitlementAccount> 
      </ReservationRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call id="22245195-af39-42a4-9002-da9b623f6ae2" name="WDW QueryTicket Prod AP"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiprod.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/query_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920140309160600003</PayloadID>  
      <Target>Prod-WDW</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2006-01-04</TransmitDate>  
      <TransmitTime>19:23:57.93</TransmitTime>  
      <TktSeller> 
        <TSMAC>AAAACS</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>003</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>093</CmdTimeout>  
        <CmdDate>2006-01-04</CmdDate>  
        <CmdTime>19:23:57.93</CmdTime>  
        <CmdInvoice>199</CmdInvoice>  
        <CmdDevice>TERM 02</CmdDevice>  
        <CmdOperator>100002645</CmdOperator>  
        <CmdActor>MGR</CmdActor> 
      </CommandHeader>  
      <QueryTicketRequest> 
        <Ticket> 
          <TktItem>1</TktItem>  
          <TktID> 
            <TktDSSN>
            <TktDate>2015-03-09</TktDate>
            <TktSite>WMK</TktSite>
            <TktStation>CAS006</TktStation>
            <TktNbr>40</TktNbr>
            </TktDSSN>
          </TktID> 
        </Ticket>
        <IncludeTktDemographics>true</IncludeTktDemographics>
        <IncludePassAttributes>true</IncludePassAttributes>
        <IncludeElectronicAttributes>true</IncludeElectronicAttributes>        
      </QueryTicketRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call id="372a86ee-15e6-4263-b04e-e9c4e08ed150" name="DLR Query Ticket Redeemable"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://fldcvpsla1200.wdw.disney.com/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/query_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920150708060400002</PayloadID>
         <Target>Prod-DLR</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2012-05-21</TransmitDate>
         <TransmitTime>00:05:16.25</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONADLR</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>352</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2012-05-21</CmdDate>
            <CmdTime>00:05:16.25</CmdTime>
            <CmdInvoice>406811625267106</CmdInvoice>
            <CmdDevice>WDPRO</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <QueryTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <External>6111082217253546</External>
               </TktID>
            </Ticket>
            <IncludeTktDemographics>true</IncludeTktDemographics>
            <IncludePassAttributes>true</IncludePassAttributes>
 
         </QueryTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call id="50cf958b-c119-4bc7-93f7-be90c51cf314" name="DLR Query Ticket Redeemable Prod"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiprod.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/query_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920150714094100002</PayloadID>
         <Target>Prod-DLR</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2012-05-21</TransmitDate>
         <TransmitTime>00:05:16.25</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONADLR</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>DLR_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2012-05-21</CmdDate>
            <CmdTime>00:05:16.25</CmdTime>
            <CmdInvoice>406811625267106</CmdInvoice>
            <CmdDevice>WDPRO</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <QueryTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <External>4081056024439345812</External>
               </TktID>
            </Ticket>
            <IncludeTktDemographics>true</IncludeTktDemographics>
            <IncludePassAttributes>true</IncludePassAttributes>
            <IncludeTicketRedeemability>true</IncludeTicketRedeemability>
         </QueryTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call id="718f6ce5-e2af-44f0-8910-b00f7c17f753" name="WDW Reservation 2.14 PRO GET"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiqa2.disney.pvt/PLab/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920150723081300004</PayloadID>
         <Target>Test</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2015-07-22</TransmitDate>
         <TransmitTime>17:07:00.78</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PROGENSTR</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2015-07-22</CmdDate>
            <CmdTime>17:07:00.78</CmdTime>
            <CmdInvoice>00000010001040192</CmdInvoice>
            <CmdDevice>10.199.129.121</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <ReservationRequest>
            <RequestType>Create</RequestType>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>JM00Y</ProdCode>
               <ProdQty>4</ProdQty>
               <ProdPrice>484.58</ProdPrice>
               <TktAssignment>
                  <AccountItem>1</AccountItem>
                  <ProdQty>4</ProdQty>
               </TktAssignment>
            </Ticket>
            <Ticket>
               <TktItem>2</TktItem>
               <ProdCode>MC004</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>0.00</ProdPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCManual>
                        <CCNbr>4444855457062688</CCNbr>
                        <CCExpiration>1215</CCExpiration>
                        <CCVV>529</CCVV>
                        <CCName>Jame Bo</CCName>
                        <CCStreet>756 PARIS WAY</CCStreet>
                        <CCZipcode>76590</CCZipcode>
                        <CCType>DS</CCType>
                     </CCManual>
                  </CreditCard>
               </PayType>
               <PayAmount>1938.32</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>2015-07-22</ResCreateDate>
               <ResPickupDate>2015-07-22</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="8001 SOB trl" Addr2="" City="Orlando" Country="USA" Email="JimBo@gmail.com" FirstName="Ann-Marie" LastName="O'Malley" Name="Ann-Marie O'Malley" State="FL" Telephone="7324692388" Zip="32809"/>
                  <Ship Addr1="37 13th st" City="surf city" Country="USA" FirstName="james" LastName="bo" Name="james bo" State="NJ" Telephone="6099346897" Zip="08008"/>
               </DemoData>
            </ClientData>
            <EntitlementAccount>
               <SpecifiedAccount>
                  <AccountItem>1</AccountItem>
                  <NewAccount>
                     <ExternalReferenceType>SWID</ExternalReferenceType>
                     <ExternalReferenceValue>{873D11C3-EFF8-49F7-BD11-C3EFF889F7E1}</ExternalReferenceValue>
                  </NewAccount>
                  <AccountDemoData FirstName="james"/>
               </SpecifiedAccount>
            </EntitlementAccount>
         </ReservationRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call id="f2101727-bbf3-4cbe-8147-c0d6b64f16f0" name="WDW Upgrade Alpha (1)"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/upgrade_alpha_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920151002110200001</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2013-01-16</TransmitDate>
         <TransmitTime>04:26:16.39</TransmitTime>
         <TktSeller>
            <TSMAC>WDWMerch</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>5941</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2015-09-02</CmdDate>
            <CmdTime>13:26:16.39</CmdTime>
            <CmdInvoice>50100381702006167409</CmdInvoice>
            <CmdDevice>112</CmdDevice>
            <CmdOperator>jtlewis</CmdOperator>
         </CommandHeader>
         <UpgradeAlphaRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>AKF0D</ProdCode>
               <ProdPrice>138.45</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> AFLVS4QPQ9STPSQPGBPX67PPPAPPKPPPPPPVFYVS4QPQ9STPSQPGBPX67PPPAPPKPPPPPPV </MagTrack1>
                     <MagTrack2>68=108242</MagTrack2>
                  </Mag>
               </TktID>
               <TktShell>78</TktShell>
            </Ticket>
            <IncludeVisualId>true</IncludeVisualId> 
         </UpgradeAlphaRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call id="a5f6f6a9-fe0c-410c-a9f6-37acce5f4cb6" name="WDW Upgrade Enttl w/DEMO"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920150904133500002</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2013-09-17</TransmitDate>
         <TransmitTime>13:39:37</TransmitTime>
         <TktSeller>
            <TSMAC>MOBILEATS</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>MOBILEATSMK</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2013-09-17</CmdDate>
            <CmdTime>13:39:37</CmdTime>
            <CmdInvoice>1F5E6780-A2E9</CmdInvoice>
            <CmdDevice>MAD1</CmdDevice>
            <CmdOperator>STUAC003</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2015-09-03</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>11</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>NDF04</ProdCode>
               <ProdPrice>691.19</ProdPrice>
               <ProdDemoData>
                  <TktDemoData FirstName="Todd" LastName="Lewis" DateOfBirth="1967-05-04" Gender="M" Addr1="112 EMORY DRIVE" City="WARNER ROBINS" State="GA" Zip="31093" Country="USA" Telephone="4789231995" Email="somewhere@gabc.org" OptInSolicit="YES"/>
               </ProdDemoData>
               <UpgrdPrice>486.71</UpgrdPrice>
               <FromProdCode>BJ00Y</FromProdCode>
               <FromPrice>204.48</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCSwipe>
                        <CCTrack1>%B5424180279791765^FDCS TEST CARD /MASTERCARD^1604011000 1111A123456789012 ?</CCTrack1>
                        <CCTrack2>;5424180279791765=1604101100000123456?</CCTrack2>
                     </CCSwipe>
                  </CreditCard>
               </PayType>
               <PayAmount>486.71</PayAmount>
            </Payment>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call id="ae75be22-9519-44a7-9035-7af527bd00e0" name="WDW Upgrade Enttl w/DEMO (8)"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>99920150904112400001</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2013-09-17</TransmitDate>
         <TransmitTime>13:39:37</TransmitTime>
         <TktSeller>
            <TSMAC>MOBILEATS</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>MOBILEATSMK</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2013-09-17</CmdDate>
            <CmdTime>13:39:37</CmdTime>
            <CmdInvoice>1F5E6780-A2E9</CmdInvoice>
            <CmdDevice>MAD1</CmdDevice>
            <CmdOperator>STUAC003</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2015-09-03</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>2</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>NDF04</ProdCode>
               <ProdPrice>691.19</ProdPrice>
               <ProdDemoData>
                  <TktDemoData FirstName="Tiffany" LastName="Charles" DateOfBirth="1988-11-05" Gender="F" Addr1="123 STUART ONE LANE" City="MCFARLAND" State="FL" Zip="34747" Country="USA" Telephone="4075551212" Email="somewhere@aol.com" OptInSolicit="YES"/>
               </ProdDemoData>
               <UpgrdPrice>489.90</UpgrdPrice>
               <FromProdCode>CJF0J</FromProdCode>
               <FromPrice>201.29</FromPrice>
            </Ticket>
            <Ticket>
               <TktItem>2</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2015-09-03</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>3</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>NDF04</ProdCode>
               <ProdPrice>691.19</ProdPrice>
               <ProdDemoData>
                  <TktDemoData FirstName="Tiffany" LastName="Charles" DateOfBirth="1988-11-05" Gender="F" Addr1="123 STUART TWO LANE" Addr2="Apt B 12" City="MCFARLAND" State="FL" Zip="34747" Country="USA" Telephone="4075551212" Email="somewhere@aol.com" OptInSolicit="YES"/>
               </ProdDemoData>
               <UpgrdPrice>489.90</UpgrdPrice>
               <FromProdCode>CJF0J</FromProdCode>
               <FromPrice>201.29</FromPrice>
            </Ticket>
            <Ticket>
               <TktItem>3</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2015-09-03</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>4</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>NDF04</ProdCode>
               <ProdPrice>691.19</ProdPrice>
               <ProdDemoData>
                  <TktDemoData FirstName="Tiffany" LastName="Charles" DateOfBirth="1988-11-05" Gender="F" Addr1="123 STUART THREE LANE" Addr2="Apt B 12" City="MCFARLAND" State="FL" Zip="34747" Country="USA" Telephone="4075551212" Email="somewhere@aol.com" OptInSolicit="YES"/>
               </ProdDemoData>
               <UpgrdPrice>489.90</UpgrdPrice>
               <FromProdCode>CJF0J</FromProdCode>
               <FromPrice>201.29</FromPrice>
            </Ticket>
            <Ticket>
               <TktItem>4</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2015-09-03</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>5</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>NDF04</ProdCode>
               <ProdPrice>691.19</ProdPrice>
               <ProdDemoData>
                  <TktDemoData FirstName="Tiffany" LastName="Charles" DateOfBirth="1988-11-05" Gender="F" Addr1="123 STUART FOUR LANE" Addr2="Apt B 12" City="MCFARLAND" State="FL" Zip="34747" Country="USA" Telephone="4075551212" Email="somewhere@aol.com" OptInSolicit="YES"/>
               </ProdDemoData>
               <UpgrdPrice>489.90</UpgrdPrice>
               <FromProdCode>CJF0J</FromProdCode>
               <FromPrice>201.29</FromPrice>
            </Ticket>
            <Ticket>
               <TktItem>5</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2015-09-03</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>6</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>NDF04</ProdCode>
               <ProdPrice>691.19</ProdPrice>
               <ProdDemoData>
                  <TktDemoData FirstName="Tiffany" LastName="Charles" DateOfBirth="1988-11-05" Gender="F" Addr1="123 STUART FIVE LANE" Addr2="Apt B 12" City="MCFARLAND" State="FL" Zip="34747" Country="USA" Telephone="4075551212" Email="somewhere@aol.com" OptInSolicit="YES"/>
               </ProdDemoData>
               <UpgrdPrice>489.90</UpgrdPrice>
               <FromProdCode>CJF0J</FromProdCode>
               <FromPrice>201.29</FromPrice>
            </Ticket>
            <Ticket>
               <TktItem>6</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2015-09-03</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>7</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>NDF04</ProdCode>
               <ProdPrice>691.19</ProdPrice>
               <ProdDemoData>
                  <TktDemoData FirstName="Tiffany" LastName="Charles" DateOfBirth="1988-11-05" Gender="F" Addr1="123 STUART SIX LANE" Addr2="Apt B 12" City="MCFARLAND" State="FL" Zip="34747" Country="USA" Telephone="4075551212" Email="somewhere@aol.com" OptInSolicit="YES"/>
               </ProdDemoData>
               <UpgrdPrice>489.90</UpgrdPrice>
               <FromProdCode>CJF0J</FromProdCode>
               <FromPrice>201.29</FromPrice>
            </Ticket>
            <Ticket>
               <TktItem>7</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2015-09-03</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>8</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>NDF04</ProdCode>
               <ProdPrice>691.19</ProdPrice>
               <ProdDemoData>
                  <TktDemoData FirstName="Tiffany" LastName="Charles" DateOfBirth="1988-11-05" Gender="F" Addr1="123 STUART SEVEN LANE" Addr2="Apt B 12" City="MCFARLAND" State="FL" Zip="34747" Country="USA" Telephone="4075551212" Email="somewhere@aol.com" OptInSolicit="YES"/>
               </ProdDemoData>
               <UpgrdPrice>489.90</UpgrdPrice>
               <FromProdCode>CJF0J</FromProdCode>
               <FromPrice>201.29</FromPrice>
            </Ticket>
            <Ticket>
               <TktItem>8</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2015-09-03</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>9</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>NDF04</ProdCode>
               <ProdPrice>691.19</ProdPrice>
               <ProdDemoData>
                  <TktDemoData FirstName="Tiffany" LastName="Charles" DateOfBirth="1988-11-05" Gender="F" Addr1="123 STUART EIGHT LANE" Addr2="Apt B 12" City="MCFARLAND" State="FL" Zip="34747" Country="USA" Telephone="4075551212" Email="somewhere@aol.com" OptInSolicit="YES"/>
               </ProdDemoData>
               <UpgrdPrice>489.90</UpgrdPrice>
               <FromProdCode>CJF0J</FromProdCode>
               <FromPrice>201.29</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCSwipe>
                        <CCTrack1>%B5424180279791765^FDCS TEST CARD /MASTERCARD^1604011000 1111A123456789012 ?</CCTrack1>
                        <CCTrack2>;5424180279791765=1604101100000123456?</CCTrack2>
                     </CCSwipe>
                  </CreditCard>
               </PayType>
               <PayAmount>3919.20</PayAmount>
            </Payment>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call id="3b74614f-2777-4bf8-8cdd-7ceec8ae0de1" name="WDW Reservation Installment (DP112)"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920150910100100034</PayloadID>  
      <Target>Test</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2015-09-08</TransmitDate>  
      <TransmitTime>06:21:50.52</TransmitTime>  
      <TktSeller> 
        <TSMAC>AP_MAC</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>AP_LOC</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>2015-09-08</CmdDate>  
        <CmdTime>06:21:50.52</CmdTime>  
        <CmdInvoice>00000010001180702</CmdInvoice>  
        <CmdDevice>10.199.135.18</CmdDevice>  
        <CmdOperator>WDPRO</CmdOperator> 
      </CommandHeader>  
      <ReservationRequest> 
        <RequestType>Create</RequestType>  
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>NWF22_APMP</ProdCode>  
          <ProdQty>1</ProdQty> 
          <ProdDemoData>
               <TktDemoData FirstName="John" LastName="Doe" DateOfBirth="1954-02-01" Gender="m" Addr1="756 Paris Way" Addr2="Apt B 12" City="Celebration" State="FL" Zip="76590" Country="USA" Telephone="4078889999" Email="somewhere@aol.com" OptInSolicit="YES"/>
          </ProdDemoData>           
          <ProdPrice>112.00</ProdPrice>  
          <TktAssignment> 
            <AccountItem>1</AccountItem>  
            <ProdQty>1</ProdQty> 
          </TktAssignment> 
        </Ticket>  
        <Ticket> 
          <TktItem>2</TktItem>  
          <ProdCode>MC004</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>0.00</ProdPrice> 
        </Ticket>  
        <Payment> 
          <PayItem>1</PayItem>  
          <PayType> 
            <CreditCard> 
              <CCManual> 
                <CCNbr>4444855457062688</CCNbr>
                <CCExpiration>1220</CCExpiration>  
                <CCVV>529</CCVV>
                <CCName>Todd Lewis</CCName>  
                <CCStreet>756 PARIS WAY</CCStreet>  
                <CCZipcode>76590</CCZipcode>  
                <CCType>VI</CCType> 
              </CCManual> 
            </CreditCard> 
          </PayType>  
          <PayAmount>112.00</PayAmount> 
        </Payment>  
        <Payment>
        	<PayItem>2</PayItem>
        	<PayType>
        	   <Installment>
        	      <InstallmentCreditCard>
                   <CCManual>
                      <CCNbr>4444855457062688</CCNbr>
                      <CCExpiration>1220</CCExpiration>
                      <CCName>Todd Lewis</CCName>
                   </CCManual>
        	      </InstallmentCreditCard>                   
                <InstallmentDemoData FirstName="James" MiddleName="Todd" LastName="Lewis" DateOfBirth="1988-11-05" Addr1="112 Emory Drive" Addr2="Apt B" City="Warner Robins" State="GA" Zip="31093" Country="USA" Telephone="9129231995" AltTelephone="9129227420" Email="person@server.com"/>
        	   </Installment>
        	</PayType>
        </Payment>
        <Reservation> 
          <ResCreateDate>2015-09-08</ResCreateDate>  
          <ResPickupDate>2015-09-08</ResPickupDate>  
          <ResPickupArea>WillCall</ResPickupArea>  
          <ResSalesType>Presale</ResSalesType> 
        </Reservation>  
        <ClientData> 
          <ClientType>Private</ClientType>  
          <ClientCategory>WW</ClientCategory>  
          <DemoLanguage>en</DemoLanguage>  
          <DemoData> 
            <Bill Addr1="778 5th Street East" Addr2="" City="Wyandotte" Country="USA" Email="Something@testemail.com" FirstName="Todd" LastName="Lewis" Name="Todd Lewis" State="GA" Telephone="9129231995" Zip="31093"/>  
            <Ship FirstName="" LastName="" Name=" "/> 
          </DemoData> 
        </ClientData>  
        <EntitlementAccount> 
          <SpecifiedAccount> 
            <AccountItem>1</AccountItem>  
            <NewAccount> 
              <ExternalReferenceType>SWID</ExternalReferenceType>  
              <ExternalReferenceValue>{E2905145-EB41-45B0-9051-45EB41E5B0BD}</ExternalReferenceValue> 
            </NewAccount>  
            <AccountDemoData FirstName="cAaAcijh"/> 
          </SpecifiedAccount> 
        </EntitlementAccount> 
      </ReservationRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call id="b5f9cd10-cef6-4a23-a4f4-4c62fc75a4d8" name="DLR Query Ticket MATRA ALPHA"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiprod.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<?xml version="1.0"?>
<Transmission xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/query_ticket_request.xsd">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920151006120100027</PayloadID>  
      <Target>Prod-DLR</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2015-10-05</TransmitDate>  
      <TransmitTime>22:46:23.000</TransmitTime>  
      <TktSeller> 
        <TSMAC>DLRMerch</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>0069</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>25</CmdTimeout>  
        <CmdDate>2015-10-05</CmdDate>  
        <CmdTime>22:46:22.00</CmdTime>  
        <CmdInvoice>115300690001</CmdInvoice>  
        <CmdDevice>1</CmdDevice>  
        <CmdOperator>00641590</CmdOperator>  
        <CmdActor>MGR</CmdActor> 
      </CommandHeader>  
      <QueryTicketRequest> 
        <Ticket> 
          <TktItem>1</TktItem>  
          <TktID> 
            <External>803570018602762522</External> 
          </TktID> 
        </Ticket> 
      </QueryTicketRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call id="67493070-d78d-4b08-9696-e2ee60d221c1" name="WDW 2.15 Reservation w Demo"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920131004084300004</PayloadID>  
      <Target>Test</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2013-05-07</TransmitDate>  
      <TransmitTime>07:17:13.44</TransmitTime>  
      <TktSeller> 
        <TSMAC>WDWGROUP</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>BOLTYTHDIR</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>2013-05-07</CmdDate>  
        <CmdTime>07:17:13.44</CmdTime>  
        <CmdInvoice>99920130507103</CmdInvoice>  
        <CmdDevice>10.199.144.90</CmdDevice>  
        <CmdOperator>WDPRO</CmdOperator> 
      </CommandHeader>  
      <ReservationRequest> 
        <RequestType>Create</RequestType>  
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>NB003</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdDemoData>
               <TktDemoData FirstName="John" LastName="Doe" DateOfBirth="1954-02-01" Gender="m" Addr1="756 Paris Way" Addr2="Apt B 12" City="Celebration" State="FL" Zip="76590" Country="USA" Telephone="4078889999" Email="somewhere@aol.com"/>
          </ProdDemoData>
          <ProdPrice>648.59</ProdPrice> 
        </Ticket>  
        <Ticket> 
          <TktItem>2</TktItem>  
          <ProdCode>MC004</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>0.00</ProdPrice> 
        </Ticket>  
        <Payment> 
          <PayItem>1</PayItem>  
          <PayType> 
            <CreditCard> 
              <CCManual> 
                <CCNbr>4444855457062688</CCNbr>
                <CCExpiration>1113</CCExpiration> 
                <CCVV>529</CCVV>
                <CCName>John Doe</CCName>
                <CCStreet>756 Paris Way</CCStreet>
                <CCZipcode>76590</CCZipcode>
                <CCType>VI</CCType> 
              </CCManual> 
            </CreditCard> 
          </PayType>  
          <PayAmount>648.59</PayAmount> 
        </Payment>
        <Reservation> 
          <ResCreateDate>2013-10-04</ResCreateDate>  
          <ResPickupDate>2013-10-04</ResPickupDate>  
          <ResPickupArea>MailOrder</ResPickupArea>  
          <ResSalesType>MailOrder</ResSalesType> 
        </Reservation>  
        <ClientData> 
          <ClientType>Private</ClientType>  
          <ClientCategory>WW</ClientCategory>  
          <DemoLanguage>en</DemoLanguage>  
          <DemoData> 
            <Bill Addr1="756 Paris Way" City="Celebration" Country="USA" FirstName="John" LastName="Doe" Name="John Doe" State="FL" Telephone="4078889999" Zip="76590"/>  
            <Ship Addr1="756 Paris Way" City="Celebration" Country="USA" FirstName="Jimmy" LastName="Cricket" Name="Jimmy Cricket" State="FL" Telephone="4075666000" Zip="34747"/> 
          </DemoData> 
        </ClientData> 
      </ReservationRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call id="2565755b-82db-4f94-8849-7717b47d3306" name="WDW 2.15 Create with Acct Demo"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtidev.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<?xml version="1.0"?>
<Transmission xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/create_ticket_request.xsd">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920151103115600003</PayloadID>  
      <Target>Test-WDW</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2015-10-24</TransmitDate>  
      <TransmitTime>16:10:19</TransmitTime>  
      <TktSeller> 
        <TSMAC>MOBILEATS</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>MOBILEATSTS</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>2015-10-24</CmdDate>  
        <CmdTime>16:10:19</CmdTime>  
        <CmdInvoice>A2C7ABEF-7111-357C-7394-01509B792631</CmdInvoice>  
        <CmdDevice>VBIV</CmdDevice>  
        <CmdOperator>VAYIC001</CmdOperator> 
      </CommandHeader>  
      <CreateTicketRequest> 
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>CJF1J</ProdCode>  
          <ProdQty>2</ProdQty>  
          <ProdDemoData> 
            <TktDemoData Addr1="200 celebration place" City="Tampa" Country="USA" DateOfBirth="1987-11-29" Email="DECLINE" FirstName="Charles" Gender="M" LastName="Vayianos" OptInSolicit="NO" State="FL" Telephone="0" Zip="33606"/>  
            <TktDemoData Addr1="200 celebration place" City="CelebRation" Country="USA" DateOfBirth="1988-11-05" Email="DECLINE" FirstName="Tiffany" Gender="F" LastName="Green" OptInSolicit="NO" State="FL" Telephone="0" Zip="34758"/> 
          </ProdDemoData>  
          <ProdPrice>187.44</ProdPrice>  
          <TktAssignment> 
            <AccountItem>1</AccountItem>  
            <ProdQty>1</ProdQty> 
          </TktAssignment>  
          <TktAssignment> 
            <AccountItem>2</AccountItem>  
            <ProdQty>1</ProdQty> 
          </TktAssignment> 
        </Ticket>  
        <Payment> 
          <PayItem>1</PayItem>  
          <PayType> 
            <Voucher> 
              <MainCode>7800</MainCode> 
            </Voucher> 
          </PayType>  
          <PayAmount>374.88</PayAmount> 
        </Payment>  
        <EntitlementAccount> 
          <SpecifiedAccount> 
            <AccountItem>1</AccountItem>  
            <NewAccount> 
              <ExternalReferenceType>SECURE_ID</ExternalReferenceType>  
              <ExternalReferenceValue>1043638713210852</ExternalReferenceValue> 
            </NewAccount>  
            <NewMediaData> 
              <MediaId>9993638713210852</MediaId>  
              <MfrId>99975555571319300</MfrId>  
              <VisualId>99935232B273</VisualId> 
            </NewMediaData> 
          </SpecifiedAccount>  
          <SpecifiedAccount> 
            <AccountItem>2</AccountItem>  
            <NewAccount> 
              <ExternalReferenceType>SECURE_ID</ExternalReferenceType>  
              <ExternalReferenceValue>1043638407580673</ExternalReferenceValue> 
            </NewAccount>  
            <NewMediaData> 
              <MediaId>9993638407580673</MediaId>  
              <MfrId>99975555571843588</MfrId>  
              <VisualId>999342279371</VisualId> 
            </NewMediaData> 
          </SpecifiedAccount> 
        </EntitlementAccount> 
      </CreateTicketRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call id="4cbb30f7-ab19-4dc0-bec1-25d6f726c6bd" name="WDW Reservation STARCOMMAND"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiqa2.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920151119154400006</PayloadID>  
      <Target>Test</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2015-11-13</TransmitDate>  
      <TransmitTime>13:37:58.54</TransmitTime>  
      <TktSeller> 
        <TSMAC>WDPRONAWDW</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>PRO_MOBILE</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>2015-11-13</CmdDate>  
        <CmdTime>13:37:58.54</CmdTime>  
        <CmdInvoice>10000000000298382</CmdInvoice>  
        <CmdDevice>10.199.147.159</CmdDevice>  
        <CmdOperator>WDPRO</CmdOperator> 
      </CommandHeader>  
      <ReservationRequest> 
        <RequestType>Create</RequestType>  
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>A000Y</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>111.83</ProdPrice>  
          <TktAssignment> 
            <AccountItem>1</AccountItem>  
            <ProdQty>1</ProdQty> 
          </TktAssignment> 
        </Ticket>  
        <Ticket> 
          <TktItem>2</TktItem>  
          <ProdCode>M0107</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>0.00</ProdPrice> 
        </Ticket>  
        <Payment> 
          <PayItem>1</PayItem>  
               <PayType>
                  <CreditCard>
                     <CCManual>
                        <CCNbr>4444855457062688</CCNbr>
                        <CCExpiration>1215</CCExpiration>
                        <CCName>Visa</CCName>
                        <CCStreet>756 PARIS WAY</CCStreet>
                        <CCZipcode>76590</CCZipcode>
                     </CCManual>
                  </CreditCard>
               </PayType>
          <PayAmount>111.83</PayAmount> 
        </Payment>  
        <Reservation> 
          <ResCreateDate>2015-11-13</ResCreateDate>  
          <ResPickupDate>2015-11-13</ResPickupDate>  
          <ResPickupArea>MailOrder</ResPickupArea>  
          <ResSalesType>MailOrder</ResSalesType> 
        </Reservation>  
        <ClientData> 
          <ClientType>Private</ClientType>  
          <ClientCategory>WW</ClientCategory>  
          <DemoLanguage>en</DemoLanguage>  
          <DemoData> 
            <Bill Addr1="500 Images St" Addr2="" City="Kissimmee " Country="USA" Email="gopi.x.rao.-nd@disney.com" FirstName="Gopi" LastName="Rao" Name="Gopi Rao" State="FL" Telephone="9789351479" Zip="34747"/>  
            <Ship Addr1="10549 demilo" Addr2="" City="orlando" Country="USA" FirstName="Gopi" LastName="Rao" Name="Gopi Rao" State="FL" Telephone="9789351479" Zip="32836"/> 
          </DemoData> 
        </ClientData>  
        <EntitlementAccount> 
          <SpecifiedAccount> 
            <AccountItem>1</AccountItem>  
            <NewAccount> 
              <ExternalReferenceType>SWID</ExternalReferenceType>  
              <ExternalReferenceValue>{32CD18B7-B9B3-4D2A-8D18-B7B9B3CD2A8C}</ExternalReferenceValue> 
            </NewAccount>  
            <AccountDemoData FirstName="Gopi"/> 
          </SpecifiedAccount> 
        </EntitlementAccount> 
      </ReservationRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call id="ff754700-3681-4492-ae13-3774b5b7193c" name="DLR eGal Qry Tkt APMP"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dlregalaxy-qa.swna.wdpr.disney.com</con:endpoint><con:request><![CDATA[<Envelope>
   <Header>
      <SourceID>APONL</SourceID>
      <MessageID>123456789</MessageID>
      <MessageType>QueryTicket</MessageType>
      <TimeStamp>2015-10-27 03:36:16</TimeStamp>
      <EchoData/>
      <SystemFields/>
   </Header>
   <Body>
      <QueryTicket>
         <Query>
            <PassRenewUpgradeMode>0</PassRenewUpgradeMode>
            <IncludePassPicture>NO</IncludePassPicture>
            <IncludeContractData>NO</IncludeContractData>
            <IncludeIsValid>NO</IncludeIsValid>
            <IncludeRenewalPass>NO</IncludeRenewalPass>
            <VisualID>802080050500016626</VisualID>
            <PassAccount/>
            <PassID/>
            <LastName>Cokias</LastName>
            <DOB>1969-04-23 00:00:00.000</DOB>
         </Query>
         <DataRequest>
            <Field>PLU</Field>
            <Field>VisualID</Field>
            <Field>GalaxyContactID</Field>
            <Field>PassAcct</Field>
            <Field>PassID</Field>
            <Field>Price</Field>
            <Field>Renewable</Field>
            <Field>RenewablePLUList</Field>
            <Field>Upgradeable</Field>
            <Field>UpgradePLUList</Field>
            <Field>UpgradeValue</Field>
            <Field>PassRequiredInfo</Field>
            <Field>FirstName</Field>
            <Field>MiddleName</Field>
            <Field>LastName</Field>
            <Field>Street1</Field>
            <Field>Street2</Field>
            <Field>City</Field>
            <Field>State</Field>
            <Field>ZIP</Field>
            <Field>CountryCode</Field>
            <Field>Phone</Field>
            <Field>Email</Field>
            <Field>DOB</Field>
            <Field>Status</Field>
            <Field>User01</Field>
            <Field>User02</Field>
            <Field>User03</Field>
            <Field>User04</Field>
            <Field>User05</Field>
            <Field>User06</Field>
            <Field>User07</Field>
            <Field>User08</Field>
            <Field>User09</Field>
            <Field>User10</Field>
            <Field>User10</Field>
            <Field>Kind</Field>
            <Field>ValidFrom</Field>
            <Field>ValidUntil</Field>
            <Field>StatusDescription</Field>
            <Field>PassPicture</Field>
            <Field>ContractID</Field>
            <Field>IsValid</Field>
            <Field>RenewalPass</Field>
         </DataRequest>
         <StatusRequest>
            <Field>FirstName</Field>
            <Field>MiddleName</Field>
            <Field>LastName</Field>
            <Field>Street1</Field>
            <Field>Street2</Field>
            <Field>City</Field>
            <Field>State</Field>
            <Field>ZIP</Field>
            <Field>CountryCode</Field>
            <Field>Phone</Field>
            <Field>Email</Field>
            <Field>DOB</Field>
            <Field>User01</Field>
            <Field>User02</Field>
            <Field>User03</Field>
            <Field>User04</Field>
            <Field>User05</Field>
            <Field>User06</Field>
            <Field>User07</Field>
            <Field>User08</Field>
            <Field>User09</Field>
            <Field>User10</Field>
         </StatusRequest>
      </QueryTicket>
   </Body>
</Envelope>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call id="54068100-401e-4d05-969b-9b5ea474dda1" name="WDW Reservation NEXUS PROB"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiqa2.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>39910000000000304011</PayloadID>  
      <Target>Test</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2015-12-02</TransmitDate>  
      <TransmitTime>18:41:36.83</TransmitTime>  
      <TktSeller> 
        <TSMAC>WDPRONAWDW</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>PRO_MOBILE</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>2015-12-02</CmdDate>  
        <CmdTime>18:41:36.83</CmdTime>  
        <CmdInvoice>10000000000304012</CmdInvoice>  
        <CmdDevice>10.199.144.90</CmdDevice>  
        <CmdOperator>WDPRO</CmdOperator> 
      </CommandHeader>  
      <ReservationRequest> 
        <RequestType>Create</RequestType>  
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>XZ810</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>122.48</ProdPrice>  
          <TktAssignment> 
            <AccountItem>1</AccountItem>  
            <ProdQty>1</ProdQty> 
          </TktAssignment> 
        </Ticket>  
        <Ticket> 
          <TktItem>2</TktItem>  
          <ProdCode>MC004</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>0.00</ProdPrice> 
        </Ticket>  
        <Payment> 
          <PayItem>1</PayItem>  
          <PayType> 
            <CreditCard> 
              <CCManual> 
                <CCNbr>ZZZZZZZZZZ2410</CCNbr>  
                <CCExpiration>0119</CCExpiration>  
                <CCVV>ZZZ</CCVV>  
                <CCName>Kai</CCName>  
                <CCStreet>925 4th Ave</CCStreet>  
                <CCZipcode>98104</CCZipcode>  
                <CCType>DC</CCType> 
              </CCManual> 
            </CreditCard> 
          </PayType>  
          <PayAmount>122.48</PayAmount> 
        </Payment>  
        <Reservation> 
          <ResCreateDate>2015-12-02</ResCreateDate>  
          <ResPickupDate>2015-12-02</ResPickupDate>  
          <ResPickupArea>WillCall</ResPickupArea>  
          <ResSalesType>Presale</ResSalesType> 
        </Reservation>  
        <ClientData> 
          <ClientType>Private</ClientType>  
          <ClientCategory>WW</ClientCategory>  
          <DemoLanguage>en</DemoLanguage>  
          <DemoData> 
            <Bill Addr1="925 4th Ave" City="Seattle" Country="US" Email="disneyqa77@gmail.com" FirstName="Kai" LastName="SeventySeven" Name="Kai SeventySeven" State="WA" Telephone="4254838222" Zip="98104"/>  
            <Ship Name=""/> 
          </DemoData> 
        </ClientData>  
        <EntitlementAccount> 
          <SpecifiedAccount> 
            <AccountItem>1</AccountItem>  
            <NewAccount> 
              <ExternalReferenceType>SWID</ExternalReferenceType>  
              <ExternalReferenceValue>{3E2CAA8A-F8E2-40CA-ACAA-8AF8E2E0CA52}</ExternalReferenceValue> 
            </NewAccount>  
            <AccountDemoData FirstName="Kai"/> 
          </SpecifiedAccount> 
        </EntitlementAccount> 
      </ReservationRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call id="e4da17cb-7a42-4895-8060-f8d9cbe5813a" name="WDW Reservation NEXUS PROB2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiqa2.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920151203114300002</PayloadID>  
      <Target>Test</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2015-12-02</TransmitDate>  
      <TransmitTime>18:41:36.83</TransmitTime>  
      <TktSeller> 
        <TSMAC>WDPRONAWDW</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>PRO_MOBILE</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>2015-12-02</CmdDate>  
        <CmdTime>18:41:36.83</CmdTime>  
        <CmdInvoice>10000000000304012</CmdInvoice>  
        <CmdDevice>10.199.144.90</CmdDevice>  
        <CmdOperator>WDPRO</CmdOperator> 
      </CommandHeader>  
      <ReservationRequest> 
        <RequestType>Create</RequestType>  
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>XZ810</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>122.48</ProdPrice>  
          <TktAssignment> 
            <AccountItem>1</AccountItem>  
            <ProdQty>1</ProdQty> 
          </TktAssignment> 
        </Ticket>  
        <Ticket> 
          <TktItem>2</TktItem>  
          <ProdCode>MC004</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>0.00</ProdPrice> 
        </Ticket>  
        <Payment> 
          <PayItem>1</PayItem>  
               <PayType>
                  <CreditCard>
                     <CCManual>
                        <CCNbr>4444855457062688</CCNbr>
                        <CCExpiration>1215</CCExpiration>
                        <CCVV>529</CCVV>
                        <CCName>Jame Bo</CCName>
                        <CCStreet>756 PARIS WAY</CCStreet>
                        <CCZipcode>76590</CCZipcode>
                        <CCType>DS</CCType>
                     </CCManual>
                  </CreditCard>
               </PayType>
          <PayAmount>122.48</PayAmount> 
        </Payment>  
        <Reservation> 
          <ResCreateDate>2015-12-02</ResCreateDate>  
          <ResPickupDate>2015-12-02</ResPickupDate>  
          <ResPickupArea>WillCall</ResPickupArea>  
          <ResSalesType>Presale</ResSalesType> 
        </Reservation>  
        <ClientData> 
          <ClientType>Private</ClientType>  
          <ClientCategory>WW</ClientCategory>  
          <DemoLanguage>en</DemoLanguage>  
          <DemoData> 
            <Bill Addr1="925 4th Ave" City="Seattle" Country="US" Email="disneyqa77@gmail.com" FirstName="Kai" LastName="SeventySeven" Name="Kai SeventySeven" State="WA" Telephone="4254838222" Zip="98104"/>  
            <Ship Name="Bob Thomas"/> 
          </DemoData> 
        </ClientData>  
        <EntitlementAccount> 
          <SpecifiedAccount> 
            <AccountItem>1</AccountItem>  
            <NewAccount> 
              <ExternalReferenceType>SWID</ExternalReferenceType>  
              <ExternalReferenceValue>{3E2CAA8A-F8E2-40CA-ACAA-8AF8E2E0CA52}</ExternalReferenceValue> 
            </NewAccount>  
            <AccountDemoData FirstName="Kai"/> 
          </SpecifiedAccount> 
        </EntitlementAccount> 
      </ReservationRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call><con:call id="63333517-9d91-4eac-bda8-63740ea64d1a" name="DLR Reservation Installment"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dtiqa2.disney.pvt/DTIApp/servlet/com.dti.app.common.DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>99920151002121800010</PayloadID>
      <Target>Test</Target>  
      <Version>1.0</Version>  
      <Comm>
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>
      <TransmitDate>2015-09-08</TransmitDate>  
      <TransmitTime>06:21:50.52</TransmitTime>  
      <TktSeller>
        <TSMAC>AP_MAC</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>AP_LOC</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>2015-09-08</CmdDate>  
        <CmdTime>06:21:50.52</CmdTime>  
        <CmdInvoice>00000010001180702</CmdInvoice>  
        <CmdDevice>10.199.135.18</CmdDevice>  
        <CmdOperator>WDPRO</CmdOperator> 
      </CommandHeader>  
      <ReservationRequest> 
        <RequestType>Create</RequestType>  
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>NWF23</ProdCode>  
          <ProdQty>2</ProdQty> 
          <ProdDemoData>
               <TktDemoData FirstName="John" LastName="Doe" DateOfBirth="1954-01-01" Gender="m" Addr1="1 Paris Way" Addr2="Apt B 1" City="Celebration" State="FL" Zip="76590" Country="USA" Telephone="4071111111" OptInSolicit="NO"/>
               <TktDemoData FirstName="Jane" LastName="Doe" DateOfBirth="1953-02-02" Gender="F" Addr1="2 Paris Way" Addr2="Apt B 2" City="Celebration" State="FL" Zip="76590" Country="USA" Telephone="4072222222" OptInSolicit="NO"/>
          </ProdDemoData>           
          <ProdPrice>776.39</ProdPrice>
        </Ticket>  
        <Ticket> 
          <TktItem>2</TktItem>  
          <ProdCode>MC004</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>0.00</ProdPrice> 
        </Ticket>  
        <Payment> 
          <PayItem>1</PayItem>  
          <PayType> 
            <CreditCard> 
              <CCManual> 
                <CCNbr>4444855457062688</CCNbr>
                <CCExpiration>1220</CCExpiration>  
                <CCVV>529</CCVV>
                <CCName>John Doe</CCName>  
                <CCStreet>756 PARIS WAY</CCStreet>  
                <CCZipcode>76590</CCZipcode>  
                <CCType>VI</CCType> 
              </CCManual> 
            </CreditCard> 
          </PayType>  
          <PayAmount>198.00</PayAmount> 
        </Payment>  
        <Payment>
        	<PayItem>2</PayItem>
        	<PayType>
        	   <Installment>
        	      <InstallmentCreditCard>
                   <CCManual>
                      <CCNbr>4444855457062688</CCNbr>
                      <CCExpiration>1220</CCExpiration>
                      <CCName>John Doe</CCName>
                   </CCManual>
        	      </InstallmentCreditCard>                   
                <InstallmentDemoData FirstName="John" MiddleName="Todd" LastName="Doe" DateOfBirth="1988-11-05" Addr1="112 Emory Drive" Addr2="Apt B" City="Warner Robins" State="GA" Zip="31093" Country="USA" Telephone="9129231995" AltTelephone="9129227420" Email="person@server.com"/>
        	   </Installment>
        	</PayType>
        	<PayAmount>1328.78</PayAmount>            	
        </Payment>
        <Eligibility>
           <Group>RESIDENCE</Group>
           <Member>SOCA_RES</Member>
        </Eligibility>
        <Reservation> 
          <ResCreateDate>2015-09-08</ResCreateDate>  
          <ResPickupDate>2015-09-08</ResPickupDate>  
          <ResPickupArea>WillCall</ResPickupArea>  
          <ResSalesType>Presale</ResSalesType> 
        </Reservation>  
        <ClientData> 
          <ClientType>Private</ClientType>  
          <ClientCategory>WW</ClientCategory>  
          <DemoLanguage>en</DemoLanguage>  
          <DemoData> 
            <Bill Addr1="778 Billing Lane" Addr2="APT B" City="Billiton" Country="USA" Email="floyd@billingsly.com" FirstName="Floyd" LastName="Billingsly" Name="Floyd Billingsly" State="GA" Telephone="9129231995" Zip="31093" SellerResNbr="TSORDERNUM"/>  
            <Ship Addr1="3000 Ship Street SW" Addr2="APT S" City="Shipsville" Country="USA" Email="herman@shipples.com" FirstName="Herman" LastName="Shipple" Name="Herman Shipple" State="WA" Telephone="3122131234" Zip="98037-4718"/>
          </DemoData> 
        </ClientData>  
      </ReservationRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:testSuite name="TestSuite_LifeCycle" id="364f9415-b050-4eea-8899-6e33c241926d"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="23a334ca-18c5-44f4-826d-8d649f7c802f" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SmokeTest_Upgrade Alpha Life Cycle Test" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" disabled="true"><con:settings/><con:testStep type="groovy" name="GeneratePayload" id="3704517b-415d-4418-adc0-25d2a7e649f7"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

testRunner.testCase.setPropertyValue("factor", String.valueOf(1))

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)

Payload_ID = workString.substring(0,20)

sdf = new SimpleDateFormat("yyyy-MM-dd")
CurrentDate = sdf.format(date)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID_CreatTicket",Payload_ID)
testRunner.testCase.setPropertyValue("CurrentDate",CurrentDate)

log.info "Payload_ID (GeneratePayload) value is set to: " + Payload_ID
log.info "CurrentDate value is set to: " + CurrentDate</script></con:config></con:testStep><con:testStep type="request" id="7f831b80-883e-4b89-b56b-48b057023832" name="transmission - WDW Create Tkt Alpha Shells"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - WDW Create Tkt Alpha Shells" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="b35c1dd2-c939-4070-882d-a52bfab2aa56"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppURL}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/create_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>${#TestCase#Payload_ID_CreatTicket}</PayloadID>  
      <Target>Test-WDW</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>  
      <TransmitTime>14:02:03.280</TransmitTime>  
      <TktSeller> 
        <TSMAC>WDWADMIN</TSMAC>  
        <TSSystem>DTIAdminV1</TSSystem>  
        <TSLocation>mkl2</TSLocation>  
        <TSSecurity>Admin1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>${#TestCase#CurrentDate}</CmdDate>  
        <CmdTime>14:02:03.280</CmdTime>  
        <CmdInvoice>CreTktReq</CmdInvoice>  
        <CmdDevice>DTICTR</CmdDevice>  
        <CmdOperator>DTI</CmdOperator>  
        <CmdNote>DTI Create 1</CmdNote> 
      </CommandHeader>  
      <CreateTicketRequest> 
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>ALPHA-01</ProdCode>  
          <ProdQty>8</ProdQty>  
          <TktShell>2</TktShell>  
          <TktNote>104372</TktNote> 
        </Ticket> 
      </CreateTicketRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="aa83a569-525c-4ff9-a538-1ca43094ff11" name="Header_Existance"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="bd51a49a-9c91-4a02-8298-0a5297b3d0f2" name="Xpath Existance"><con:configuration><scriptText>/*
 * Script assertion to validate the Xpath existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Xpath Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="88964a58-f73d-490f-ac30-a613f5648ca8" name="Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the String existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="de817a90-400d-4851-8ea7-ce3f315ed5b5" name="Numeric Validation"><con:configuration><scriptText>/*
 * Script assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Generate GW Payload" id="5aeb054a-e7d6-48c6-8908-114a835bf26e"><con:settings/><con:config><script>import java.text.SimpleDateFormat
// get request property
def testStep = testRunner.testCase.getTestStepByName( "transmission - InfoSys BRAVO Product Catalog Updated" );
log.info( "Step 1: Obtained request." )

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID_Product",Payload_ID)

log.info "Payload_ID (Generate GW Payload) value is set to: " + Payload_ID</script></con:config></con:testStep><con:testStep type="request" id="8bec2db2-ead5-4ea8-8d4f-a32d10a1cf33" name="transmission - InfoSys BRAVO Product Catalog Updated"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - InfoSys BRAVO Product Catalog Updated" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="c4a4fb7e-231a-47c9-b4b7-68737429c445"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIInfoSysServlet}</con:endpoint><con:request><![CDATA[<ProductCatalogRQ xsi:noNamespaceSchemaLocation="\var\opt\apps\RT\schemas\dtiinfosys.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <PayloadHeader>
      <PayloadID>${#TestCase#Payload_ID_Product}</PayloadID>
      <Target>Test-WDW</Target>
      <Version>1.0</Version>
      <Comm>
         <Protocol>IP</Protocol>
         <Method>Network</Method>
      </Comm>
      <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
      <TransmitTime>08:29:34.374</TransmitTime>
   </PayloadHeader>
   <CommandHeader>
      <CmdTimeout>30</CmdTimeout>
      <CmdRequestor>
         <TSMAC>AAA212</TSMAC>
         <TSLocation>08625050</TSLocation>
         <CmdOperator>Bob</CmdOperator>
         <CmdActor>DVR</CmdActor>
      </CmdRequestor>
   </CommandHeader>
   <CommandBody>
      <ProviderType>Walt Disney World</ProviderType>
      <TSMAC>AAA212</TSMAC>
      <TSLocation>08625050</TSLocation>
      <IncludeSoldOut>true</IncludeSoldOut>
      <IncludeCalendarDetail>true</IncludeCalendarDetail>
   </CommandBody>
</ProductCatalogRQ>]]></con:request><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Xpath existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Xpath Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the String existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Transfer_ProductCode_Upgrade" id="538c87ce-bd17-4c60-bcd6-9f6549652ba4"><con:settings/><con:config><script>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Get Product Code and price
def responseHolderProduct = groovyUtils.getXmlHolder("transmission - InfoSys BRAVO Product Catalog Updated#Response")
ProductCode= responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product[2]/ProdCode[1]"]
ProductPrice= responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product[2]/ProdPricing[1]/ProdNetPrice[1]"]

//Get Magic Track
def responseHolderCreate = groovyUtils.getXmlHolder("transmission - WDW Create Tkt Alpha Shells#Response")
Mag= responseHolderCreate["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[1]/TktID[1]/Mag[1]"]

//To set Product code and price property Value
testRunner.testCase.setPropertyValue("ProductCode_UpgradeAlpha",ProductCode)
testRunner.testCase.setPropertyValue("ProductPrice_UpgradeAlpha",ProductPrice)

log.info "ProductCode_UpgradeAlpha property is set to value: " +  ProductCode
log.info "ProductPrice_UpgradeAlpha property is set to value: " +  ProductPrice

//To Set Magictrack1 property Value 
testRunner.testCase.setPropertyValue("MagicTrack1_Create", Mag)
log.info "MagicTrack1_Create property is set to value: " +  Mag

//Set payload ID in transmission - WDW Upgrade Alpha (8)
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+ uniqueId)

Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID_UpgradeAlpha",Payload_ID)

log.info "Payload_ID_UpgradeAlpha value is set to: " + Payload_ID</script></con:config></con:testStep><con:testStep type="request" id="5a9a5e02-edb2-4850-bb87-a4e1433601f4" name="transmission - WDW Upgrade Alpha (8)"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - WDW Upgrade Alpha (8)" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="4e3f70b7-7947-4a43-a57c-7473d3dc2c6a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppURL}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/upgrade_alpha_request.xsd" xsi:schemaLocation="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>${#TestCase#Payload_ID_UpgradeAlpha}</PayloadID>  
      <Target>Test-WDW</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>  
      <TransmitTime>11:08:01.358</TransmitTime>  
      <TktSeller> 
        <TSMAC>AAA212</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>08625050</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>${#TestCase#CurrentDate}</CmdDate>  
        <CmdTime>11:08:01.358</CmdTime>  
        <CmdInvoice>50100118560740818003</CmdInvoice>  
        <CmdDevice>WDPRO</CmdDevice>  
        <CmdOperator>bpacifico</CmdOperator> 
      </CommandHeader>  
      <UpgradeAlphaRequest> 
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>${#TestCase#ProductCode_UpgradeAlpha}</ProdCode>  
          <ProdPrice>${#TestCase#ProductPrice_UpgradeAlpha}</ProdPrice>  
          <TktID> 
            <Mag> 
              <MagTrack1> ${#TestCase#MagicTrack1_Create} </MagTrack1>  
            
            </Mag> 
          </TktID> 
        </Ticket>  
      </UpgradeAlphaRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="87608fa4-6a01-4eca-9fb3-a88787760b08" name="Header Existance"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="3849e785-09e9-432a-a894-09bae985459d" name="Xpath Validation"><con:configuration><scriptText>/*
 * Script assertion to validate the Xpath existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Xpath Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2,i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b0334709-ef9a-4626-bc91-d0c1d4945de5" name="String Validation"><con:configuration><scriptText>/*
 * Script assertion to validate the String existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="13948d86-162d-4276-9e93-7e779db04b6b" name="Numeric Validation"><con:configuration><scriptText>/*
 * Script assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Generate QueryTicket Payload" id="6631cb29-ecd7-491c-9577-027db492fbb7"><con:settings/><con:config><script>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW Upgrade Alpha (8)
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID_QueryTicket",Payload_ID)

log.info "Payload_ID_QueryTicket value is set to: " + Payload_ID</script></con:config></con:testStep><con:testStep type="request" id="85dff239-2986-41ef-9d2d-4fa2c9676609" name="transmission - WDW QueryTicket"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - WDW QueryTicket" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="3d8aa6e4-38f5-4d73-b9a7-6ca9fe9338ee"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppURL}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/query_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>${#TestCase#Payload_ID_UpgradeAlpha}</PayloadID>  
      <Target>Test-WDW</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>  
      <TransmitTime>12:00:57.93</TransmitTime>  
      <TktSeller> 
        <TSMAC>AAA212P</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>026</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>120</CmdTimeout>  
        <CmdDate>${#TestCase#CurrentDate}</CmdDate>  
        <CmdTime>12:00:57.93</CmdTime>  
        <CmdInvoice>2012120260000128369</CmdInvoice>  
        <CmdDevice>DENDRES</CmdDevice>  
        <CmdOperator>DENDRES</CmdOperator>  
        <CmdActor>MGR</CmdActor> 
      </CommandHeader>  
      <QueryTicketRequest> 
        <Ticket> 
          <TktItem>1</TktItem>  
          <TktID> 
          	<Mag>
				<MagTrack1> ${#TestCase#MagicTrack1_Create} </MagTrack1>
			</Mag>
          </TktID> 
        </Ticket> 
      </QueryTicketRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="f1a6360b-ae33-4e50-8541-6865d366e683" name="Header Validation"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2c3a0633-9bbf-4220-83b5-256da38b7614" name="Xpath Existance"><con:configuration><scriptText>/*
 * Script assertion to validate the Xpath existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Xpath Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="db36b6a4-b1fa-4ded-8262-992b82455786" name="String Validation"><con:configuration><scriptText>/*
 * Script assertion to validate the String existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e51b47b0-0a30-44f5-b624-3a07d9c37c95" name="Numeric Validation"><con:configuration><scriptText>/*
 * Script assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)
//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Generate VoidTicket Payload" id="8e1f9bcf-8422-4a80-b50b-2ec9e506c154"><con:settings/><con:config><script>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )


//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID_Void",Payload_ID)

log.info "Payload_ID_Void value is set to: " + Payload_ID</script></con:config></con:testStep><con:testStep type="request" id="ac6c5c7f-a9a9-4caa-9442-9727e9536d28" name="transmission - WDW Void Ticket 2.10"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - WDW Void Ticket 2.10" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="49c1a5f9-9c75-4c4a-bda1-6766ed19e32e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppURL}</con:endpoint><con:request><![CDATA[<Transmission xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/void_ticket_request.xsd">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>${#TestCase#Payload_ID_Void}</PayloadID>  
      <Target>Test-WDW</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>  
      <TransmitTime>11:56:39.58</TransmitTime>  
      <TktSeller> 
        <TSMAC>AAA212P</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>026</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>${#TestCase#CurrentDate}</CmdDate>  
        <CmdTime>11:56:39.58</CmdTime>  
        <CmdInvoice>2012120260000128369</CmdInvoice>  
        <CmdDevice>DENDRES</CmdDevice>  
        <CmdOperator>DENDRES</CmdOperator>  
        <CmdActor>MGR</CmdActor> 
      </CommandHeader>  
      <VoidTicketRequest> 
        <Ticket> 
          <TktItem>1</TktItem>  
          <TktID> 
            <Mag> 
              <MagTrack1> ${#TestCase#MagicTrack1_Create} </MagTrack1>  
            </Mag> 
          </TktID> 
        </Ticket> 
      </VoidTicketRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="babc1e51-2f54-45d1-9a03-0f157cd3a5fb" name="Header Existance"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="622929b8-da21-4989-a528-b8bfb3641d7b" name="Xpath Existance"><con:configuration><scriptText>/*
 * Script assertion to validate the Xpath existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Xpath Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="cd3840ec-ba4a-4139-9922-276adcff0605" name="String Validation"><con:configuration><scriptText>/*
 * Script assertion to validate the String existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0de243a3-464e-4a7f-b3d6-6e16f6e2fe4a" name="Numeric Validation"><con:configuration><scriptText>/*
 * Script assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Generate Product_UpgradeEntitlement Payload" id="651bff97-2369-4a93-903a-80d1e75d2784"><con:settings/><con:config><script>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +   (System.currentTimeMillis() + uniqueId)

Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID_ProductUpgradeEntitlement",Payload_ID)

log.info "Payload_ID_ProductUpgradeEntitlement value is set to: " + Payload_ID</script></con:config></con:testStep><con:testStep type="request" id="572a8b53-85c9-4fb0-9f43-4e3a95eba1ff" name="transmission - InfoSys BRAVO Product Catalog_UpgradeEntitlement"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - InfoSys BRAVO Product Catalog_UpgradeEntitlement" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="c4a4fb7e-231a-47c9-b4b7-68737429c445"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIInfoSysServlet}</con:endpoint><con:request><![CDATA[<ProductCatalogRQ xsi:noNamespaceSchemaLocation="\var\opt\apps\RT\schemas\dtiinfosys.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <PayloadHeader>
      <PayloadID>${#TestCase#Payload_ID_Product}</PayloadID>
      <Target>Test-WDW</Target>
      <Version>1.0</Version>
      <Comm>
         <Protocol>IP</Protocol>
         <Method>Network</Method>
      </Comm>
      <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
      <TransmitTime>08:29:34.374</TransmitTime>
   </PayloadHeader>
   <CommandHeader>
      <CmdTimeout>30</CmdTimeout>
      <CmdRequestor>
         <TSMAC>AAA212</TSMAC>
         <TSLocation>08625050</TSLocation>
         <CmdOperator>Bob</CmdOperator>
         <CmdActor>DVR</CmdActor>
      </CmdRequestor>
   </CommandHeader>
   <CommandBody>
      <ProviderType>Walt Disney World</ProviderType>
      <TSMAC>AAA212</TSMAC>
      <TSLocation>08625050</TSLocation>
      <IncludeSoldOut>true</IncludeSoldOut>
      <IncludeCalendarDetail>true</IncludeCalendarDetail>
   </CommandBody>
</ProductCatalogRQ>]]></con:request><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)
//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Xpath ader existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Xpath Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the String existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Transfer_ProductCode_UpgradeEntitlement" id="8d74cef8-45e7-4f95-afd2-6eb770be9407"><con:settings/><con:config><script>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Get Product Code and price
def responseHolderProduct = groovyUtils.getXmlHolder("transmission - InfoSys BRAVO Product Catalog_UpgradeEntitlement#Response")
ProductCode= responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product[2]/ProdCode[1]"]
ProductPrice= responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product[2]/ProdPricing[1]/ProdNetPrice[1]"]
log.info ProductCode + " " +  ProductPrice

//Set payload ID in transmission - WDW Upgrade Alpha (8)
testRunner.testCase.setPropertyValue("ProductCode_UpgradeEntitlement",ProductCode)
testRunner.testCase.setPropertyValue("ProductPrice_UpgradeEntitlement",ProductPrice)

log.info "ProductCode_UpgradeEntitlement property is set to value: " +  ProductCode
log.info "ProductPrice_UpgradeEntitlement property is set to value: " +  ProductPrice

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID_UpgradeEntitlement",Payload_ID)

log.info "Payload_ID_UpgradeEntitlement value is set to: " + Payload_ID</script></con:config></con:testStep><con:testStep type="request" id="ee9e2c12-4b4b-4bb7-98a9-3c0f2ed146ce" name="transmission - WDW Upgrade Entitlement"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - WDW Upgrade Entitlement" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="094c50e6-7ad6-43a8-8fa3-1e9fb01e8a22"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppURL}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID_UpgradeEntitlement}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>14:27:39</TransmitTime>
         <TktSeller>
            <TSMAC>MOBILEATS</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>MOBILEATSEC</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>14:27:39</CmdTime>
            <CmdInvoice>519B7D94-FC37-4D58-9A38-5CB98B77A772</CmdInvoice>
            <CmdDevice>ECB6</CmdDevice>
            <CmdOperator>STUAC003</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktNID>12000209021601272</TktNID>
               </TktID>
               <ProdCode>10A0A</ProdCode>
               <ProdPrice>132.06</ProdPrice>
               <UpgrdPrice>14.91</UpgrdPrice>
               <FromProdCode>10A2A</FromProdCode>
               <FromPrice>117.15</FromPrice> <!-- See "standard retail price in catalog response -->
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCSwipe>
                        <CCTrack1>%B5424180279791765^FDCS TEST CARD /MASTERCARD^1604011000 1111A123456789012 ?</CCTrack1>
                        <CCTrack2>;5424180279791765=1604101100000123456?</CCTrack2>
                     </CCSwipe>
                  </CreditCard>
               </PayType>
               <PayAmount>181.05</PayAmount>
            </Payment>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="8ad12106-71e5-4fdc-bc48-11784428e905" name="Header Existance"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>CurrentDate</con:name><con:value>2017-09-29</con:value></con:property><con:property><con:name>Payload_ID_CreatTicket</con:name><con:value>91120170929150679101</con:value></con:property><con:property><con:name>Payload_ID_Product</con:name><con:value>91120170929150690204</con:value></con:property><con:property><con:name>Payload_ID_UpgradeAlpha</con:name><con:value>91120170929150701305</con:value></con:property><con:property><con:name>Payload_ID_QueryTicket</con:name><con:value>91120170929150712406</con:value></con:property><con:property><con:name>Payload_ID_Void</con:name><con:value>91120170929150723506</con:value></con:property><con:property><con:name>Payload_ID_ProductUpgradeEntitlement</con:name><con:value>91120170929150734607</con:value></con:property><con:property><con:name>Payload_ID_UpgradeEntitlement</con:name><con:value>91120170929150745708</con:value></con:property><con:property><con:name>ProductCode_Create</con:name><con:value>1001A</con:value></con:property><con:property><con:name>ProductPrice_Create</con:name><con:value>125.67</con:value></con:property><con:property><con:name>ProductCode_UpgradeAlpha</con:name><con:value>10A11</con:value></con:property><con:property><con:name>ProductPrice_UpgradeAlpha</con:name><con:value>125.67</con:value></con:property><con:property><con:name>MagicTrack1_Create</con:name><con:value>EFBB8K656P895D66QV55HQ5556556555555BFIB8K656P895D66QV55HQ5556556555555B</con:value></con:property><con:property><con:name>ProductCode_UpgradeEntitlement</con:name><con:value>10A11</con:value></con:property><con:property><con:name>ProductPrice_UpgradeEntitlement</con:name><con:value>125.67</con:value></con:property><con:property><con:name>DTIAppURL</con:name><con:value>http://localhost:8081/DTIWeb/DTIApp</con:value></con:property><con:property><con:name>DTIInfoSysServlet</con:name><con:value>https://fldcvdsla1018.wdw.disney.com/DTIInfoSys/DTIInfoSysServlet</con:value></con:property><con:property><con:name>factor</con:name><con:value>8</con:value></con:property><con:property><con:name>counter</con:name><con:value>111000000</con:value></con:property><con:property><con:name>BasePath</con:name><con:value>D:/Disney/Software_Disne/apache-tomcat-7.0.75-windows-x64/apache-tomcat-7.0.75/DTIConfig/schemas</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="a34de2cc-1ab6-4e39-88c7-8822c551448d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SmokeTest_FloodControlTestCase LifeCycle" searchProperties="true"><con:settings/><con:testStep type="groovy" name="GeneratePayload" id="ba4d4c02-bf30-49e6-9831-39498b978d29"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
//Extract First 20 character
Payload_ID = workString.substring(0,20)

sdf = new SimpleDateFormat("yyyy-MM-dd")
CurrentDate = sdf.format(date)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )
testRunner.testCase.setPropertyValue("CurrentDate",CurrentDate )

log.info "Payload_ID value is set to: " + Payload_ID 
log.info "CurrentDate value is set to: " + CurrentDate</script></con:config></con:testStep><con:testStep type="request" id="567c2d82-c76b-453f-adb4-f5ead6c88454" name="DLR QueryTicket"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="DLR QueryTicket" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="3d8aa6e4-38f5-4d73-b9a7-6ca9fe9338ee"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/query_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-DLR</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>06:25:00.51</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONADLR</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>DLR_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>25</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>06:25:00.53</CmdTime>
            <CmdInvoice>36500000000000244923</CmdInvoice>
            <CmdDevice>172.17.0.3</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <QueryTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <External>4771155663328676843</External>
               </TktID>
            </Ticket>
            <IncludeTktDemographics>true</IncludeTktDemographics>
            <IncludePassAttributes>true</IncludePassAttributes>
            <IncludeTicketRedeemability>true</IncludeTicketRedeemability>
            <IncludeRenewalAttributes>true</IncludeRenewalAttributes>
         </QueryTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="78597216-5b4f-4041-9d13-5be48739f0da" name="Script Assertion" disabled="true"><con:configuration><scriptText/></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="5154c94b-0f6a-4ce0-ba77-4a59f20293b4" name="Invalid HTTP Status Codes" disabled="true"><con:configuration><codes>410</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="bd40dbff-42c5-4ecd-93de-379ce5e324cd"><con:settings/><con:config><script>def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def httpResponseHeaders = context.testCase.testSteps["DLR QueryTicket"].testRequest.response.responseHeaders
def httpStatus = httpResponseHeaders["#status#"]
def httpStatusCode = (httpStatus =~ "[1-5]\\d\\d")[0]

log.info "httpStatusCode :" +httpStatusCode
if (httpStatusCode =='410')
{
	log.info "The particular transactions got blocked"
	log.info "The particular transactions will be executed after 60 seconds"	
	sleep(90000)
}

if( context.counter == null )
{
   context.counter = (int) 7
}
if( context.counter > 0 )
{
    log.info "Going to excute .."
    context.counter--
    testRunner.gotoStepByName("DLR QueryTicket" )
}

</script></con:config></con:testStep><con:testStep type="request" id="aff63e96-410d-4eaa-9cc4-9dfc57fea1e4" name="DLR QueryTicket After Flood Block"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="DLR QueryTicket After Flood Block" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="3d8aa6e4-38f5-4d73-b9a7-6ca9fe9338ee"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/query_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-DLR</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>06:25:00.51</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONADLR</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>DLR_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>25</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>06:25:00.53</CmdTime>
            <CmdInvoice>36500000000000244923</CmdInvoice>
            <CmdDevice>172.17.0.3</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <QueryTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <External>4771155663328676843</External>
               </TktID>
            </Ticket>
            <IncludeTktDemographics>true</IncludeTktDemographics>
            <IncludePassAttributes>true</IncludePassAttributes>
            <IncludeTicketRedeemability>true</IncludeTicketRedeemability>
            <IncludeRenewalAttributes>true</IncludeRenewalAttributes>
         </QueryTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="78597216-5b4f-4041-9d13-5be48739f0da" name="Script Assertion" disabled="true"><con:configuration><scriptText/></con:configuration></con:assertion><con:assertion type="Invalid HTTP Status Codes" id="5154c94b-0f6a-4ce0-ba77-4a59f20293b4" name="Invalid HTTP Status Codes" disabled="true"><con:configuration><codes>410</codes></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="WDW QueryTicket" id="5be46271-31e4-4024-830e-6c3a8548617e" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="WDW QueryTicket" id="25aab371-7cb0-488b-b3a6-f3050f459c69"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/DTIWeb/DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}\query_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>12:00:57.93</TransmitTime>
         <TktSeller>
            <TSMAC>AAA212P</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>026</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>120</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>12:00:57.93</CmdTime>
            <CmdInvoice>2012120260000128369</CmdInvoice>
            <CmdDevice>DENDRES</CmdDevice>
            <CmdOperator>DENDRES</CmdOperator>
            <CmdActor>MGR</CmdActor>
         </CommandHeader>
         <QueryTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktNID>12000529081700002</TktNID>
               </TktID>
            </Ticket>
         </QueryTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:loadTest id="215e9f10-d750-4575-b1fc-8f1e5f768055" name="FloodControlLoadTest"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>3</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>4</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>7000</testDelay><randomFactor>0.5</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"><con:configuration><name>Step Status</name><min-requests>1</min-requests><test-step>DLR QueryTicket</test-step><max-errors>-1</max-errors></con:configuration></con:assertion><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:setupScript/></con:loadTest><con:properties><con:property><con:name>factor</con:name><con:value>441</con:value></con:property><con:property><con:name>counter</con:name><con:value>111000000</con:value></con:property><con:property><con:name>Payload_ID</con:name><con:value>91120171026151061564</con:value></con:property><con:property><con:name>CurrentDate</con:name><con:value>2017-10-26</con:value></con:property><con:property><con:name>DTIAppURL</con:name><con:value>https://dti-latest.disney.pvt/DTIApp/DTIApp</con:value></con:property><con:property><con:name>BasePath</con:name><con:value>/var/opt/apps/RT/schemas</con:value></con:property></con:properties></con:testCase><con:testCase id="cde49cea-4828-4353-80e4-73c3441a7ae7" failOnError="false" failTestCaseOnErrors="false" keepSession="false" maxResults="0" name="SmokeTest_Reservation LifeCycleTest" searchProperties="false" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="GeneratePayload" id="6270099c-65b0-4d01-8ea6-1c9e02650ab1"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

testRunner.testCase.setPropertyValue("factor", String.valueOf(1))

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
//Extract First 20 character
Payload_ID = workString.substring(0,20)

sdf = new SimpleDateFormat("yyyy-MM-dd")
CurrentDate = sdf.format(date)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )
testRunner.testCase.setPropertyValue("CurrentDate",CurrentDate )

log.info "Payload_ID value is set to: " + Payload_ID 
log.info "CurrentDate value is set to: " + CurrentDate</script></con:config></con:testStep><con:testStep type="request" id="b656c4c5-31a7-438a-92f8-301e0e2e9383" name="transmission - InfoSys BRAVO Product Catalog Updated"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - InfoSys BRAVO Product Catalog Updated" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="c4a4fb7e-231a-47c9-b4b7-68737429c445"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIInfoSysServlet}</con:endpoint><con:request><![CDATA[<ProductCatalogRQ xsi:noNamespaceSchemaLocation="\var\opt\apps\RT\schemas\dtiinfosys.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <PayloadHeader>
      <PayloadID>${#TestCase#Payload_ID}</PayloadID>
      <Target>Test-WDW</Target>
      <Version>1.0</Version>
      <Comm>
         <Protocol>IP</Protocol>
         <Method>Network</Method>
      </Comm>
      <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
      <TransmitTime>08:29:34.374</TransmitTime>
   </PayloadHeader>
   <CommandHeader>
      <CmdTimeout>30</CmdTimeout>
      <CmdRequestor>
         <TSMAC>WDWEAI</TSMAC>
         <TSLocation>SBC</TSLocation>
         <CmdOperator>Bob</CmdOperator>
         <CmdActor>DVR</CmdActor>
      </CmdRequestor>
   </CommandHeader>
   <CommandBody>
      <ProviderType>Walt Disney World</ProviderType>
      <TSMAC>WDWEAI</TSMAC>
      <TSLocation>SBC</TSLocation>
      <IncludeSoldOut>true</IncludeSoldOut>
      <OnSaleStartDate>2005-01-31</OnSaleStartDate>
      <SkipResponses>1</SkipResponses>
      <IncludeCalendarDetail>true</IncludeCalendarDetail>
   </CommandBody>
</ProductCatalogRQ>]]></con:request><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Element existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath + "\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * assertion to validate the String existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Generate GW Payload" id="41db7012-92d1-41a0-9420-cea2ecdc9bf5"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="groovy" name="Transfer_ProductCode" id="08cee12e-a52c-4dbd-936d-7bd68b37e5da"><con:settings/><con:config><script>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Get Product Code and price
def responseHolderProduct = groovyUtils.getXmlHolder("transmission - InfoSys BRAVO Product Catalog Updated#Response")


ProductCode= responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product[2]/ProdCode[1]"]
ProductPrice= responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product[2]/ProdPricing[1]/ProdNetPrice[1]"]

//To set Product code and price property Value
testRunner.testCase.setPropertyValue("ProductCode",ProductCode)
testRunner.testCase.setPropertyValue("ProductPrice",ProductPrice)

log.info "ProductPrice property is set to value: " +  ProductCode
log.info "ProductPrice property is set to value: " +  ProductPrice</script></con:config></con:testStep><con:testStep type="request" id="bfaf10a9-dd7f-4924-a8a9-55a2f5709d7c" name="transmission - WDW Reservation 2.10"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - WDW Reservation 2.10" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="46fee0f6-7cff-434c-b262-5c96f052ba26"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppURL}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>14:47:56.85</TransmitTime>
         <TktSeller>
            <TSMAC>WDWEAI</TSMAC>
            <TSSystem>SBC</TSSystem>
            <TSLocation>SBC</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>17:10:56.85</CmdTime>
            <CmdInvoice>10000000000033600</CmdInvoice>
            <CmdDevice>10.199.129.121</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <ReservationRequest>
            <RequestType>Create</RequestType>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>${#TestCase#ProductCode}</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>${#TestCase#ProductPrice}</ProdPrice>
            </Ticket>
            <Ticket>
               <TktItem>2</TktItem>
               <ProdCode>MC004</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>0.00</ProdPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCManual>
                        <CCNbr>4444855457062688</CCNbr>
                        <CCExpiration>1219</CCExpiration>
                        <CCVV>529</CCVV>
                        <CCName>Jame Bo</CCName>
                        <CCStreet>756 PARIS WAY</CCStreet>
                        <CCZipcode>76590</CCZipcode>
                        <CCType>DS</CCType>
                     </CCManual>
                  </CreditCard>
               </PayType>
               <PayAmount>${#TestCase#ProductPrice}</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>${#TestCase#CurrentDate}</ResCreateDate>
               <ResPickupDate>${#TestCase#CurrentDate}</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="8001 SOB trl" Addr2="" City="Orlando" Country="USA" Email="JimBo@gmail.com" FirstName="Ann-Marie" LastName="O'Malley" Name="Ann-Marie O'Malley" State="FL" Telephone="7324692388" Zip="32809"/>
                  <Ship Addr1="37 13th st" City="surf city" Country="USA" FirstName="james" LastName="bo" Name="james bo" State="NJ" Telephone="6099346897" Zip="08008"/>
               </DemoData>
            </ClientData>
         </ReservationRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" name="Headers Existence - Script Assertion" id="c1261ec8-8942-4eec-841b-d0a56100d602"><con:configuration><scriptText>/*
 * Assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="XPath Existence - Script Assertion" id="7fca8b49-504c-4388-9638-609ce4392510"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="String Validation - Script Assertion" id="dcb55a74-730e-48fe-9922-dc3402f27f34"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Numeric Validation - Script Assertion" id="a9d5e334-5e84-47ce-9514-4c65dcba3db3"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Transfer Tkt NIDs" id="01cda1ac-b004-4d56-9c72-5931b7aa39fe"><con:settings/><con:config><script>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Get Ticket NIDs from multiple tickets
def responseHolderProduct = groovyUtils.getXmlHolder("transmission - WDW Reservation 2.10#Response")

//Ticket list for dynamic tickets data
def tickets = []

//Generates the xPath dynamically
def xpath1 = "//Transmission[1]/Payload[1]/Command[1]/ReservationResponse[1]/Ticket[";
def xpath2 = "]/TktID[1]/TktNID[1]"
def xpath

def count = 1

//Loop iterates infinite times until ticket IDs exist in WDW Reservation response
while (true) {
	xpath = xpath1 + count + xpath2
	TktNID = responseHolderProduct[xpath]
	if (TktNID == []) {
		//When there are no more tickets
		break;
	} else {
		tickets &lt;&lt; TktNID
		count++;
	}
}

log.info " Ticket NIds : " + tickets.toString()

//setting the tickets value in the custom properties
testRunner.testCase.setPropertyValue("tickets", tickets.toString())</script></con:config></con:testStep><con:testStep type="groovy" name="Transfer ResCode" id="4632f084-97ba-4d59-bb92-911324aec1e2"><con:settings/><con:config><script>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Get Reservation Code
def responseHolderProduct = groovyUtils.getXmlHolder("transmission - WDW Reservation 2.10#Response")
ResCode = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/ReservationResponse[1]/Reservation[1]/ResCode[1]"]

//setting the Reservation Code in the custom properties
testRunner.testCase.setPropertyValue("ResCode",ResCode)

log.info "ResCode property is set to value: " +  ResCode</script></con:config></con:testStep><con:testStep type="groovy" name="Generate Payload for QueryReservation" id="e59b7655-a801-4d2e-86de-df64f1dbdc12"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission - WDW QueryReservation" id="ce57e115-a023-437e-8612-407f75b5d9a0"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - WDW QueryReservation" id="2d50eef8-27a8-4886-928b-5dc458c73ead"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppURL}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/queryreservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>NetWork</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>20:21:21.686</TransmitTime>
         <TktSeller>
            <TSMAC>WDWEAI</TSMAC>
            <TSSystem>SBC</TSSystem>
            <TSLocation>SBC_LACD</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>1000</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>20:21:21.687</CmdTime>
            <CmdInvoice>254201708082021021</CmdInvoice>
            <CmdDevice>fldcvpsla0539</CmdDevice>
            <CmdOperator>limak009</CmdOperator>
            <CmdActor>SYS</CmdActor>
         </CommandHeader>
         <QueryReservationRequest>
            <RequestType>EntitlementProduct</RequestType>
            <QueriedReservation>
               <ResCode>${#TestCase#ResCode}</ResCode>
            </QueriedReservation>
            <IncludeResDemographics>true</IncludeResDemographics>
         </QueryReservationRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="3290bc74-6acf-438d-8477-a6875652f819" name="Header Validation"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e5fdd54e-e347-41e4-a4d2-8b71aeb8d934" name="Xpath Existance"><con:configuration><scriptText>/*
 * Script assertion to validate the Xpath existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Xpath Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="42f366f8-3e7a-4a27-8801-545c8e3cfb42" name="String Validation"><con:configuration><scriptText>/*
 * Script assertion to validate the String existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f20994c3-f39d-4c84-9dfb-646b21d2df1d" name="Numeric Validation"><con:configuration><scriptText>/*
 * Script assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)
//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Generate Payload for VoidReservation" id="de5f0236-adfb-4e7b-b9f0-131ae362f96c"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW VoidReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission - WDW VoidReservation" id="95e451f0-88e0-45db-beea-cca15956de41"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - WDW VoidReservation" id="3994ba1d-6696-45a8-9476-d9ed12662e37"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppURL}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/voidreservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>NetWork</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>18:49:45.862</TransmitTime>
         <TktSeller>
            <TSMAC>WDWEAI</TSMAC>
            <TSSystem>SBC</TSSystem>
            <TSLocation>SBC_LACD</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>1000</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>18:49:45.862</CmdTime>
            <CmdInvoice>254201708091849045</CmdInvoice>
            <CmdDevice>fldcvpsla0541</CmdDevice>
            <CmdOperator>pered183</CmdOperator>
            <CmdActor>SYS</CmdActor>
         </CommandHeader>
         <VoidReservationRequest>
            <RequestType>EntitlementProduct</RequestType>
            <VoidedReservation>
               <ResCode>${#TestCase#ResCode}</ResCode>
            </VoidedReservation>
         </VoidReservationRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="fb89764c-6248-48c7-9925-3d2fb9922596" name="Header Validation"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Drrrrrrrrrrrrrrrrrrrrrrrrrrr"
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="fc06a31e-9aa7-4bf8-9409-f88f05a6cf2d" name="Xpath Existance"><con:configuration><scriptText>/*
 * Script assertion to validate the Xpath existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Xpath Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="dad5eefb-3fe7-439a-9e34-9e180c98c069" name="String Validation"><con:configuration><scriptText>/*
 * Script assertion to validate the String existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ae2efabd-0aed-4bc1-b6ca-6e44294db5cb" name="Numeric Validation"><con:configuration><scriptText>/*
 * Script assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)
//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Validate all Tkts" id="0e98e3c6-4f7b-4179-9b06-b3d7b51d6723" disabled="true"><con:settings/><con:config><script>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Enable transmission - WDW Reservation QueryTicket after void by default
testRunner.testCase.testSteps['transmission - WDW Reservation QueryTicket after void'].disabled = false

//Set payload ID in transmission - WDW Reservation QueryTicket after void
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

//Get the tickets NIDs from properties
String tickets = testRunner.testCase.getPropertyValue("tickets")

//convering String to array
def ticketList = tickets[1..tickets.length()-2].tokenize(',')

for (int i = 0; i &lt; ticketList.size(); i++) {
	def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
	testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))
	
	//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
	def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)
	
	//To set Payload_ID property Value
	testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))
	
	//To set TicketNId property value. Mandatory to trim to remove spaces with the ticketIDs
	testRunner.testCase.setPropertyValue("TktNId",ticketList[i].trim())
	
	log.info "Payload_ID value is set to: " + workString.substring(0,20)
	log.info "TktNId[" +i+ "] value is set to: " + ticketList[i].trim()

	//invokes the query ticket
	status = testRunner.runTestStepByName("transmission - WDW Reservation QueryTicket after void").getStatus();
	flag = false;

	//check if the response is OK
	if(!flag &amp;&amp; ('OK').equals(status.toString())) {
		responseHolderProduct = groovyUtils.getXmlHolder("transmission - WDW Reservation QueryTicket after void#Response")
		voidable = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/QueryTicketResponse[1]/Ticket[1]/TktStatus[1]/StatusValue[1]"]
		//if the response is OK, check if ticket status value has NO for item Voidable
		if (('YES').equals(voidable.toString())) {
			flag = true;
		}
	} else {
		log.info status.toString()
		flag = true;
	}
}


if (flag) {
	//check and fail if there are any failures
	testRunner.fail("Invalid Ticket/Ticket not voided")
} else {
	// skip the last test step
	//Disable transmission - WDW Reservation QueryTicket after void
	testRunner.testCase.testSteps['transmission - WDW Reservation QueryTicket after void'].disabled = true
}</script></con:config></con:testStep><con:testStep type="request" name="transmission - WDW Reservation QueryTicket after void" id="fbd8181f-36ad-43e6-bebf-91857d4b10de" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - WDW Reservation QueryTicket after void" id="91ddca26-606b-4afd-ab1a-676c5c488daf"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppURL}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/query_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>12:00:57.93</TransmitTime>
         <TktSeller>
            <TSMAC>AAA212P</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>026</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>120</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>12:00:57.93</CmdTime>
            <CmdInvoice>2012120260000128369</CmdInvoice>
            <CmdDevice>DENDRES</CmdDevice>
            <CmdOperator>DENDRES</CmdOperator>
            <CmdActor>MGR</CmdActor>
         </CommandHeader>
         <QueryTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktNID>${#TestCase#TktNID}</TktNID>
               </TktID>
            </Ticket>
         </QueryTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="9f6f647b-c4b8-4006-8abc-a9ec9e282bf9" name="Header Validation"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Drrrrrrrrrrrrrrrrrrrrrrrrrrr"
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="23c18701-1857-4277-a1c6-04fd218752f9" name="Xpath Existance"><con:configuration><scriptText>/*
 * Script assertion to validate the Xpath existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Xpath Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0cf5ea6c-d099-40ae-9dce-153cad27d51f" name="String Validation"><con:configuration><scriptText>/*
 * Script assertion to validate the String existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="299dcce6-38cb-4f77-aebd-8254f55a7977" name="Numeric Validation"><con:configuration><scriptText>/*
 * Script assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)
//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>Payload_ID</con:name><con:value>91120171026150946444</con:value></con:property><con:property><con:name>ProductCode</con:name><con:value>10011</con:value></con:property><con:property><con:name>ProductPrice</con:name><con:value>125.67</con:value></con:property><con:property><con:name>CurrentDate</con:name><con:value>2017-10-26</con:value></con:property><con:property><con:name>DTIAppURL</con:name><con:value>https://dti-latest.disney.pvt/DTIApp/DTIApp</con:value></con:property><con:property><con:name>DTIInfoSysServlet</con:name><con:value>https://fldcvdsla1018.wdw.disney.com/DTIInfoSys/DTIInfoSysServlet</con:value></con:property><con:property><con:name>counter</con:name><con:value>111000000</con:value></con:property><con:property><con:name>factor</con:name><con:value>5</con:value></con:property><con:property><con:name>TktNID</con:name><con:value>12000628091700002</con:value></con:property><con:property><con:name>ResCode</con:name><con:value>UVJH92767576</con:value></con:property><con:property><con:name>tickets</con:name><con:value>[12000126101700142, 12000126101700143]</con:value></con:property><con:property><con:name>BasePath</con:name><con:value>/var/opt/apps/RT/schemas</con:value></con:property></con:properties><con:reportParameters/></con:testCase><con:testCase id="079828e9-b496-4efa-ab20-3540460bd3ed" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SmokeTest_WDW_Ticket LifeCycleTest" searchProperties="true"><con:settings/><con:testStep type="groovy" name="GeneratePayload" id="e6b4462c-5943-403f-8aee-f3c4bc4b6fae"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

testRunner.testCase.setPropertyValue("factor", String.valueOf(1))

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
//Extract First 20 character
Payload_ID = workString.substring(0,20)

sdf = new SimpleDateFormat("yyyy-MM-dd")
CurrentDate = sdf.format(date)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )
testRunner.testCase.setPropertyValue("CurrentDate",CurrentDate )

log.info "Payload_ID value is set to: " + Payload_ID 
log.info "CurrentDate value is set to: " + CurrentDate</script></con:config></con:testStep><con:testStep type="request" name="transmission - CreateTicket" id="1b33888c-056c-497c-a662-134a86d717e8"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - CreateTicket" id="7e01c872-0928-45a5-beb5-2c6b92871791"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}/create_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>3.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>13:11:00</TransmitTime>
         <TktSeller>
            <TSMAC>MOBILEATS</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>MOBILEATSMK</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>13:11:00</CmdTime>
            <CmdInvoice>99920170117000088</CmdInvoice>
            <CmdDevice>CreTktReq</CmdDevice>
            <CmdOperator>DTICTR</CmdOperator>
         </CommandHeader>
         <CreateTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>2J001</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>211.94</ProdPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCManual>
                        <CCNbr>4444855457062688</CCNbr>
                        <CCExpiration>1219</CCExpiration>
                        <CCName>Visa</CCName>
                        <CCStreet>756 PARIS WAY</CCStreet>
                        <CCZipcode>76590</CCZipcode>
                     </CCManual>
                  </CreditCard>
               </PayType>
               <PayAmount>211.94</PayAmount>
            </Payment>
         </CreateTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="4d5fe6ff-afb4-4fdb-b851-c96155b6be24" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="351b87be-5439-4d83-8087-3b54823b89fa" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="72d37f8c-e8ee-4019-90b6-49e2f9d44378" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="482a6895-499f-43cd-a0f3-fe52bf28bfe2" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  CreateTicket
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Transfer TktNID" id="3688e52a-b886-499f-bc10-93aa1f11510f"><con:settings/><con:config><script>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Get Ticket NIDs from multiple tickets
def responseHolderProduct = groovyUtils.getXmlHolder("transmission - CreateTicket#Response")
TktNID = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[1]/TktID[1]/TktNID[1]"]

//To set Product code and price property Value
testRunner.testCase.setPropertyValue("TktNID",TktNID)

log.info "TktNID property is set to value: " +  TktNID</script></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for QueryTicket" id="c4aa873e-fbb4-460d-ae4b-d8295af8397e"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - QueryTicket" id="dbade14f-2ca8-4306-9c2a-dae264472442"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - QueryTicket" id="6ac50131-5d74-452a-b554-8c8438ab0108"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}/query_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>12:00:57.93</TransmitTime>
         <TktSeller>
            <TSMAC>AAA212P</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>026</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>120</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>12:00:57.93</CmdTime>
            <CmdInvoice>2012120260000128369</CmdInvoice>
            <CmdDevice>DENDRES</CmdDevice>
            <CmdOperator>DENDRES</CmdOperator>
            <CmdActor>MGR</CmdActor>
         </CommandHeader>
         <QueryTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktNID>${#TestCase#TktNId}</TktNID>
               </TktID>
            </Ticket>
         </QueryTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="f3a3bf8b-1436-45b8-bbe0-c715d001f0db" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  QUERYTICKET Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="55abd261-2cad-4655-a579-09bfb89233af" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  QUERYTICKET Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="064ebf49-55c4-4a5f-a3c3-947edb45dd69" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  QUERYTICKET Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1be9a042-22af-450f-b4f5-cb76abee4c08" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  QUERYTICKET Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for VoidTicket" id="4141df85-0d3b-4793-b79d-d8692db6c9d2"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - VoidTicket" id="59f79377-3509-4d29-908e-e07665b772ca"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - VoidTicket" id="6b2e632e-7d7e-4a9d-803a-a297aa448117"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}/void_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>11:56:39.58</TransmitTime>
         <TktSeller>
            <TSMAC>AAA212P</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>026</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>11:56:39.58</CmdTime>
            <CmdInvoice>2012120260000128369</CmdInvoice>
            <CmdDevice>DENDRES</CmdDevice>
            <CmdOperator>DENDRES</CmdOperator>
            <CmdActor>MGR</CmdActor>
         </CommandHeader>
         <VoidTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktNID>${#TestCase#TktNID}</TktNID>
               </TktID>
            </Ticket>
         </VoidTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="8abee21c-141a-4510-9641-e9443c72939b" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2d41d5a4-0d49-4c72-ab5f-a77cb1ed2951" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  VOIDTICKET Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f7918578-d083-44cf-b1ac-01ccb1da6fa6" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  VOIDTICKET Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0d00be00-44e9-47d7-8039-f01032de32ad" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  VOIDTICKET Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for Voided QueryTicket" id="ac56b1d3-bb50-4863-bdec-3d47ce3e2bb9"><con:settings/><con:config><script>import java.text.SimpleDateFormat
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - QueryTicket after Void
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID)

log.info "Payload_ID value is set to: " + Payload_ID</script></con:config></con:testStep><con:testStep type="request" name="transmission - QueryTicket after Void" id="9d440f3d-4b6d-4235-bf3a-1552e3d4d551"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - QueryTicket after Void" id="ac0b9019-47dd-4cbf-9a9d-47b9ced8c1a3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}/query_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>12:00:57.93</TransmitTime>
         <TktSeller>
            <TSMAC>AAA212P</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>026</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>120</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>12:00:57.93</CmdTime>
            <CmdInvoice>2012120260000128369</CmdInvoice>
            <CmdDevice>DENDRES</CmdDevice>
            <CmdOperator>DENDRES</CmdOperator>
            <CmdActor>MGR</CmdActor>
         </CommandHeader>
         <QueryTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktNID>${#TestCase#TktNId}</TktNID>
               </TktID>
            </Ticket>
         </QueryTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="e4df8828-5d99-4a7f-9a97-4229ea1d9b77" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  QUERY TICKET
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="dadbab25-4ef2-451c-8284-9271a5a75925" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  QueryTicket Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="af1d632a-05bf-4d5d-9028-7f1061956248" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  QueryTicket Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a9bd0632-7864-4ee2-a2c2-2e1add91b384" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  QueryTicket Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>DTIAppUrl</con:name><con:value>https://dti-latest.disney.pvt/DTIApp/DTIApp</con:value></con:property><con:property><con:name>factor</con:name><con:value>6</con:value></con:property><con:property><con:name>counter</con:name><con:value>100000</con:value></con:property><con:property><con:name>Payload_ID</con:name><con:value>91120171031150945349</con:value></con:property><con:property><con:name>CurrentDate</con:name><con:value>2017-10-26</con:value></con:property><con:property><con:name>DTIInfoSysServlet</con:name><con:value>https://dti-latest.disney.pvt/DTIInfoSys/DTIInfoSysServlet</con:value></con:property><con:property><con:name>TktNId</con:name><con:value>10501626101700031</con:value></con:property><con:property><con:name>BasePath</con:name><con:value>/var/opt/apps/RT/schemas</con:value></con:property></con:properties></con:testCase><con:testCase id="0081d932-6861-4b61-8bb8-3f9aac6ede57" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SmokeTest_Ticket LifeCycleTest_WDW_QEP_Eligible" searchProperties="true"><con:settings/><con:testStep type="groovy" name="GeneratePayload for QueryEligibleProduct" id="28d031e8-642b-497b-8e69-afa5fcdcc254"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - QueryEligibleProduct_Eligible" id="576c91fc-4af6-47e4-9a65-63557c49e8fb"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - QueryEligibleProduct_Eligible" id="8261e2a8-0a44-40ae-8121-efae812a641e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}/query_eligible_products_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>16:53:10.46</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>16:53:10.49</CmdTime>
            <CmdInvoice>39900000010000016262</CmdInvoice>
            <CmdDevice>10.199.235.178</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <QueryEligibleProductsRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-09-18</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>2</TktNbr>
                  </TktDSSN>
               </TktID>
               <SaleType>UPGRADE</SaleType>
            </Ticket>
         </QueryEligibleProductsRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="b68a0caa-4e25-41ab-a351-bdb9d22c530f" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  QUERYELIGIBLEPRODUCT response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="584332a5-6595-4524-bffd-6647c5208b4e" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  QUERYELIGIBLEPRODUCT response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c6deba73-c64b-44af-9493-01fd532e24fc" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  QUERYELIGIBLEPRODUCT response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="281ff758-ac3c-4816-a0a1-03269ed637db" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  QUERYELIGIBLEPRODUCT response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Transfer Ticket details" id="47042176-ccc0-4fd1-a92c-6bdc2a84b61a"><con:settings/><con:config><script>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Get Product Code and price
def responseHolderProduct = groovyUtils.getXmlHolder("transmission - QueryEligibleProduct_Eligible#Response")


ProductCode= responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product[2]/ProdCode[1]"]
ProductPrice= responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product[2]/ProdPricing[1]/ProdNetPrice[1]"]

//To set Product code and price property Value
testRunner.testCase.setPropertyValue("ProductCode",ProductCode)
testRunner.testCase.setPropertyValue("ProductPrice",ProductPrice)

log.info "ProductPrice property is set to value: " +  ProductCode
log.info "ProductPrice property is set to value: " +  ProductPrice</script></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for UpgradeEntitlement_Installment" id="6bc4a3bd-24ef-4339-b95d-1b2a542343b3"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_ValidPaymentViaInstallment" id="1d933db4-0eb9-47ae-9099-84c525d2c45e" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_ValidPaymentViaInstallment" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>98:40:20.70</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>08:40:20.70</CmdTime>
            <CmdInvoice>3992016072900001</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-09-18</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>1</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>NWF2G</ProdCode>
               <ProdPrice>818.99</ProdPrice>
               <ProdDemoData>
                  <TktDemoData Zip="34747" Telephone="8185490789" State="FL" OptInSolicit="NO" LastName="Duck" Gender="M" FirstName="Donald" Email="1@disney.com" DateOfBirth="1982-06-01" Country="USA" City="Celebration" Addr1="5151 Buena Vista"/>
               </ProdDemoData>
               <UpgrdPrice>336.54</UpgrdPrice>
               <FromProdCode>GUX1C</FromProdCode>
               <FromPrice>482.45</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>4444855457062688</CCNbr>
                           <CCExpiration>1219</CCExpiration>
                           <CCName>Visa</CCName>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>336.54</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>${#TestCase#CurrentDate}</ResCreateDate>
               <ResPickupDate>${#TestCase#CurrentDate}</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>DTIAppUrl</con:name><con:value>https://dti-latest.disney.pvt/DTIApp/DTIApp</con:value></con:property><con:property><con:name>factor</con:name><con:value>72</con:value></con:property><con:property><con:name>counter</con:name><con:value>100000</con:value></con:property><con:property><con:name>Payload_ID</con:name><con:value>91120171026150902759</con:value></con:property><con:property><con:name>CurrentDate</con:name><con:value>2017-09-19</con:value></con:property><con:property><con:name>DTIInfoSysServlet</con:name><con:value>https://dti-latest.disney.pvt/DTIInfoSys/DTIInfoSysServlet</con:value></con:property><con:property><con:name>TktNId</con:name><con:value>10501619091700005</con:value></con:property><con:property><con:name>Basepath</con:name><con:value>/var/opt/apps/RT/schemas</con:value></con:property></con:properties></con:testCase><con:testCase id="922d67f0-c007-4533-97fb-44c8fb992fca" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SmokeTest_Ticket LifeCycleTest_WDW_QEP_InEligible" searchProperties="true"><con:settings/><con:testStep type="groovy" name="GeneratePayload" id="8b1c4fc5-b3b1-4221-84af-847230c9ad0c"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

testRunner.testCase.setPropertyValue("factor", String.valueOf(1))

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
//Extract First 20 character
Payload_ID = workString.substring(0,20)

sdf = new SimpleDateFormat("yyyy-MM-dd")
CurrentDate = sdf.format(date)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )
testRunner.testCase.setPropertyValue("CurrentDate",CurrentDate )

log.info "Payload_ID value is set to: " + Payload_ID 
log.info "CurrentDate value is set to: " + CurrentDate</script></con:config></con:testStep><con:testStep type="request" name="transmission - CreateTicket" id="8457393f-da0e-44bb-b52d-cf42d45c0c69"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - CreateTicket" id="7e01c872-0928-45a5-beb5-2c6b92871791"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/create_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>3.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>13:11:00</TransmitTime>
         <TktSeller>
            <TSMAC>MOBILEATS</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>MOBILEATSMK</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>13:11:00</CmdTime>
            <CmdInvoice>99920170117000088</CmdInvoice>
            <CmdDevice>CreTktReq</CmdDevice>
            <CmdOperator>DTICTR</CmdOperator>
         </CommandHeader>
         <CreateTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>2J001</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>211.94</ProdPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCManual>
                        <CCNbr>4444855457062688</CCNbr>
                        <CCExpiration>1219</CCExpiration>
                        <CCName>Visa</CCName>
                        <CCStreet>756 PARIS WAY</CCStreet>
                        <CCZipcode>76590</CCZipcode>
                     </CCManual>
                  </CreditCard>
               </PayType>
               <PayAmount>211.94</PayAmount>
            </Payment>
         </CreateTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="4d5fe6ff-afb4-4fdb-b851-c96155b6be24" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Create Ticket Resopnse
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="351b87be-5439-4d83-8087-3b54823b89fa" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of Create Ticket Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="72d37f8c-e8ee-4019-90b6-49e2f9d44378" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of Create Ticket Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="482a6895-499f-43cd-a0f3-fe52bf28bfe2" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of Create Ticket Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Transfer TktNID" id="45c9d27e-56da-4eaa-9eb3-fab42fd0c858"><con:settings/><con:config><script>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Get Ticket NIDs from multiple tickets
def responseHolderProduct = groovyUtils.getXmlHolder("transmission - CreateTicket#Response")
TktNID = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[1]/TktID[1]/TktNID[1]"]

//To set Product code and price property Value
testRunner.testCase.setPropertyValue("TktNID",TktNID)

log.info "TktNID property is set to value: " +  TktNID</script></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for QueryTicket" id="db014c99-cc89-4d9f-8f0b-b7e070af55a6"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - QueryTicket" id="fd28405c-6697-4ead-a60b-3d42a12c5d9f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - QueryTicket" id="6ac50131-5d74-452a-b554-8c8438ab0108"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/query_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>12:00:57.93</TransmitTime>
         <TktSeller>
            <TSMAC>AAA212P</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>026</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>120</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>12:00:57.93</CmdTime>
            <CmdInvoice>2012120260000128369</CmdInvoice>
            <CmdDevice>DENDRES</CmdDevice>
            <CmdOperator>DENDRES</CmdOperator>
            <CmdActor>MGR</CmdActor>
         </CommandHeader>
         <QueryTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktNID>${#TestCase#TktNId}</TktNID>
               </TktID>
            </Ticket>
         </QueryTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="f3a3bf8b-1436-45b8-bbe0-c715d001f0db" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of Query Ticket Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="55abd261-2cad-4655-a579-09bfb89233af" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of Query Ticket Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="064ebf49-55c4-4a5f-a3c3-947edb45dd69" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of Query Ticket Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1be9a042-22af-450f-b4f5-cb76abee4c08" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Query Ticket Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for QueryEligibleProduct" id="667e8947-41a0-41d9-a882-a0ec2f34438d"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - QueryEligibleProduct_InEligible" id="a3ae16d0-1422-4d26-893a-4c335cf7617e"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - QueryEligibleProduct_InEligible" id="8261e2a8-0a44-40ae-8121-efae812a641e"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/query_eligible_products_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>TEST-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>20:16:01.81</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>20:16:01.81</CmdTime>
            <CmdInvoice>36400000000000087500</CmdInvoice>
            <CmdDevice>172.17.0.3</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <QueryEligibleProductsRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktNID>${#TestCase#TktNId}</TktNID>
               </TktID>
               <SaleType>UPGRADE</SaleType>
            </Ticket>
         </QueryEligibleProductsRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="b68a0caa-4e25-41ab-a351-bdb9d22c530f" name="Headers Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  QueryEligibleProduct Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="584332a5-6595-4524-bffd-6647c5208b4e" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c6deba73-c64b-44af-9493-01fd532e24fc" name="String Validation - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  QUERYELIGIBLEPRODUCT Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="281ff758-ac3c-4816-a0a1-03269ed637db" name="Numeric Validation - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  QUERYELIGIBLEPRODUCT Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7370bedb-fb0f-4e84-89b0-dcc3a1662659" name="Script Assertion"><con:configuration><scriptText>
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Get Ticket NIDs from multiple tickets
def responseHolderProduct = groovyUtils.getXmlHolder("transmission - QueryEligibleProduct_InEligible#Response")
resultStatus = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/QueryEligibleProductsResponse[1]/Ticket[1]/ResultStatus[1]"]

//Asserting the collection
if (resultStatus == "INELIGIBLE")
{
	
	assert true //To mark the assertion passed
}
else
{
	
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for VoidTicket" id="f18d2949-189d-4bdb-92a5-e0dca7075968"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - VoidTicket" id="b416efeb-71d2-48e8-a025-5e6647633a16"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - VoidTicket" id="6b2e632e-7d7e-4a9d-803a-a297aa448117"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/void_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>11:56:39.58</TransmitTime>
         <TktSeller>
            <TSMAC>AAA212P</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>026</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>11:56:39.58</CmdTime>
            <CmdInvoice>2012120260000128369</CmdInvoice>
            <CmdDevice>DENDRES</CmdDevice>
            <CmdOperator>DENDRES</CmdOperator>
            <CmdActor>MGR</CmdActor>
         </CommandHeader>
         <VoidTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktNID>${#TestCase#TktNID}</TktNID>
               </TktID>
            </Ticket>
         </VoidTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="8abee21c-141a-4510-9641-e9443c72939b" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of Void Ticket Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2d41d5a4-0d49-4c72-ab5f-a77cb1ed2951" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Void Ticket Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f7918578-d083-44cf-b1ac-01ccb1da6fa6" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Void Ticket Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0d00be00-44e9-47d7-8039-f01032de32ad" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Void Ticket Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for Voided QueryTicket" id="436796d5-93c0-4b0f-af8e-21a425a6fdc6"><con:settings/><con:config><script>import java.text.SimpleDateFormat
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - QueryTicket after Void
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID)

log.info "Payload_ID value is set to: " + Payload_ID</script></con:config></con:testStep><con:testStep type="request" name="transmission - QueryTicket after Void" id="9c340e88-85f7-474f-b8aa-ba1143043352"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - QueryTicket after Void" id="ac0b9019-47dd-4cbf-9a9d-47b9ced8c1a3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/query_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>12:00:57.93</TransmitTime>
         <TktSeller>
            <TSMAC>AAA212P</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>026</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>120</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>12:00:57.93</CmdTime>
            <CmdInvoice>2012120260000128369</CmdInvoice>
            <CmdDevice>DENDRES</CmdDevice>
            <CmdOperator>DENDRES</CmdOperator>
            <CmdActor>MGR</CmdActor>
         </CommandHeader>
         <QueryTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktNID>${#TestCase#TktNId}</TktNID>
               </TktID>
            </Ticket>
         </QueryTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="e4df8828-5d99-4a7f-9a97-4229ea1d9b77" name="Headers Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Query Ticket Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="dadbab25-4ef2-451c-8284-9271a5a75925" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Query Ticket Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="af1d632a-05bf-4d5d-9028-7f1061956248" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Query Ticket Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a9bd0632-7864-4ee2-a2c2-2e1add91b384" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Query Ticket Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>DTIAppUrl</con:name><con:value>https://dti-latest.disney.pvt/DTIApp/DTIApp</con:value></con:property><con:property><con:name>factor</con:name><con:value>6</con:value></con:property><con:property><con:name>counter</con:name><con:value>100000</con:value></con:property><con:property><con:name>Payload_ID</con:name><con:value>91120171026150902104</con:value></con:property><con:property><con:name>CurrentDate</con:name><con:value>2017-10-26</con:value></con:property><con:property><con:name>DTIInfoSysServlet</con:name><con:value>https://dti-latest.disney.pvt/DTIInfoSys/DTIInfoSysServlet</con:value></con:property><con:property><con:name>TktNId</con:name><con:value>10501626101700032</con:value></con:property><con:property><con:name>Basepath</con:name><con:value>/var/opt/apps/RT/schemas</con:value></con:property></con:properties></con:testCase><con:testCase id="ffcff73f-3a63-4fe2-b0db-f94038b3b0a9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SmokeTest_WDW_UpgradeEntitlement_Invalid" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Generate Payload for UpgradeEntitlement" id="ca84cd86-01d6-494a-baf7-4e83e4e76cca"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_InvalidTarget" id="ce6dbacf-8749-498c-a9e3-6905a19f812b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_InvalidTarget" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>trf-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>98:40:20.70</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>08:40:20.70</CmdTime>
            <CmdInvoice>3992016072900001</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-09-18</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>1</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>NWF2G</ProdCode>
               <ProdPrice>818.99</ProdPrice>
               <ProdDemoData>
                  <TktDemoData Zip="34747" Telephone="8185490789" State="FL" OptInSolicit="NO" LastName="Duck" Gender="M" FirstName="Donald" Email="1@disney.com" DateOfBirth="1982-06-01" Country="USA" City="Celebration" Addr1="5151 Buena Vista"/>
               </ProdDemoData>
               <UpgrdPrice>336.54</UpgrdPrice>
               <FromProdCode>GUX1C</FromProdCode>
               <FromPrice>482.45</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>4444855457062688</CCNbr>
                           <CCExpiration>1219</CCExpiration>
                           <CCName>Visa</CCName>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>336.54</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>${#TestCase#CurrentDate}</ResCreateDate>
               <ResPickupDate>${#TestCase#CurrentDate}</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="26ca7710-07f2-4268-8d82-0af98c13f69b" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  UpgradeEntitlement response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Generate Payload for UpgradeEntitlement 1" id="b7b94770-5619-413e-aa2f-6d97c63702c0"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_InvalidDateFormat" id="695a0d68-230b-4b27-8dfa-6ac1b0ab9b0f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_InvalidDateFormat" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>212-212-212</TransmitDate>
         <TransmitTime>98:40:20.70</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>212-212-212</CmdDate>
            <CmdTime>08:40:20.70</CmdTime>
            <CmdInvoice>3992016072900001</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-09-18</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>1</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>NWF2G</ProdCode>
               <ProdPrice>818.99</ProdPrice>
               <ProdDemoData>
                  <TktDemoData Zip="34747" Telephone="8185490789" State="FL" OptInSolicit="NO" LastName="Duck" Gender="M" FirstName="Donald" Email="1@disney.com" DateOfBirth="1982-06-01" Country="USA" City="Celebration" Addr1="5151 Buena Vista"/>
               </ProdDemoData>
               <UpgrdPrice>336.54</UpgrdPrice>
               <FromProdCode>GUX1C</FromProdCode>
               <FromPrice>482.45</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>4444855457062688</CCNbr>
                           <CCExpiration>1219</CCExpiration>
                           <CCName>Visa</CCName>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>336.54</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>${#TestCase#CurrentDate}</ResCreateDate>
               <ResPickupDate>${#TestCase#CurrentDate}</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="79a23a3a-a924-4c3f-91c1-f745d0e86173" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  UpgradeEntitlement response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Generate Payload for UpgradeEntitlement 2" id="69f92aec-51d5-49a0-b9a8-ae4374c05f67"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_InvalidTimeFormat" id="156d7b91-e378-4f69-92e6-c90e7bcbd0ad"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_InvalidTimeFormat" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>123654</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>556449</CmdTime>
            <CmdInvoice>3992016072900001</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-09-18</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>1</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>NWF2G</ProdCode>
               <ProdPrice>818.99</ProdPrice>
               <ProdDemoData>
                  <TktDemoData Zip="34747" Telephone="8185490789" State="FL" OptInSolicit="NO" LastName="Duck" Gender="M" FirstName="Donald" Email="1@disney.com" DateOfBirth="1982-06-01" Country="USA" City="Celebration" Addr1="5151 Buena Vista"/>
               </ProdDemoData>
               <UpgrdPrice>336.54</UpgrdPrice>
               <FromProdCode>GUX1C</FromProdCode>
               <FromPrice>482.45</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>4444855457062688</CCNbr>
                           <CCExpiration>1219</CCExpiration>
                           <CCName>Visa</CCName>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>336.54</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>${#TestCase#CurrentDate}</ResCreateDate>
               <ResPickupDate>${#TestCase#CurrentDate}</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="96d47884-79d2-4bf3-82c4-4990dcfa3c50" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  UpgradeEntitlement response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Generate Payload for UpgradeEntitlement 3" id="a827df32-828a-4fda-b4ae-d3ebb04f96d3"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_InvalidTSMAC" id="fa6eff2d-2d83-46b4-9b01-8cfc32c14268"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_InvalidTSMAC" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2017-09-21</TransmitDate>
         <TransmitTime>12:40:20.70</TransmitTime>
         <TktSeller>
            <TSMAC>som</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2016-07-29</CmdDate>
            <CmdTime>08:40:20.70</CmdTime>
            <CmdInvoice>3992016072900001</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-09-19</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>16</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>5K002</ProdCode>
               <ProdPrice>473.93</ProdPrice>
               <UpgrdPrice>203.95</UpgrdPrice>
               <FromProdCode>4KF03</FromProdCode>
               <FromPrice>269.98</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>4444855457062688</CCNbr>
                           <CCExpiration>1219</CCExpiration>
                           <CCName>Visa</CCName>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>203.95</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>2017-08-09</ResCreateDate>
               <ResPickupDate>2017-08-09</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="c9a84acc-9941-4cbe-a6d8-4c9858cc53a0" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  UpgradeEntitlement response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Generate Payload for UpgradeEntitlement 4" id="a9f84a52-7d31-4427-8d77-a2b40736c4b1"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_InvalidTSLocation" id="219f9b61-65a7-41db-b57d-11d4feafee13"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_InvalidTSLocation" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2017-09-21</TransmitDate>
         <TransmitTime>12:40:20.70</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILEss</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2016-07-29</CmdDate>
            <CmdTime>08:40:20.70</CmdTime>
            <CmdInvoice>3992016072900001</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-09-19</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>16</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>5K002</ProdCode>
               <ProdPrice>473.93</ProdPrice>
               <UpgrdPrice>203.95</UpgrdPrice>
               <FromProdCode>4KF03</FromProdCode>
               <FromPrice>269.98</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>4444855457062688</CCNbr>
                           <CCExpiration>1219</CCExpiration>
                           <CCName>Visa</CCName>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>203.95</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>2017-08-09</ResCreateDate>
               <ResPickupDate>2017-08-09</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="b85ba5e2-fd04-4455-b5c2-c83d002c42df" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  UpgradeEntitlement response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Generate Payload for UpgradeEntitlement 5" id="4070c6b7-e986-4dfc-9492-c907516e4e49"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_InvalidTicketSite" id="c637b5e8-81a8-4a31-8468-a083d7662286"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_InvalidTicketSite" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2017-09-21</TransmitDate>
         <TransmitTime>12:40:20.70</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2016-07-29</CmdDate>
            <CmdTime>08:40:20.70</CmdTime>
            <CmdInvoice>3992016072900001</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-09-19</TktDate>
                     <TktSite>WAKa</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>16</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>5K002</ProdCode>
               <ProdPrice>473.93</ProdPrice>
               <UpgrdPrice>203.95</UpgrdPrice>
               <FromProdCode>4KF03</FromProdCode>
               <FromPrice>269.98</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>4444855457062688</CCNbr>
                           <CCExpiration>1219</CCExpiration>
                           <CCName>Visa</CCName>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>203.95</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>2017-08-09</ResCreateDate>
               <ResPickupDate>2017-08-09</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="c850848b-c361-407e-8e33-079fe262f714" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  UpgradeEntitlement response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Generate Payload for UpgradeEntitlement 6" id="08999fa1-fede-4839-8bf8-08b0198a0347"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_InvalidTicketStation" id="92006d93-292f-4ff0-8bec-6286d96e4722"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_InvalidTicketStation" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2017-09-21</TransmitDate>
         <TransmitTime>12:40:20.70</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2016-07-29</CmdDate>
            <CmdTime>08:40:20.70</CmdTime>
            <CmdInvoice>3992016072900001</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-09-19</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS123</TktStation>
                     <TktNbr>16</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>5K002</ProdCode>
               <ProdPrice>473.93</ProdPrice>
               <UpgrdPrice>203.95</UpgrdPrice>
               <FromProdCode>4KF03</FromProdCode>
               <FromPrice>269.98</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>4444855457062688</CCNbr>
                           <CCExpiration>1219</CCExpiration>
                           <CCName>Visa</CCName>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>203.95</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>2017-08-09</ResCreateDate>
               <ResPickupDate>2017-08-09</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="98ac8c49-50e0-47c0-ba7c-ad224d60997d" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  UpgradeEntitlement response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Generate Payload for UpgradeEntitlement 7" id="29573d2e-8c79-414c-9541-facaadf54e9d"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_InvalidTicketNumber" id="16c9cdf8-eb52-4c29-a5fc-9a17361f72ec"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_InvalidTicketNumber" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/schemas/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2017-09-21</TransmitDate>
         <TransmitTime>12:40:20.70</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2016-07-29</CmdDate>
            <CmdTime>08:40:20.70</CmdTime>
            <CmdInvoice>3992016072900001</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-09-19</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>76222m</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>5K002</ProdCode>
               <ProdPrice>473.93</ProdPrice>
               <UpgrdPrice>203.95</UpgrdPrice>
               <FromProdCode>4KF03</FromProdCode>
               <FromPrice>269.98</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>4444855457062688</CCNbr>
                           <CCExpiration>1219</CCExpiration>
                           <CCName>Visa</CCName>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>203.95</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>2017-08-09</ResCreateDate>
               <ResPickupDate>2017-08-09</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="dac475e0-83d6-4fd5-828f-a3b17135ed49" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of UpgradeEntitlement response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Generate Payload for UpgradeEntitlement 8" id="8f9b22b0-56b7-4964-b6be-3df53e78ae17"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_InvalidUpgradeToProductCode" id="701c56f1-78ba-4ae9-b7ae-dbd8eccf8913"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_InvalidUpgradeToProductCode" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2017-09-21</TransmitDate>
         <TransmitTime>12:40:20.70</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2016-07-29</CmdDate>
            <CmdTime>08:40:20.70</CmdTime>
            <CmdInvoice>3992016072900001</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-09-19</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>16</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>5KSD002</ProdCode>
               <ProdPrice>473.93</ProdPrice>
               <UpgrdPrice>203.95</UpgrdPrice>
               <FromProdCode>4KF03</FromProdCode>
               <FromPrice>269.98</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>4444855457062688</CCNbr>
                           <CCExpiration>1219</CCExpiration>
                           <CCName>Visa</CCName>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>203.95</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>2017-08-09</ResCreateDate>
               <ResPickupDate>2017-08-09</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="e09f4dd7-b5ae-419e-a1dc-d753a9774c37" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of UpgradeEntitlement response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Generate Payload for UpgradeEntitlement 9" id="58633a79-7df9-4ef2-8de4-088922c00ab8"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_InvalidUpgradeFromProductCode" id="17e4544a-80fa-4704-8d59-5bc644c18934"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_InvalidUpgradeFromProductCode" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2017-09-21</TransmitDate>
         <TransmitTime>12:40:20.70</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2016-07-29</CmdDate>
            <CmdTime>08:40:20.70</CmdTime>
            <CmdInvoice>3992016072900001</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-09-19</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>16</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>5K002</ProdCode>
               <ProdPrice>473.93</ProdPrice>
               <UpgrdPrice>203.95</UpgrdPrice>
               <FromProdCode>4KF3203</FromProdCode>
               <FromPrice>269.98</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>4444855457062688</CCNbr>
                           <CCExpiration>1219</CCExpiration>
                           <CCName>Visa</CCName>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>203.95</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>2017-08-09</ResCreateDate>
               <ResPickupDate>2017-08-09</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="924a61ce-8f73-43b0-a7b3-b052ec58cebd" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  UpgradeEntitlement response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Generate Payload for UpgradeEntitlement 10" id="a3fda425-27bb-4624-8d23-d7b5c33dcb74"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_InvalidUpgradeFromProductAmount" id="6ede8fc8-15bd-4ee6-b467-35a2eecc70ea"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_InvalidUpgradeFromProductAmount" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2017-09-21</TransmitDate>
         <TransmitTime>12:40:20.70</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2016-07-29</CmdDate>
            <CmdTime>08:40:20.70</CmdTime>
            <CmdInvoice>3992016072900001</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-09-19</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>16</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>5K002</ProdCode>
               <ProdPrice>473.93</ProdPrice>
               <UpgrdPrice>56.95</UpgrdPrice>
               <FromProdCode>4KF03</FromProdCode>
               <FromPrice>269.98</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>4444855457062688</CCNbr>
                           <CCExpiration>1219</CCExpiration>
                           <CCName>Visa</CCName>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>203.95</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>2017-08-09</ResCreateDate>
               <ResPickupDate>2017-08-09</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="0addca1a-fb1a-4386-81dc-57ef62dc8881" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of UpgradeEntitlement response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Generate Payload for UpgradeEntitlement 11" id="8c1b6cc8-3c7d-4757-b6b0-eecd6549a332"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_InvalidUpgradePrice" id="4d11f8d6-f46f-49f2-821b-df4ffbc64911"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_InvalidUpgradePrice" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2017-09-21</TransmitDate>
         <TransmitTime>12:40:20.70</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2016-07-29</CmdDate>
            <CmdTime>08:40:20.70</CmdTime>
            <CmdInvoice>3992016072900001</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-09-19</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>16</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>5K002</ProdCode>
               <ProdPrice>473.93</ProdPrice>
               <UpgrdPrice>203.95</UpgrdPrice>
               <FromProdCode>4KF03</FromProdCode>
               <FromPrice>654.98</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>4444855457062688</CCNbr>
                           <CCExpiration>1219</CCExpiration>
                           <CCName>Visa</CCName>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>203.95</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>2017-08-09</ResCreateDate>
               <ResPickupDate>2017-08-09</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="ba0f8bae-f539-4bf0-9739-a7c17c06e315" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  UpgradeEntitlement response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Generate Payload for UpgradeEntitlement 12" id="9b3d8302-a64d-4903-b891-b1c91ad7fa3e"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_InvalidPaymentAmount" id="f23f4b69-43bc-4bb5-afbd-01427fbfd5d9"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_InvalidPaymentAmount" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2017-09-21</TransmitDate>
         <TransmitTime>12:40:20.70</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2016-07-29</CmdDate>
            <CmdTime>08:40:20.70</CmdTime>
            <CmdInvoice>3992016072900001</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-09-19</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>16</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>5K002</ProdCode>
               <ProdPrice>473.93</ProdPrice>
               <UpgrdPrice>203.95</UpgrdPrice>
               <FromProdCode>4KF03</FromProdCode>
               <FromPrice>269.98</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>4444855457062688</CCNbr>
                           <CCExpiration>1219</CCExpiration>
                           <CCName>Visa</CCName>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>2053.95</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>2017-08-09</ResCreateDate>
               <ResPickupDate>2017-08-09</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="0e7dccfa-8cf5-4635-a9c8-0ae3724aceba" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of UpgradeEntitlement response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>DTIAppUrl</con:name><con:value>https://dti-latest.disney.pvt/DTIApp/DTIApp</con:value></con:property><con:property><con:name>factor</con:name><con:value>293</con:value></con:property><con:property><con:name>counter</con:name><con:value>100000</con:value></con:property><con:property><con:name>Payload_ID</con:name><con:value>91120171026150904976</con:value></con:property><con:property><con:name>CurrentDate</con:name><con:value>2017-09-19</con:value></con:property><con:property><con:name>DTIInfoSysServlet</con:name><con:value>https://dti-latest.disney.pvt/DTIInfoSys/DTIInfoSysServlet</con:value></con:property><con:property><con:name>TktNId</con:name><con:value>10501619091700005</con:value></con:property><con:property><con:name>Basepath</con:name><con:value>/var/opt/apps/RT/schemas</con:value></con:property></con:properties></con:testCase><con:testCase id="09a47949-d236-44f4-9406-24a240442273" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SmokeTest_CreateReservation TestCase_S-316424" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DataBaseScript" id="bb825cd4-5e9d-4479-bc1e-570a24b51050"><con:settings/><con:config><script>import groovy.sql.Sql
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.OracleDriver" )
def url = 'jdbc:oracle:thin:@(description=(address=(host=lnxu002dva-scan.wdw.disney.com)(protocol=tcp)(port=1541))(connect_data=(service_name=dtis1svc.wdw.disney.com)))'
def user = 'dti_gateway'
def password = 'TARD1S09'
def driver = 'oracle.jdbc.driver.OracleDriver'
def sql = Sql.newInstance(url, user, password, driver)
//==================================
//Query to get the sold out product code
def result = sql.firstRow("select PDT_CODE from DTI_PRODUCT where ACTIVE_IND ='T' and sold_out is not null and rownum =1")
soldOut="${result.PDT_CODE}"
testRunner.testCase.setPropertyValue("soldOut",soldOut.toString() )
log.info "SoldOut product code is :"+soldOut
//==================================
//Query to get the not permited producr code
def PDT_CODE = sql.firstRow(" select  pdt_code from DTI_PRODUCT where ROWNUM = 1")
def product = "${PDT_CODE.pdt_code}"
testRunner.testCase.setPropertyValue("PDT_CODE",product.toString() )
log.info "Not permitted product code is :"+product
//==================================
//Query to get the inactive entity
def ENTITY = sql.firstRow("select ENTITY_CODE from TICKET_SELLER_ENTITY where ACTIVE_IND='F'  and  rownum=1")
def ENTITY_CODE = "${ENTITY.ENTITY_CODE}"
log.info "Inactive entity found as :"+ENTITY_CODE 
testRunner.testCase.setPropertyValue("ENTITY_CODE",ENTITY_CODE.toString() )
//==================================

//Query to get the prodcut code expired future variant
def codeResult = sql.firstRow("select PDT_CODE from DTI_Product where START_SALE_DATE > current_timestamp and rownum =1")
def productCodeExpiredFuture = "${codeResult.PDT_CODE}"
log.info "Product code expired future  :"+productCodeExpiredFuture 

testRunner.testCase.setPropertyValue("PRODUCT_EXPIRED_FUTURE",productCodeExpiredFuture.toString() )
//==================================
//Query to get the prodcut code expired past variant
def productCodeExpired = sql.firstRow("select PDT_CODE from DTI_Product where  END_SALE_DATE &lt; current_timestamp and rownum =1")
def productCodeExpiredPast = "${productCodeExpired.PDT_CODE}"
log.info "Product code expired past  :"+productCodeExpiredPast 
testRunner.testCase.setPropertyValue("PRODUCT_EXPIRED_PAST",productCodeExpiredPast.toString() )

//==================================
//Query to get the prodcut unavailable
def productUnavailable = sql.firstRow("select PDT_CODE from DTI_PRODUCT where ACTIVE_IND ='F' and rownum = 1")
def productCodeUnavailable = "${productUnavailable.PDT_CODE}"
log.info "Product code unavailable  :"+productCodeUnavailable 
testRunner.testCase.setPropertyValue("PRODUCT_UNAVAILABLE",productCodeUnavailable.toString() )


//==================================
//Query to get Entity valid start date and Time
def validEntityDateTime = sql.firstRow("select count(*) as numberOfRows from ticket_seller_entity where sysdate >= START_VALID_DATE and sysdate &lt;= END_VALID_DATE and to_char(current_timestamp at time zone 'GMT', 'HH24:MI') &lt;= START_VALID_TIME and to_char(current_timestamp at time zone 'GMT', 'HH24:MI') >= END_VALID_TIME and ENTITY_CODE='PROGENSTR'and ownerid='WDW'")
def entityDateTime = "${validEntityDateTime.numberOfRows}"
log.info "entityDateTime ...  :"+entityDateTime 
testRunner.testCase.setPropertyValue("ENTITY_DATE_TIME",entityDateTime.toString() )
sql.close()</script></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload_For_Product Catalog" id="42f9b605-22ae-4b18-9d22-f70be23f9eb3"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

testRunner.testCase.setPropertyValue("factor", String.valueOf(1))

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
//Extract First 20 character
Payload_ID = workString.substring(0,20)

sdf = new SimpleDateFormat("yyyy-MM-dd")
CurrentDate = sdf.format(date)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )
testRunner.testCase.setPropertyValue("CurrentDate",CurrentDate )

log.info "Payload_ID value is set to: " + Payload_ID 
log.info "CurrentDate value is set to: " + CurrentDate</script></con:config></con:testStep><con:testStep type="request" id="552e643c-95e2-436e-b9b7-a4721fd6d5ed" name="transmission - InfoSys BRAVO Product Catalog"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - InfoSys BRAVO Product Catalog" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="c4a4fb7e-231a-47c9-b4b7-68737429c445"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dti-latest.disney.pvt/DTIInfoSys/DTIInfoSysServlet</con:endpoint><con:request><![CDATA[<ProductCatalogRQ xsi:noNamespaceSchemaLocation="\var\opt\apps\RT\schemas\dtiinfosys.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <PayloadHeader>\r
      <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
      <Target>Test-WDW</Target>\r
      <Version>1.0</Version>\r
      <Comm>\r
         <Protocol>IP</Protocol>\r
         <Method>Network</Method>\r
      </Comm>\r
      <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>\r
      <TransmitTime>08:29:34.374</TransmitTime>\r
   </PayloadHeader>\r
   <CommandHeader>\r
      <CmdTimeout>30</CmdTimeout>\r
      <CmdRequestor>\r
         <TSMAC>WDPRONAWDW</TSMAC>\r
         <TSLocation>PROGENSTR</TSLocation>\r
         <CmdOperator>Bob</CmdOperator>\r
         <CmdActor>DVR</CmdActor>\r
      </CmdRequestor>\r
   </CommandHeader>\r
   <CommandBody>\r
      <ProviderType>Walt Disney World</ProviderType>\r
      <TSMAC>WDPRONAWDW</TSMAC>\r
      <TSLocation>PROGENSTR</TSLocation>\r
      <IncludeSoldOut>true</IncludeSoldOut>\r
      <OnSaleStartDate>2005-01-31</OnSaleStartDate>\r
      <SkipResponses>1</SkipResponses>\r
      <IncludeCalendarDetail>true</IncludeCalendarDetail>\r
   </CommandBody>\r
</ProductCatalogRQ>]]></con:request><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Element existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath + "\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * assertion to validate the String existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayloadFor_21Product" id="a58c4a15-7581-454e-b681-c6664bab0f9b"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="groovy" name="Transfer_ProductCode" id="0bf0dcb6-548a-4b6d-a049-e3f86a154936"><con:settings/><con:config><script><![CDATA[import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Get Product Code and price
def responseHolderProduct = groovyUtils.getXmlHolder("transmission - InfoSys BRAVO Product Catalog#Response")
def tickets =''
float price
def productName
def productNamePrice
for (int i = 1; i<=20; i++) {
productCode = responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product["+i+"]/ProdCode[1]"]
productPrice = responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product["+i+"]/ProdPricing[1]/ProdNetPrice[1]"]
tickets = tickets + "<Ticket> <TktItem>"+i+"</TktItem><ProdCode>"+productCode+"</ProdCode><ProdQty>1</ProdQty><ProdPrice>"+productPrice+"</ProdPrice></Ticket>"
log.info "product code is " +productCode

float newPrice = Float.parseFloat(productPrice);
price = (price+newPrice).round(2)
productName = productCode
productNamePrice = productPrice
}

//log.info "price" +price
log.info "price final" +price
testRunner.testCase.setPropertyValue("tickets",tickets.toString())
testRunner.testCase.setPropertyValue("price",price.toString())

testRunner.testCase.setPropertyValue("productName",productName.toString())
testRunner.testCase.setPropertyValue("productPrice",productPrice.toString())
log.info "Product Price" + productPrice
log.info "Product Code" + productCode.toString()
log.info "tickets property is set to value: " + tickets.toString()
]]></script></con:config></con:testStep><con:testStep type="request" name="transmission -CreateReservation_21_Product" id="2bc12678-f53c-4ed1-8a5f-5d68ee6a7246"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -CreateReservation_21_Product" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <Payload>\r
      <PayloadHeader>\r
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
         <Target>Test</Target>\r
         <Version>1.0</Version>\r
         <Comm>\r
            <Protocol>IP</Protocol>\r
            <Method>Network</Method>\r
         </Comm>\r
         <TransmitDate>2017-10-02</TransmitDate>\r
         <TransmitTime>15:34:23.60</TransmitTime>\r
         <TktSeller>\r
            <TSMAC>WDPRONAWDW</TSMAC>\r
            <TSSystem>CC</TSSystem>\r
            <TSLocation>PROGENSTR</TSLocation>\r
            <TSSecurity>WaltDisney1</TSSecurity>\r
         </TktSeller>\r
         <CommandCount>1</CommandCount>\r
      </PayloadHeader>\r
      <Command>\r
         <CommandHeader>\r
            <CmdItem>1</CmdItem>\r
            <CmdTimeout>45</CmdTimeout>\r
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>\r
            <CmdTime>15:34:23.61</CmdTime>\r
            <CmdInvoice>00000010002414977</CmdInvoice>\r
            <CmdDevice>127.0.0.1</CmdDevice>\r
            <CmdOperator>WDPRO</CmdOperator>\r
         </CommandHeader>\r
         <ReservationRequest>\r
            <RequestType>Create</RequestType>\r
            ${#TestCase#tickets}\r
            <Ticket>
               <TktItem>21</TktItem>
               <ProdCode>MC004</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>0.00</ProdPrice>
            </Ticket>
            <Payment>\r
               <PayItem>1</PayItem>\r
               <PayType>\r
                  <CreditCard>
                     <CCManual>
                        <CCNbr>4444855457062688</CCNbr>
                        <CCExpiration>1219</CCExpiration>
                        <CCVV>529</CCVV>
                        <CCName>Jame Bo</CCName>
                        <CCStreet>756 PARIS WAY</CCStreet>
                        <CCZipcode>76590</CCZipcode>
                        <CCType>DS</CCType>
                     </CCManual>
                  </CreditCard>
               </PayType>\r
               <PayAmount>${#TestCase#price}</PayAmount>\r
            </Payment>\r
            <Reservation>\r
               <ResCreateDate>${#TestCase#CurrentDate}</ResCreateDate>\r
               <ResPickupDate>${#TestCase#CurrentDate}</ResPickupDate>\r
               <ResPickupArea>MailOrder</ResPickupArea>\r
               <ResSalesType>MailOrder</ResSalesType>\r
            </Reservation>\r
            <ClientData>\r
               <ClientType>Private</ClientType>\r
               <ClientCategory>WW</ClientCategory>\r
               <DemoLanguage>en</DemoLanguage>\r
               <DemoData>\r
                  <Bill Addr1="3000 184th Street So" City="Lynnwood" Country="US" Email="pratsenv1202@ngetestmail.com" FirstName="Pratsenvotot" LastName="Test" Name="Pratsenvotot Test" State="WA" Telephone="4252837255" Zip="98037"/>\r
                  <Ship Email="pratsenv1202@ngetestmail.com" Name="" Telephone="4252837255"/>\r
               </DemoData>\r
            </ClientData>\r
            <EntitlementAccount>\r
               <SpecifiedAccount>\r
                  <AccountItem>1</AccountItem>\r
                  <NewAccount>\r
                     <ExternalReferenceType>SWID</ExternalReferenceType>\r
                     <ExternalReferenceValue>{ABF4A795-1851-4F61-B5CF-69FC5721F383}</ExternalReferenceValue>\r
                  </NewAccount>\r
                  <AccountDemoData FirstName="Pratsenvotot"/>\r
               </SpecifiedAccount>\r
            </EntitlementAccount>\r
         </ReservationRequest>\r
      </Command>\r
   </Payload>\r
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="4fc708e0-86a7-4be2-b9c2-19dd7357be56" name="Headers Existence - Script Assertion"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" id="66f2668e-e7f0-4647-a961-c56aabc6f970" name="XPath Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="89df7b79-fcca-4141-afb9-6a9c1feeeca2" name="String Validation - Script Assertion"><con:configuration><scriptText/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="119023fd-c289-460f-a1ca-b5315e780adb" name="Numeric Validation - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayloadFor_20Product" id="80f25397-622b-4477-a0ad-a7c09a6bd043"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="groovy" name="Transfer_ProductCode_For_20_Product" id="7eb89a6e-0ed0-40de-95e8-f22141e1dc1e"><con:settings/><con:config><script><![CDATA[import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Get Product Code and price
def responseHolderProduct = groovyUtils.getXmlHolder("transmission - InfoSys BRAVO Product Catalog#Response")
def tickets =''
float price = 0

for (int i = 1; i<20; i++) {
productCode = responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product["+i+"]/ProdCode[1]"]
productPrice = responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product["+i+"]/ProdPricing[1]/ProdNetPrice[1]"]
tickets = tickets + "<Ticket> <TktItem>"+i+"</TktItem><ProdCode>"+productCode+"</ProdCode><ProdQty>1</ProdQty><ProdPrice>"+productPrice+"</ProdPrice></Ticket>"

price = (price+Float.parseFloat(productPrice)).round(2)
}
log.info "price" +price
//To set Product code and price property Value

testRunner.testCase.setPropertyValue("tickets",tickets.toString())
testRunner.testCase.setPropertyValue("price",price.toString())
log.info "Product Code" + productCode.toString()
log.info "tickets property is set to value: " + tickets.toString()
]]></script></con:config></con:testStep><con:testStep type="request" name="transmission -CreateReservation_20_Product" id="125c1558-67f8-42ec-a4d2-4f007e8bc473"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -CreateReservation_20_Product" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <Payload>\r
      <PayloadHeader>\r
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
         <Target>Test</Target>\r
         <Version>1.0</Version>\r
         <Comm>\r
            <Protocol>IP</Protocol>\r
            <Method>Network</Method>\r
         </Comm>\r
         <TransmitDate>2017-10-02</TransmitDate>\r
         <TransmitTime>15:34:23.60</TransmitTime>\r
         <TktSeller>\r
            <TSMAC>WDPRONAWDW</TSMAC>\r
            <TSSystem>CC</TSSystem>\r
            <TSLocation>PROGENSTR</TSLocation>\r
            <TSSecurity>WaltDisney1</TSSecurity>\r
         </TktSeller>\r
         <CommandCount>1</CommandCount>\r
      </PayloadHeader>\r
      <Command>\r
         <CommandHeader>\r
            <CmdItem>1</CmdItem>\r
            <CmdTimeout>45</CmdTimeout>\r
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>\r
            <CmdTime>15:34:23.61</CmdTime>\r
            <CmdInvoice>00000010002414977</CmdInvoice>\r
            <CmdDevice>127.0.0.1</CmdDevice>\r
            <CmdOperator>WDPRO</CmdOperator>\r
         </CommandHeader>\r
         <ReservationRequest>\r
            <RequestType>Create</RequestType>\r
            ${#TestCase#tickets}\r
            <Ticket>
               <TktItem>20</TktItem>
               <ProdCode>MC004</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>0.00</ProdPrice>
            </Ticket>
            <Payment>\r
               <PayItem>1</PayItem>\r
               <PayType>\r
                 <CreditCard>
                     <CCManual>
                        <CCNbr>4444855457062688</CCNbr>
                        <CCExpiration>1219</CCExpiration>
                        <CCVV>529</CCVV>
                        <CCName>Jame Bo</CCName>
                        <CCStreet>756 PARIS WAY</CCStreet>
                        <CCZipcode>76590</CCZipcode>
                        <CCType>DS</CCType>
                     </CCManual>
                  </CreditCard>
               </PayType>\r
               <PayAmount>${#TestCase#price}</PayAmount>\r
            </Payment>\r
            <Reservation>\r
               <ResCreateDate>${#TestCase#CurrentDate}</ResCreateDate>\r
               <ResPickupDate>${#TestCase#CurrentDate}</ResPickupDate>\r
               <ResPickupArea>MailOrder</ResPickupArea>\r
               <ResSalesType>MailOrder</ResSalesType>\r
            </Reservation>\r
            <ClientData>\r
               <ClientType>Private</ClientType>\r
               <ClientCategory>WW</ClientCategory>\r
               <DemoLanguage>en</DemoLanguage>\r
               <DemoData>\r
                  <Bill Addr1="3000 184th Street So" City="Lynnwood" Country="US" Email="pratsenv1202@ngetestmail.com" FirstName="Pratsenvotot" LastName="Test" Name="Pratsenvotot Test" State="WA" Telephone="4252837255" Zip="98037"/>\r
                  <Ship Email="pratsenv1202@ngetestmail.com" Name="" Telephone="4252837255"/>\r
               </DemoData>\r
            </ClientData>\r
            <EntitlementAccount>\r
               <SpecifiedAccount>\r
                  <AccountItem>1</AccountItem>\r
                  <NewAccount>\r
                     <ExternalReferenceType>SWID</ExternalReferenceType>\r
                     <ExternalReferenceValue>{ABF4A795-1851-4F61-B5CF-69FC5721F383}</ExternalReferenceValue>\r
                  </NewAccount>\r
                  <AccountDemoData FirstName="Pratsenvotot"/>\r
               </SpecifiedAccount>\r
            </EntitlementAccount>\r
         </ReservationRequest>\r
      </Command>\r
   </Payload>\r
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="d722b2c7-86fb-440e-8080-5b8deb82e98f" name="Headers Existence - Script Assertion"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" id="66f2668e-e7f0-4647-a961-c56aabc6f970" name="XPath Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="267355c6-0ce0-4b2f-8e19-d3d61ceef51e" name="String Validation - Script Assertion"><con:configuration><scriptText/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0bd3b1f9-9733-45ec-ae2a-800d3f48ead0" name="Numeric Validation - Script Assertion"><con:configuration/></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for ProductNotPermitted" id="2bfce30d-629f-4035-9481-0fb57afe7d83"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -CreateReservation_ProductNotPermitted" id="3cbcb9ad-8158-48b8-afe6-4fac97c60177"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -CreateReservation_ProductNotPermitted" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <Payload>\r
      <PayloadHeader>\r
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
         <Target>Test</Target>\r
         <Version>1.0</Version>\r
         <Comm>\r
            <Protocol>IP</Protocol>\r
            <Method>Network</Method>\r
         </Comm>\r
         <TransmitDate>2017-10-13</TransmitDate>\r
         <TransmitTime>15:34:23.60</TransmitTime>\r
         <TktSeller>\r
            <TSMAC>WDPRONAWDW</TSMAC>\r
            <TSSystem>CC</TSSystem>\r
            <TSLocation>PROGENSTR</TSLocation>\r
            <TSSecurity>WaltDisney1</TSSecurity>\r
         </TktSeller>\r
         <CommandCount>1</CommandCount>\r
      </PayloadHeader>\r
      <Command>\r
         <CommandHeader>\r
            <CmdItem>1</CmdItem>\r
            <CmdTimeout>45</CmdTimeout>\r
            <CmdDate>2017-10-13</CmdDate>\r
            <CmdTime>15:34:23.61</CmdTime>\r
            <CmdInvoice>00000010002414977</CmdInvoice>\r
            <CmdDevice>127.0.0.1</CmdDevice>\r
            <CmdOperator>WDPRO</CmdOperator>\r
         </CommandHeader>\r
         <ReservationRequest>\r
            <RequestType>Create</RequestType>\r
            <Ticket>\r
               <TktItem>1</TktItem>\r
               <ProdCode>${#TestCase#PDT_CODE}</ProdCode>\r
               <ProdQty>1</ProdQty>\r
               <ProdPrice>199.00</ProdPrice>\r
            </Ticket>\r
           <Ticket>
               <TktItem>2</TktItem>
               <ProdCode>MC004</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>0.00</ProdPrice>
            </Ticket>
            <Payment>\r
               <PayItem>1</PayItem>\r
               <PayType>\r
                  <CreditCard>\r
                     <CCManual>\r
                        <CCNbr>ZZZZZZZZZZZZ0212</CCNbr>\r
                        <CCExpiration>1218</CCExpiration>\r
                        <CCVV>ZZZ</CCVV>\r
                        <CCName>Pratsenvotot Test</CCName>\r
                        <CCStreet>3000 184th Street So</CCStreet>\r
                        <CCZipcode>98037</CCZipcode>\r
                        <CCType>DS</CCType>\r
                     </CCManual>\r
                  </CreditCard>\r
               </PayType>\r
               <PayAmount>199.0</PayAmount>\r
            </Payment>\r
            <Reservation>\r
               <ResCreateDate>2017-10-13</ResCreateDate>\r
               <ResPickupDate>2017-10-13</ResPickupDate>\r
               <ResPickupArea>MailOrder</ResPickupArea>\r
               <ResSalesType>MailOrder</ResSalesType>\r
            </Reservation>\r
            <ClientData>\r
               <ClientType>Private</ClientType>\r
               <ClientCategory>WW</ClientCategory>\r
               <DemoLanguage>en</DemoLanguage>\r
               <DemoData>\r
                  <Bill Addr1="3000 184th Street So" City="Lynnwood" Country="US" Email="pratsenv1202@ngetestmail.com" FirstName="Pratsenvotot" LastName="Test" Name="Pratsenvotot Test" State="WA" Telephone="4252837255" Zip="98037"/>\r
                  <Ship Email="pratsenv1202@ngetestmail.com" Name="" Telephone="4252837255"/>\r
               </DemoData>\r
            </ClientData>\r
            <EntitlementAccount>\r
               <SpecifiedAccount>\r
                  <AccountItem>1</AccountItem>\r
                  <NewAccount>\r
                     <ExternalReferenceType>SWID</ExternalReferenceType>\r
                     <ExternalReferenceValue>{ABF4A795-1851-4F61-B5CF-69FC5721F383}</ExternalReferenceValue>\r
                  </NewAccount>\r
                  <AccountDemoData FirstName="Pratsenvotot"/>\r
               </SpecifiedAccount>\r
            </EntitlementAccount>\r
         </ReservationRequest>\r
      </Command>\r
   </Payload>\r
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="fe67b68b-a253-49f1-a9eb-16fba206ad5f" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="66f2668e-e7f0-4647-a961-c56aabc6f970" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="fbcabfba-2c2c-4bf8-9282-b2003f5097ca" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="51719428-6b09-465c-8826-758bba9d58d5" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ab283392-bc43-4f7b-b129-4811134c5a8a" name="ProductNotPermited"><con:configuration/></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for InvalidEntity" id="aa3df513-3713-4feb-9bf8-022ba0b8f421"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -CreateReservation_InvalidEntity" id="a3ac8141-2807-4f0d-b56f-5eaa8cca7f93"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -CreateReservation_InvalidEntity" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <Payload>\r
      <PayloadHeader>\r
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
         <Target>Test</Target>\r
         <Version>1.0</Version>\r
         <Comm>\r
            <Protocol>IP</Protocol>\r
            <Method>Network</Method>\r
         </Comm>\r
         <TransmitDate>2017-10-02</TransmitDate>\r
         <TransmitTime>15:34:23.60</TransmitTime>\r
         <TktSeller>\r
            <TSMAC></TSMAC>\r
            <TSSystem>CC</TSSystem>\r
            <TSLocation>PRO_</TSLocation>\r
            <TSSecurity>WaltDisney1</TSSecurity>\r
         </TktSeller>\r
         <CommandCount>1</CommandCount>\r
      </PayloadHeader>\r
      <Command>\r
         <CommandHeader>\r
            <CmdItem>1</CmdItem>\r
            <CmdTimeout>45</CmdTimeout>\r
            <CmdDate>2017-10-02</CmdDate>\r
            <CmdTime>15:34:23.61</CmdTime>\r
            <CmdInvoice>00000010002414977</CmdInvoice>\r
            <CmdDevice>127.0.0.1</CmdDevice>\r
            <CmdOperator>WDPRO</CmdOperator>\r
         </CommandHeader>\r
         <ReservationRequest>\r
            <RequestType>Create</RequestType>\r
            <Ticket>\r
               <TktItem>1</TktItem>\r
               <ProdCode>WHE51</ProdCode>\r
               <ProdQty>1</ProdQty>\r
               <ProdPrice>199.00</ProdPrice>\r
               <TktAssignment>\r
                  <AccountItem>1</AccountItem>\r
                  <ProdQty>1</ProdQty>\r
               </TktAssignment>\r
            </Ticket>\r
            <Ticket>\r
               <TktItem>2</TktItem>\r
               <ProdCode>M0108</ProdCode>\r
               <ProdQty>1</ProdQty>\r
               <ProdPrice>0.00</ProdPrice>\r
            </Ticket>\r
            <Payment>\r
               <PayItem>1</PayItem>\r
               <PayType>\r
                  <CreditCard>\r
                     <CCManual>\r
                        <CCNbr>ZZZZZZZZZZZZ0212</CCNbr>\r
                        <CCExpiration>1218</CCExpiration>\r
                        <CCVV>ZZZ</CCVV>\r
                        <CCName>Pratsenvotot Test</CCName>\r
                        <CCStreet>3000 184th Street So</CCStreet>\r
                        <CCZipcode>98037</CCZipcode>\r
                        <CCType>DS</CCType>\r
                     </CCManual>\r
                  </CreditCard>\r
               </PayType>\r
               <PayAmount>199.0</PayAmount>\r
            </Payment>\r
            <Reservation>\r
               <ResCreateDate>2017-10-02</ResCreateDate>\r
               <ResPickupDate>2017-10-02</ResPickupDate>\r
               <ResPickupArea>MailOrder</ResPickupArea>\r
               <ResSalesType>MailOrder</ResSalesType>\r
            </Reservation>\r
            <ClientData>\r
               <ClientType>Private</ClientType>\r
               <ClientCategory>WW</ClientCategory>\r
               <DemoLanguage>en</DemoLanguage>\r
               <DemoData>\r
                  <Bill Addr1="3000 184th Street So" City="Lynnwood" Country="US" Email="pratsenv1202@ngetestmail.com" FirstName="Pratsenvotot" LastName="Test" Name="Pratsenvotot Test" State="WA" Telephone="4252837255" Zip="98037"/>\r
                  <Ship Email="pratsenv1202@ngetestmail.com" Name="" Telephone="4252837255"/>\r
               </DemoData>\r
            </ClientData>\r
            <EntitlementAccount>\r
               <SpecifiedAccount>\r
                  <AccountItem>1</AccountItem>\r
                  <NewAccount>\r
                     <ExternalReferenceType>SWID</ExternalReferenceType>\r
                     <ExternalReferenceValue>{ABF4A795-1851-4F61-B5CF-69FC5721F383}</ExternalReferenceValue>\r
                  </NewAccount>\r
                  <AccountDemoData FirstName="Pratsenvotot"/>\r
               </SpecifiedAccount>\r
            </EntitlementAccount>\r
         </ReservationRequest>\r
      </Command>\r
   </Payload>\r
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="9563b41f-2386-4b62-aedd-c9eedd5123a3" name="Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="05d658ef-e33b-46d9-8db5-10abecfef52c" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ff6a853e-6b38-452f-8cc5-bf6c991d3dd3" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="3d293acb-a176-4b63-940c-adc6fe8d0daa" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7172b811-ee80-4efe-aaf9-2e86cc85907c" name="InvalidEntity"><con:configuration><scriptText>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def testCase = messageExchange.modelItem.testCase;
def responseHolderProduct = groovyUtils.getXmlHolder("transmission -CreateReservation_InvalidEntity#Response")
 message = responseHolderProduct["//Transmission[1]/Payload[1]/PayloadHeader[1]/PayloadError[1]/HdrErrorText[1]"]
testCase.setPropertyValue("entity",message)
if(message =='Invalid Entity')
{
assert true
}
else
{
assert false
}
log.info "InvalidEntity : " + message
</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for EntityNotActive" id="59e5fbda-ff0b-49b4-900a-71f602f586ca"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -CreateReservation_EntityNotActive" id="eb39b50c-acb0-46d7-9a7d-fd16fb18ba9c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -CreateReservation_EntityNotActive" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <Payload>\r
      <PayloadHeader>\r
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
         <Target>Test</Target>\r
         <Version>1.0</Version>\r
         <Comm>\r
            <Protocol>IP</Protocol>\r
            <Method>Network</Method>\r
         </Comm>\r
         <TransmitDate>2017-10-02</TransmitDate>\r
         <TransmitTime>15:34:23.60</TransmitTime>\r
         <TktSeller>\r
            <TSMAC>A12345678</TSMAC>\r
            <TSSystem>CC</TSSystem>\r
            <TSLocation>PROGENSTR</TSLocation>\r
            <TSSecurity>WaltDisney1</TSSecurity>\r
         </TktSeller>\r
         <CommandCount>1</CommandCount>\r
      </PayloadHeader>\r
      <Command>\r
         <CommandHeader>\r
            <CmdItem>1</CmdItem>\r
            <CmdTimeout>45</CmdTimeout>\r
            <CmdDate>2017-10-02</CmdDate>\r
            <CmdTime>15:34:23.61</CmdTime>\r
            <CmdInvoice>00000010002414977</CmdInvoice>\r
            <CmdDevice>127.0.0.1</CmdDevice>\r
            <CmdOperator>WDPRO</CmdOperator>\r
         </CommandHeader>\r
         <ReservationRequest>\r
            <RequestType>Create</RequestType>\r
            <Ticket>\r
               <TktItem>1</TktItem>\r
               <ProdCode>${#TestCase#ENTITY_CODE}</ProdCode>\r
               <ProdQty>1</ProdQty>\r
               <ProdPrice>199.00</ProdPrice>\r
               <TktAssignment>\r
                  <AccountItem>1</AccountItem>\r
                  <ProdQty>1</ProdQty>\r
               </TktAssignment>\r
            </Ticket>\r
            <Ticket>\r
               <TktItem>2</TktItem>\r
               <ProdCode>M0108</ProdCode>\r
               <ProdQty>1</ProdQty>\r
               <ProdPrice>0.00</ProdPrice>\r
            </Ticket>\r
            <Payment>\r
               <PayItem>1</PayItem>\r
               <PayType>\r
                  <CreditCard>\r
                     <CCManual>\r
                        <CCNbr>ZZZZZZZZZZZZ0212</CCNbr>\r
                        <CCExpiration>1218</CCExpiration>\r
                        <CCVV>ZZZ</CCVV>\r
                        <CCName>Pratsenvotot Test</CCName>\r
                        <CCStreet>3000 184th Street So</CCStreet>\r
                        <CCZipcode>98037</CCZipcode>\r
                        <CCType>DS</CCType>\r
                     </CCManual>\r
                  </CreditCard>\r
               </PayType>\r
               <PayAmount>199.0</PayAmount>\r
            </Payment>\r
            <Reservation>\r
               <ResCreateDate>2017-10-02</ResCreateDate>\r
               <ResPickupDate>2017-10-02</ResPickupDate>\r
               <ResPickupArea>MailOrder</ResPickupArea>\r
               <ResSalesType>MailOrder</ResSalesType>\r
            </Reservation>\r
            <ClientData>\r
               <ClientType>Private</ClientType>\r
               <ClientCategory>WW</ClientCategory>\r
               <DemoLanguage>en</DemoLanguage>\r
               <DemoData>\r
                  <Bill Addr1="3000 184th Street So" City="Lynnwood" Country="US" Email="pratsenv1202@ngetestmail.com" FirstName="Pratsenvotot" LastName="Test" Name="Pratsenvotot Test" State="WA" Telephone="4252837255" Zip="98037"/>\r
                  <Ship Email="pratsenv1202@ngetestmail.com" Name="" Telephone="4252837255"/>\r
               </DemoData>\r
            </ClientData>\r
            <EntitlementAccount>\r
               <SpecifiedAccount>\r
                  <AccountItem>1</AccountItem>\r
                  <NewAccount>\r
                     <ExternalReferenceType>SWID</ExternalReferenceType>\r
                     <ExternalReferenceValue>{ABF4A795-1851-4F61-B5CF-69FC5721F383}</ExternalReferenceValue>\r
                  </NewAccount>\r
                  <AccountDemoData FirstName="Pratsenvotot"/>\r
               </SpecifiedAccount>\r
            </EntitlementAccount>\r
         </ReservationRequest>\r
      </Command>\r
   </Payload>\r
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="0a6511b7-b0fe-4c7f-a546-4756cf9cf90e" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0d5e7d75-3336-4796-be9f-9df2d2878eb0" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4c17dbb4-fe55-4dc8-8a9f-5b12242ca63f" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="550ae660-caef-4fc4-bbd4-1cead8970d4d" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4c0d405a-81ea-4c9b-95f8-a731d5eedcec" name="EntityInActive"><con:configuration><scriptText>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def testCase = messageExchange.modelItem.testCase;
def responseHolderProduct = groovyUtils.getXmlHolder("transmission -CreateReservation_EntityNotActive#Response")
 message = responseHolderProduct["//Transmission[1]/Payload[1]/PayloadHeader[1]/PayloadError[1]/HdrErrorText[1]"]
testCase.setPropertyValue("entity",message)
if(message =='Entity Not Active')
{
assert true
}
else
{
assert false
}
log.info "InvalidEntity " + message</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for InvalidProductCode" id="79a04acd-6800-41e3-a1f5-f4db439a2fc4"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -CreateReservation_InvalidProductCode" id="a976f4fc-deea-469d-94cb-37e02daac201"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -CreateReservation_InvalidProductCode" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <Payload>\r
      <PayloadHeader>\r
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
         <Target>Test</Target>\r
         <Version>1.0</Version>\r
         <Comm>\r
            <Protocol>IP</Protocol>\r
            <Method>Network</Method>\r
         </Comm>\r
         <TransmitDate>2017-10-02</TransmitDate>\r
         <TransmitTime>15:34:23.60</TransmitTime>\r
         <TktSeller>\r
            <TSMAC>WDPRONAWDW</TSMAC>\r
            <TSSystem>CC</TSSystem>\r
            <TSLocation>PROGENSTR</TSLocation>\r
            <TSSecurity>WaltDisney1</TSSecurity>\r
         </TktSeller>\r
         <CommandCount>1</CommandCount>\r
      </PayloadHeader>\r
      <Command>\r
         <CommandHeader>\r
            <CmdItem>1</CmdItem>\r
            <CmdTimeout>45</CmdTimeout>\r
            <CmdDate>2017-10-02</CmdDate>\r
            <CmdTime>15:34:23.61</CmdTime>\r
            <CmdInvoice>00000010002414977</CmdInvoice>\r
            <CmdDevice>127.0.0.1</CmdDevice>\r
            <CmdOperator>WDPRO</CmdOperator>\r
         </CommandHeader>\r
         <ReservationRequest>\r
            <RequestType>Create</RequestType>\r
            <Ticket>\r
               <TktItem>1</TktItem>\r
               <ProdCode>1J0321</ProdCode>\r
               <ProdQty>1</ProdQty>\r
               <ProdPrice>199.00</ProdPrice>\r
            </Ticket>\r
            <Payment>\r
               <PayItem>1</PayItem>\r
               <PayType>\r
                  <CreditCard>\r
                     <CCManual>\r
                        <CCNbr>ZZZZZZZZZZZZ0212</CCNbr>\r
                        <CCExpiration>1218</CCExpiration>\r
                        <CCVV>ZZZ</CCVV>\r
                        <CCName>Pratsenvotot Test</CCName>\r
                        <CCStreet>3000 184th Street So</CCStreet>\r
                        <CCZipcode>98037</CCZipcode>\r
                        <CCType>DS</CCType>\r
                     </CCManual>\r
                  </CreditCard>\r
               </PayType>\r
               <PayAmount>199.0</PayAmount>\r
            </Payment>\r
            <Reservation>\r
               <ResCreateDate>2017-10-02</ResCreateDate>\r
               <ResPickupDate>2017-10-02</ResPickupDate>\r
               <ResPickupArea>MailOrder</ResPickupArea>\r
               <ResSalesType>MailOrder</ResSalesType>\r
            </Reservation>\r
            <ClientData>\r
               <ClientType>Private</ClientType>\r
               <ClientCategory>WW</ClientCategory>\r
               <DemoLanguage>en</DemoLanguage>\r
               <DemoData>\r
                  <Bill Addr1="3000 184th Street So" City="Lynnwood" Country="US" Email="pratsenv1202@ngetestmail.com" FirstName="Pratsenvotot" LastName="Test" Name="Pratsenvotot Test" State="WA" Telephone="4252837255" Zip="98037"/>\r
                  <Ship Email="pratsenv1202@ngetestmail.com" Name="" Telephone="4252837255"/>\r
               </DemoData>\r
            </ClientData>\r
            <EntitlementAccount>\r
               <SpecifiedAccount>\r
                  <AccountItem>1</AccountItem>\r
                  <NewAccount>\r
                     <ExternalReferenceType>SWID</ExternalReferenceType>\r
                     <ExternalReferenceValue>{ABF4A795-1851-4F61-B5CF-69FC5721F383}</ExternalReferenceValue>\r
                  </NewAccount>\r
                  <AccountDemoData FirstName="Pratsenvotot"/>\r
               </SpecifiedAccount>\r
            </EntitlementAccount>\r
         </ReservationRequest>\r
      </Command>\r
   </Payload>\r
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="915d07b3-6b09-4191-9be9-9a5924e61c2a" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="42593c9b-1bea-4049-9ad8-b41815d2f743" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2a016bb4-d1be-453a-878d-dbd01dee0a3c" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="90ca0110-2f24-470f-b7fd-39a3b99cd649" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="307bfe00-6a68-42d1-a598-0e076e615bca" name="InvalidProductCode"><con:configuration><scriptText>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def testCase = messageExchange.modelItem.testCase;
def responseHolderProduct = groovyUtils.getXmlHolder("transmission -CreateReservation_InvalidProductCode#Response")
message = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/CommandHeader[1]/CmdError[1]/CmdErrorText[1]"]
testCase.setPropertyValue("entity",message)
if(message =='Invalid Product Code')
{
assert true
}
else
{
assert false
}
log.info "InvalidProductCode : " + message</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for ProductSoldOut" id="63966753-8c0e-4f1b-99c8-913464c4e7ff"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -CreateReservation_ProductSoldOut" id="fd086dd5-0ecc-446f-afb7-4b30fc59e582"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -CreateReservation_ProductSoldOut" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <Payload>\r
      <PayloadHeader>\r
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
         <Target>Test</Target>\r
         <Version>1.0</Version>\r
         <Comm>\r
            <Protocol>IP</Protocol>\r
            <Method>Network</Method>\r
         </Comm>\r
         <TransmitDate>2017-10-02</TransmitDate>\r
         <TransmitTime>15:34:23.60</TransmitTime>\r
         <TktSeller>\r
            <TSMAC>WDPRONAWDW</TSMAC>\r
            <TSSystem>CC</TSSystem>\r
            <TSLocation>PROGENSTR</TSLocation>\r
            <TSSecurity>WaltDisney1</TSSecurity>\r
         </TktSeller>\r
         <CommandCount>1</CommandCount>\r
      </PayloadHeader>\r
      <Command>\r
         <CommandHeader>\r
            <CmdItem>1</CmdItem>\r
            <CmdTimeout>45</CmdTimeout>\r
            <CmdDate>2017-10-02</CmdDate>\r
            <CmdTime>15:34:23.61</CmdTime>\r
            <CmdInvoice>00000010002414977</CmdInvoice>\r
            <CmdDevice>127.0.0.1</CmdDevice>\r
            <CmdOperator>WDPRO</CmdOperator>\r
         </CommandHeader>\r
         <ReservationRequest>\r
            <RequestType>Create</RequestType>\r
            <Ticket>\r
               <TktItem>1</TktItem>\r
               <ProdCode>${#TestCase#soldOut}</ProdCode>\r
               <ProdQty>1</ProdQty>\r
               <ProdPrice>199.00</ProdPrice>\r
               <TktAssignment>\r
                  <AccountItem>1</AccountItem>\r
                  <ProdQty>1</ProdQty>\r
               </TktAssignment>\r
            </Ticket>\r
            
            <Payment>\r
               <PayItem>1</PayItem>\r
               <PayType>\r
                  <CreditCard>\r
                     <CCManual>\r
                        <CCNbr>ZZZZZZZZZZZZ0212</CCNbr>\r
                        <CCExpiration>1218</CCExpiration>\r
                        <CCVV>ZZZ</CCVV>\r
                        <CCName>Pratsenvotot Test</CCName>\r
                        <CCStreet>3000 184th Street So</CCStreet>\r
                        <CCZipcode>98037</CCZipcode>\r
                        <CCType>DS</CCType>\r
                     </CCManual>\r
                  </CreditCard>\r
               </PayType>\r
               <PayAmount>199.0</PayAmount>\r
            </Payment>\r
            <Reservation>\r
               <ResCreateDate>2017-10-02</ResCreateDate>\r
               <ResPickupDate>2017-10-02</ResPickupDate>\r
               <ResPickupArea>MailOrder</ResPickupArea>\r
               <ResSalesType>MailOrder</ResSalesType>\r
            </Reservation>\r
            <ClientData>\r
               <ClientType>Private</ClientType>\r
               <ClientCategory>WW</ClientCategory>\r
               <DemoLanguage>en</DemoLanguage>\r
               <DemoData>\r
                  <Bill Addr1="3000 184th Street So" City="Lynnwood" Country="US" Email="pratsenv1202@ngetestmail.com" FirstName="Pratsenvotot" LastName="Test" Name="Pratsenvotot Test" State="WA" Telephone="4252837255" Zip="98037"/>\r
                  <Ship Email="pratsenv1202@ngetestmail.com" Name="" Telephone="4252837255"/>\r
               </DemoData>\r
            </ClientData>\r
            <EntitlementAccount>\r
               <SpecifiedAccount>\r
                  <AccountItem>1</AccountItem>\r
                  <NewAccount>\r
                     <ExternalReferenceType>SWID</ExternalReferenceType>\r
                     <ExternalReferenceValue>{ABF4A795-1851-4F61-B5CF-69FC5721F383}</ExternalReferenceValue>\r
                  </NewAccount>\r
                  <AccountDemoData FirstName="Pratsenvotot"/>\r
               </SpecifiedAccount>\r
            </EntitlementAccount>\r
         </ReservationRequest>\r
      </Command>\r
   </Payload>\r
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="f883f72d-654b-470d-b8d4-2353fa27ed8f" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7775ea6f-b4ea-4fe7-b5ed-0748d228dc89" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4d7819f4-1045-482f-9264-6af455b7637d" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="30560cdf-0ef2-4366-a561-b365a4be8b03" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a7951186-0569-4a3d-a98e-fe6a248877d5" name="ProductSoldOut"><con:configuration><scriptText>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def testCase = messageExchange.modelItem.testCase;
def responseHolderProduct = groovyUtils.getXmlHolder("transmission -CreateReservation_ProductSoldOut#Response")
message = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/CommandHeader[1]/CmdError[1]/CmdErrorText[1]"]
testCase.setPropertyValue("entity",message)
if(message =='Product Sold Out')
{
assert true
}
else
{
assert false
}
log.info "ProductSoldOut : " + message</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for InvalidPrice_LowPriceVariant" id="55ed48d4-7043-4f25-b514-ddcc1dc67d33"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -CreateReservation_InvalidPrice_LowPriceVariant" id="3dc3cb2f-3928-4290-b23c-923236cb6935"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -CreateReservation_InvalidPrice_LowPriceVariant" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <Payload>\r
      <PayloadHeader>\r
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
         <Target>Test</Target>\r
         <Version>1.0</Version>\r
         <Comm>\r
            <Protocol>IP</Protocol>\r
            <Method>Network</Method>\r
         </Comm>\r
         <TransmitDate>2017-10-02</TransmitDate>\r
         <TransmitTime>15:34:23.60</TransmitTime>\r
         <TktSeller>\r
            <TSMAC>WDPRONAWDW</TSMAC>\r
            <TSSystem>CC</TSSystem>\r
            <TSLocation>PROGENSTR</TSLocation>\r
            <TSSecurity>WaltDisney1</TSSecurity>\r
         </TktSeller>\r
         <CommandCount>1</CommandCount>\r
      </PayloadHeader>\r
      <Command>\r
         <CommandHeader>\r
            <CmdItem>1</CmdItem>\r
            <CmdTimeout>45</CmdTimeout>\r
            <CmdDate>2017-10-02</CmdDate>\r
            <CmdTime>15:34:23.61</CmdTime>\r
            <CmdInvoice>00000010002414977</CmdInvoice>\r
            <CmdDevice>127.0.0.1</CmdDevice>\r
            <CmdOperator>WDPRO</CmdOperator>\r
         </CommandHeader>\r
         <ReservationRequest>\r
            <RequestType>Create</RequestType>\r
            <Ticket>\r
               <TktItem>1</TktItem>\r
               <ProdCode>${#TestCase#productName}</ProdCode>\r
               <ProdQty>1</ProdQty>\r
               <ProdPrice>${#TestCase#lowPrice}</ProdPrice>\r
            </Ticket>\r
            <Ticket>\r
               <TktItem>2</TktItem>\r
               <ProdCode>M0108</ProdCode>\r
               <ProdQty>1</ProdQty>\r
               <ProdPrice>0.00</ProdPrice>\r
            </Ticket>\r
            <Payment>\r
               <PayItem>1</PayItem>\r
               <PayType>\r
                  <CreditCard>\r
                     <CCManual>\r
                        <CCNbr>ZZZZZZZZZZZZ0212</CCNbr>\r
                        <CCExpiration>1218</CCExpiration>\r
                        <CCVV>ZZZ</CCVV>\r
                        <CCName>Pratsenvotot Test</CCName>\r
                        <CCStreet>3000 184th Street So</CCStreet>\r
                        <CCZipcode>98037</CCZipcode>\r
                        <CCType>DS</CCType>\r
                     </CCManual>\r
                  </CreditCard>\r
               </PayType>\r
               <PayAmount>199.0</PayAmount>\r
            </Payment>\r
            <Reservation>\r
               <ResCreateDate>2017-10-02</ResCreateDate>\r
               <ResPickupDate>2017-10-02</ResPickupDate>\r
               <ResPickupArea>MailOrder</ResPickupArea>\r
               <ResSalesType>MailOrder</ResSalesType>\r
            </Reservation>\r
            <ClientData>\r
               <ClientType>Private</ClientType>\r
               <ClientCategory>WW</ClientCategory>\r
               <DemoLanguage>en</DemoLanguage>\r
               <DemoData>\r
                  <Bill Addr1="3000 184th Street So" City="Lynnwood" Country="US" Email="pratsenv1202@ngetestmail.com" FirstName="Pratsenvotot" LastName="Test" Name="Pratsenvotot Test" State="WA" Telephone="4252837255" Zip="98037"/>\r
                  <Ship Email="pratsenv1202@ngetestmail.com" Name="" Telephone="4252837255"/>\r
               </DemoData>\r
            </ClientData>\r
            <EntitlementAccount>\r
               <SpecifiedAccount>\r
                  <AccountItem>1</AccountItem>\r
                  <NewAccount>\r
                     <ExternalReferenceType>SWID</ExternalReferenceType>\r
                     <ExternalReferenceValue>{ABF4A795-1851-4F61-B5CF-69FC5721F383}</ExternalReferenceValue>\r
                  </NewAccount>\r
                  <AccountDemoData FirstName="Pratsenvotot"/>\r
               </SpecifiedAccount>\r
            </EntitlementAccount>\r
         </ReservationRequest>\r
      </Command>\r
   </Payload>\r
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="d2202758-4ef4-49f9-9845-6272b9130f44" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="fcf13f8a-ba45-4d9e-8594-0cd377b2c7c5" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ad711999-db5a-4378-9c48-068e1f8ae21a" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d9742e25-cafe-4ee6-bcd6-0d6cd54f96fc" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="5c51dcb9-b6c7-49e4-bd2c-6854c0cf735f" name="InvalidPrice_LowPriceVariant"><con:configuration><scriptText>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def testCase = messageExchange.modelItem.testCase;
def responseHolderProduct = groovyUtils.getXmlHolder("transmission -CreateReservation_InvalidPrice_LowPriceVariant#Response")
message = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/CommandHeader[1]/CmdError[1]/CmdErrorText[1]"]
testCase.setPropertyValue("entity",message)
if(message =='Invalid Price')
{
assert true
}
else
{
assert false
}
log.info "InvalidPrice_LowPriceVariant : " + message</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for InvalidPrice_HighPriceVariant" id="c9a3a79d-24be-4d63-b49f-3e47ed52238f"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -CreateReservation_InvalidPrice_HighPriceVariant" id="16d5f514-0fb2-4512-ad0a-ff96e63eaa43"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -CreateReservation_InvalidPrice_HighPriceVariant" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <Payload>\r
      <PayloadHeader>\r
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
         <Target>Test</Target>\r
         <Version>1.0</Version>\r
         <Comm>\r
            <Protocol>IP</Protocol>\r
            <Method>Network</Method>\r
         </Comm>\r
         <TransmitDate>2017-10-02</TransmitDate>\r
         <TransmitTime>15:34:23.60</TransmitTime>\r
         <TktSeller>\r
            <TSMAC>WDPRONAWDW</TSMAC>\r
            <TSSystem>CC</TSSystem>\r
            <TSLocation>PROGENSTR</TSLocation>\r
            <TSSecurity>WaltDisney1</TSSecurity>\r
         </TktSeller>\r
         <CommandCount>1</CommandCount>\r
      </PayloadHeader>\r
      <Command>\r
         <CommandHeader>\r
            <CmdItem>1</CmdItem>\r
            <CmdTimeout>45</CmdTimeout>\r
            <CmdDate>2017-10-02</CmdDate>\r
            <CmdTime>15:34:23.61</CmdTime>\r
            <CmdInvoice>00000010002414977</CmdInvoice>\r
            <CmdDevice>127.0.0.1</CmdDevice>\r
            <CmdOperator>WDPRO</CmdOperator>\r
         </CommandHeader>\r
         <ReservationRequest>\r
            <RequestType>Create</RequestType>\r
             <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>${#TestCase#productName}</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>${#TestCase#highPrice}</ProdPrice>
            </Ticket>
            <Ticket>
               <TktItem>2</TktItem>
               <ProdCode>M0108</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>0.00</ProdPrice>
            </Ticket>
            <Payment>\r
               <PayItem>1</PayItem>\r
               <PayType>\r
                  <CreditCard>\r
                     <CCManual>\r
                        <CCNbr>ZZZZZZZZZZZZ0212</CCNbr>\r
                        <CCExpiration>1218</CCExpiration>\r
                        <CCVV>ZZZ</CCVV>\r
                        <CCName>Pratsenvotot Test</CCName>\r
                        <CCStreet>3000 184th Street So</CCStreet>\r
                        <CCZipcode>98037</CCZipcode>\r
                        <CCType>DS</CCType>\r
                     </CCManual>\r
                  </CreditCard>\r
               </PayType>\r
               <PayAmount>199.0</PayAmount>\r
            </Payment>\r
            <Reservation>\r
               <ResCreateDate>2017-10-02</ResCreateDate>\r
               <ResPickupDate>2017-10-02</ResPickupDate>\r
               <ResPickupArea>MailOrder</ResPickupArea>\r
               <ResSalesType>MailOrder</ResSalesType>\r
            </Reservation>\r
            <ClientData>\r
               <ClientType>Private</ClientType>\r
               <ClientCategory>WW</ClientCategory>\r
               <DemoLanguage>en</DemoLanguage>\r
               <DemoData>\r
                  <Bill Addr1="3000 184th Street So" City="Lynnwood" Country="US" Email="pratsenv1202@ngetestmail.com" FirstName="Pratsenvotot" LastName="Test" Name="Pratsenvotot Test" State="WA" Telephone="4252837255" Zip="98037"/>\r
                  <Ship Email="pratsenv1202@ngetestmail.com" Name="" Telephone="4252837255"/>\r
               </DemoData>\r
            </ClientData>\r
            <EntitlementAccount>\r
               <SpecifiedAccount>\r
                  <AccountItem>1</AccountItem>\r
                  <NewAccount>\r
                     <ExternalReferenceType>SWID</ExternalReferenceType>\r
                     <ExternalReferenceValue>{ABF4A795-1851-4F61-B5CF-69FC5721F383}</ExternalReferenceValue>\r
                  </NewAccount>\r
                  <AccountDemoData FirstName="Pratsenvotot"/>\r
               </SpecifiedAccount>\r
            </EntitlementAccount>\r
         </ReservationRequest>\r
      </Command>\r
   </Payload>\r
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="481c1dbe-6d71-4caa-a989-80684ba1ecb2" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4a94b1a8-8a59-4c61-a63f-df448517ab3f" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8e7023f0-63a8-4cf4-87ac-0754fbccb478" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="157238ee-0c5f-49dc-b275-f32408c1c6f8" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2830b48b-9844-4445-af99-be0db0637547" name="InvalidPrice_HighPriceVariant"><con:configuration><scriptText>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def testCase = messageExchange.modelItem.testCase;
def responseHolderProduct = groovyUtils.getXmlHolder("transmission -CreateReservation_InvalidPrice_LowPriceVariant#Response")
message = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/CommandHeader[1]/CmdError[1]/CmdErrorText[1]"]
testCase.setPropertyValue("entity",message)
if(message =='Invalid Price')
{
assert true
}
else
{
assert false
}
log.info "InvalidPrice_LowPriceVariant : " + message</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for InvalidSalesDateOrTime" id="6694c50d-c25c-41a0-ae5c-4314be814584"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -CreateReservation_InvalidSalesDateOrTime" id="dd7bfa13-abb0-4150-a7b0-81c9f32fbd52"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -CreateReservation_InvalidSalesDateOrTime" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <Payload>\r
      <PayloadHeader>\r
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
         <Target>Test</Target>\r
         <Version>1.0</Version>\r
         <Comm>\r
            <Protocol>IP</Protocol>\r
            <Method>Network</Method>\r
         </Comm>\r
         <TransmitDate>2017-10-02</TransmitDate>\r
         <TransmitTime>15:34:23.60</TransmitTime>\r
         <TktSeller>\r
            <TSMAC>WDPRONAWDW</TSMAC>\r
            <TSSystem>CC</TSSystem>\r
            <TSLocation>PROGENSTR</TSLocation>\r
            <TSSecurity>WaltDisney1</TSSecurity>\r
         </TktSeller>\r
         <CommandCount>1</CommandCount>\r
      </PayloadHeader>\r
      <Command>\r
         <CommandHeader>\r
            <CmdItem>1</CmdItem>\r
            <CmdTimeout>45</CmdTimeout>\r
            <CmdDate>2017-10-02</CmdDate>\r
            <CmdTime>15:34:23.61</CmdTime>\r
            <CmdInvoice>00000010002414977</CmdInvoice>\r
            <CmdDevice>127.0.0.1</CmdDevice>\r
            <CmdOperator>WDPRO</CmdOperator>\r
         </CommandHeader>\r
         <ReservationRequest>\r
            <RequestType>Create</RequestType>\r
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>1J011</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>120.35</ProdPrice>
            </Ticket>
           <Ticket>
               <TktItem>2</TktItem>
               <ProdCode>MC004</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>0.00</ProdPrice>
            </Ticket>
            <Payment>\r
               <PayItem>1</PayItem>\r
               <PayType>\r
                  <CreditCard>\r
                     <CCManual>\r
                        <CCNbr>ZZZZZZZZZZZZ0212</CCNbr>\r
                        <CCExpiration>1218</CCExpiration>\r
                        <CCVV>ZZZ</CCVV>\r
                        <CCName>Pratsenvotot Test</CCName>\r
                        <CCStreet>3000 184th Street So</CCStreet>\r
                        <CCZipcode>98037</CCZipcode>\r
                        <CCType>DS</CCType>\r
                     </CCManual>\r
                  </CreditCard>\r
               </PayType>\r
               <PayAmount>120.35</PayAmount>\r
            </Payment>\r
            <Reservation>\r
               <ResCreateDate>2017-10-02</ResCreateDate>\r
               <ResPickupDate>2017-10-02</ResPickupDate>\r
               <ResPickupArea>MailOrder</ResPickupArea>\r
               <ResSalesType>MailOrder</ResSalesType>\r
            </Reservation>\r
            <ClientData>\r
               <ClientType>Private</ClientType>\r
               <ClientCategory>WW</ClientCategory>\r
               <DemoLanguage>en</DemoLanguage>\r
               <DemoData>\r
                  <Bill Addr1="3000 184th Street So" City="Lynnwood" Country="US" Email="pratsenv1202@ngetestmail.com" FirstName="Pratsenvotot" LastName="Test" Name="Pratsenvotot Test" State="WA" Telephone="4252837255" Zip="98037"/>\r
                  <Ship Email="pratsenv1202@ngetestmail.com" Name="" Telephone="4252837255"/>\r
               </DemoData>\r
            </ClientData>\r
            <EntitlementAccount>\r
               <SpecifiedAccount>\r
                  <AccountItem>1</AccountItem>\r
                  <NewAccount>\r
                     <ExternalReferenceType>SWID</ExternalReferenceType>\r
                     <ExternalReferenceValue>{ABF4A795-1851-4F61-B5CF-69FC5721F383}</ExternalReferenceValue>\r
                  </NewAccount>\r
                  <AccountDemoData FirstName="Pratsenvotot"/>\r
               </SpecifiedAccount>\r
            </EntitlementAccount>\r
         </ReservationRequest>\r
      </Command>\r
   </Payload>\r
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="6e766085-07fe-4310-a4d2-7bc9a74411c6" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8fc22b28-1aab-410f-8d8a-76e2632c25a6" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="5e3405a1-72a4-4a7a-a117-978e948a9169" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d46e9853-1fa7-4b48-8f43-88becab703cf" name="Numeric Validation - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c9fcacf3-1c6f-4c3c-98d4-0c3170f54031" name="InvalidSalesDateOrTime"><con:configuration><scriptText>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def testCase = messageExchange.modelItem.testCase

def responseHolderProduct = groovyUtils.getXmlHolder("transmission -CreateReservation_InvalidSalesDateOrTime#Response")
message = responseHolderProduct["//Transmission[1]/Payload[1]/PayloadHeader[1]/PayloadError[1]/HdrErrorText[1]"]
def entityResult = testCase.getPropertyValue("ENTITY_DATE_TIME")
log.info "entityResult : " + entityResult
if(entityResult != '0')
{
if(message == 'Invalid Sales Date/Time')
{
log.info "Getting expected response : " + message
assert true	
}
else
{
log.info "Got unexpected response : " + message
assert false	
}

}
else
{
log.info "The entity is activated for transaction " + message
}




</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for ProductExpired_Future_Variant" id="2eed8cd8-dc84-488a-be03-76ff40d2300e"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -CreateReservation_ProductExpired_Future_Variant" id="837d249b-51d0-4911-9de2-0c48d0553039"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -CreateReservation_ProductExpired_Future_Variant" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <Payload>\r
      <PayloadHeader>\r
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
         <Target>Test</Target>\r
         <Version>1.0</Version>\r
         <Comm>\r
            <Protocol>IP</Protocol>\r
            <Method>Network</Method>\r
         </Comm>\r
         <TransmitDate>2017-10-02</TransmitDate>\r
         <TransmitTime>15:34:23.60</TransmitTime>\r
         <TktSeller>\r
            <TSMAC>WDPRONAWDW</TSMAC>\r
            <TSSystem>CC</TSSystem>\r
            <TSLocation>PROGENSTR</TSLocation>\r
            <TSSecurity>WaltDisney1</TSSecurity>\r
         </TktSeller>\r
         <CommandCount>1</CommandCount>\r
      </PayloadHeader>\r
      <Command>\r
         <CommandHeader>\r
            <CmdItem>1</CmdItem>\r
            <CmdTimeout>45</CmdTimeout>\r
            <CmdDate>2017-10-02</CmdDate>\r
            <CmdTime>15:34:23.61</CmdTime>\r
            <CmdInvoice>00000010002414977</CmdInvoice>\r
            <CmdDevice>127.0.0.1</CmdDevice>\r
            <CmdOperator>WDPRO</CmdOperator>\r
         </CommandHeader>\r
         <ReservationRequest>\r
            <RequestType>Create</RequestType>\r
            <Ticket>\r
               <TktItem>1</TktItem>\r
               <ProdCode>${#TestCase#PRODUCT_EXPIRED_FUTURE}</ProdCode>\r
               <ProdQty>1</ProdQty>\r
               <ProdPrice>199.00</ProdPrice>\r
               <TktAssignment>\r
                  <AccountItem>1</AccountItem>\r
                  <ProdQty>1</ProdQty>\r
               </TktAssignment>\r
            </Ticket>\r
            <Payment>\r
               <PayItem>1</PayItem>\r
               <PayType>\r
                  <CreditCard>\r
                     <CCManual>\r
                        <CCNbr>ZZZZZZZZZZZZ0212</CCNbr>\r
                        <CCExpiration>1218</CCExpiration>\r
                        <CCVV>ZZZ</CCVV>\r
                        <CCName>Pratsenvotot Test</CCName>\r
                        <CCStreet>3000 184th Street So</CCStreet>\r
                        <CCZipcode>98037</CCZipcode>\r
                        <CCType>DS</CCType>\r
                     </CCManual>\r
                  </CreditCard>\r
               </PayType>\r
               <PayAmount>199.0</PayAmount>\r
            </Payment>\r
            <Reservation>\r
               <ResCreateDate>2017-10-02</ResCreateDate>\r
               <ResPickupDate>2017-10-02</ResPickupDate>\r
               <ResPickupArea>MailOrder</ResPickupArea>\r
               <ResSalesType>MailOrder</ResSalesType>\r
            </Reservation>\r
            <ClientData>\r
               <ClientType>Private</ClientType>\r
               <ClientCategory>WW</ClientCategory>\r
               <DemoLanguage>en</DemoLanguage>\r
               <DemoData>\r
                  <Bill Addr1="3000 184th Street So" City="Lynnwood" Country="US" Email="pratsenv1202@ngetestmail.com" FirstName="Pratsenvotot" LastName="Test" Name="Pratsenvotot Test" State="WA" Telephone="4252837255" Zip="98037"/>\r
                  <Ship Email="pratsenv1202@ngetestmail.com" Name="" Telephone="4252837255"/>\r
               </DemoData>\r
            </ClientData>\r
            <EntitlementAccount>\r
               <SpecifiedAccount>\r
                  <AccountItem>1</AccountItem>\r
                  <NewAccount>\r
                     <ExternalReferenceType>SWID</ExternalReferenceType>\r
                     <ExternalReferenceValue>{ABF4A795-1851-4F61-B5CF-69FC5721F383}</ExternalReferenceValue>\r
                  </NewAccount>\r
                  <AccountDemoData FirstName="Pratsenvotot"/>\r
               </SpecifiedAccount>\r
            </EntitlementAccount>\r
         </ReservationRequest>\r
      </Command>\r
   </Payload>\r
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="45041a98-ba9d-4d00-a6b3-914c75deaae2" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2f6afc0b-7236-4162-b8bc-03b4d0514385" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0810b412-35ee-439d-8c4c-5cf1f17ecf69" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="53ab51bd-1a3f-4749-889c-9fef1f3e27c3" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="868e2cb9-c02e-46e9-88e9-cf1a66005cb3" name="ProductExpired_Future_Variant"><con:configuration><scriptText>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def testCase = messageExchange.modelItem.testCase;
def responseHolderProduct = groovyUtils.getXmlHolder("transmission -CreateReservation_ProductExpired_Future_Variant#Response")
message = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/CommandHeader[1]/CmdError[1]/CmdErrorText[1]"]
testCase.setPropertyValue("entity",message)
if(message =='Product Expired')
{
assert true
}
else
{
assert false
}
log.info "ProductExpired : " + message</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for ProductExpired_Past_Variant" id="09446d0c-4e38-42dc-a5fa-2d63cc4f29be"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -CreateReservation_ProductExpired_Past_Variant" id="6ed85152-5e4e-4252-b7ff-54949fea933e"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -CreateReservation_ProductExpired_Past_Variant" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <Payload>\r
      <PayloadHeader>\r
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
         <Target>Test</Target>\r
         <Version>1.0</Version>\r
         <Comm>\r
            <Protocol>IP</Protocol>\r
            <Method>Network</Method>\r
         </Comm>\r
         <TransmitDate>2017-10-02</TransmitDate>\r
         <TransmitTime>15:34:23.60</TransmitTime>\r
         <TktSeller>\r
            <TSMAC>WDPRONAWDW</TSMAC>\r
            <TSSystem>CC</TSSystem>\r
            <TSLocation>PROGENSTR</TSLocation>\r
            <TSSecurity>WaltDisney1</TSSecurity>\r
         </TktSeller>\r
         <CommandCount>1</CommandCount>\r
      </PayloadHeader>\r
      <Command>\r
         <CommandHeader>\r
            <CmdItem>1</CmdItem>\r
            <CmdTimeout>45</CmdTimeout>\r
            <CmdDate>2017-10-02</CmdDate>\r
            <CmdTime>15:34:23.61</CmdTime>\r
            <CmdInvoice>00000010002414977</CmdInvoice>\r
            <CmdDevice>127.0.0.1</CmdDevice>\r
            <CmdOperator>WDPRO</CmdOperator>\r
         </CommandHeader>\r
         <ReservationRequest>\r
            <RequestType>Create</RequestType>\r
            <Ticket>\r
               <TktItem>1</TktItem>\r
               <ProdCode>${#TestCase#PRODUCT_EXPIRED_PAST}</ProdCode>\r
               <ProdQty>1</ProdQty>\r
               <ProdPrice>199.00</ProdPrice>\r
               <TktAssignment>\r
                  <AccountItem>1</AccountItem>\r
                  <ProdQty>1</ProdQty>\r
               </TktAssignment>\r
            </Ticket>\r
            <Payment>\r
               <PayItem>1</PayItem>\r
               <PayType>\r
                  <CreditCard>\r
                     <CCManual>\r
                        <CCNbr>ZZZZZZZZZZZZ0212</CCNbr>\r
                        <CCExpiration>1218</CCExpiration>\r
                        <CCVV>ZZZ</CCVV>\r
                        <CCName>Pratsenvotot Test</CCName>\r
                        <CCStreet>3000 184th Street So</CCStreet>\r
                        <CCZipcode>98037</CCZipcode>\r
                        <CCType>DS</CCType>\r
                     </CCManual>\r
                  </CreditCard>\r
               </PayType>\r
               <PayAmount>199.0</PayAmount>\r
            </Payment>\r
            <Reservation>\r
               <ResCreateDate>2017-10-02</ResCreateDate>\r
               <ResPickupDate>2017-10-02</ResPickupDate>\r
               <ResPickupArea>MailOrder</ResPickupArea>\r
               <ResSalesType>MailOrder</ResSalesType>\r
            </Reservation>\r
            <ClientData>\r
               <ClientType>Private</ClientType>\r
               <ClientCategory>WW</ClientCategory>\r
               <DemoLanguage>en</DemoLanguage>\r
               <DemoData>\r
                  <Bill Addr1="3000 184th Street So" City="Lynnwood" Country="US" Email="pratsenv1202@ngetestmail.com" FirstName="Pratsenvotot" LastName="Test" Name="Pratsenvotot Test" State="WA" Telephone="4252837255" Zip="98037"/>\r
                  <Ship Email="pratsenv1202@ngetestmail.com" Name="" Telephone="4252837255"/>\r
               </DemoData>\r
            </ClientData>\r
            <EntitlementAccount>\r
               <SpecifiedAccount>\r
                  <AccountItem>1</AccountItem>\r
                  <NewAccount>\r
                     <ExternalReferenceType>SWID</ExternalReferenceType>\r
                     <ExternalReferenceValue>{ABF4A795-1851-4F61-B5CF-69FC5721F383}</ExternalReferenceValue>\r
                  </NewAccount>\r
                  <AccountDemoData FirstName="Pratsenvotot"/>\r
               </SpecifiedAccount>\r
            </EntitlementAccount>\r
         </ReservationRequest>\r
      </Command>\r
   </Payload>\r
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="45041a98-ba9d-4d00-a6b3-914c75deaae2" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2f6afc0b-7236-4162-b8bc-03b4d0514385" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0810b412-35ee-439d-8c4c-5cf1f17ecf69" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="53ab51bd-1a3f-4749-889c-9fef1f3e27c3" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="3a65e1ad-bcd8-4049-82e1-aff1b7c7f420" name="ProductExpired_Past_Variant"><con:configuration><scriptText>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def testCase = messageExchange.modelItem.testCase
def responseHolderProduct = groovyUtils.getXmlHolder("transmission -CreateReservation_ProductExpired_Past_Variant#Response")
message = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/CommandHeader[1]/CmdError[1]/CmdErrorText[1]"]
testCase.setPropertyValue("entity",message)
if(message =='Product Expired')
{
assert true
}
else
{
assert false
}
log.info "ProductExpired : " + message</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for PriceMismatchWarning" id="c731747f-b93b-4592-bc40-096bd57ff7bc"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -CreateReservation_PriceMismatchWarning" id="0316e063-64f4-4048-a5b2-8c9fffed2fe5"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -CreateReservation_PriceMismatchWarning" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2017-10-02</TransmitDate>
         <TransmitTime>15:34:23.60</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>BOLTTSGS</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2017-10-02</CmdDate>
            <CmdTime>15:34:23.61</CmdTime>
            <CmdInvoice>00000010002414977</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <ReservationRequest>
            <RequestType>Create</RequestType>
          <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>MDINE</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>275.00</ProdPrice>
            </Ticket>

           <Ticket>
               <TktItem>2</TktItem>
               <ProdCode>MC004</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>0.00</ProdPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCManual>
                        <CCNbr>4444333322221111</CCNbr>
                        <CCExpiration>1219</CCExpiration>
                        <CCVV>999</CCVV>
                        <CCName>Jame Bo</CCName>
                        <CCStreet>756 PARIS WAY</CCStreet>
                        <CCZipcode>76590</CCZipcode>
                        <CCType>DS</CCType>
                     </CCManual>
                  </CreditCard>
               </PayType>
                <PayAmount>275.00</PayAmount>
              </Payment>
            
            <Reservation>
               <ResCreateDate>2017-10-02</ResCreateDate>
               <ResPickupDate>2017-10-02</ResPickupDate>
               <ResPickupArea>MailOrder</ResPickupArea>
               <ResSalesType>MailOrder</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="3000 184th Street So" City="Lynnwood" Country="US" Email="pratsenv1202@ngetestmail.com" FirstName="Pratsenvotot" LastName="Test" Name="Pratsenvotot Test" State="WA" Telephone="4252837255" Zip="98037"/>
                  <Ship Email="pratsenv1202@ngetestmail.com" Name="" Telephone="4252837255"/>
               </DemoData>
            </ClientData>
            <EntitlementAccount>
               <SpecifiedAccount>
                  <AccountItem>1</AccountItem>
                  <NewAccount>
                     <ExternalReferenceType>SWID</ExternalReferenceType>
                     <ExternalReferenceValue>{ABF4A795-1851-4F61-B5CF-69FC5721F383}</ExternalReferenceValue>
                  </NewAccount>
                  <AccountDemoData FirstName="Pratsenvotot"/>
               </SpecifiedAccount>
            </EntitlementAccount>
         </ReservationRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="917a840a-e7fd-424c-8619-9155b60ed581" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="14dc14fb-0ec8-4fbc-b469-4f5bda47f8ce" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4e77d1d7-4d22-4bcf-8353-a4abebf707c4" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9fa303f1-9b5a-4ff4-ac64-3d2e2522c851" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d54a6e83-4378-433b-8236-1c5fce2ed80f" name="PriceMismatchWarning"><con:configuration><scriptText>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def responseHolderProduct = groovyUtils.getXmlHolder("transmission -CreateReservation_PriceMismatchWarning#Response")
def message = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/CommandHeader[1]/CmdError[1]/CmdErrorText[1]"]

if(message =='Price Mismatch-Warning')
{
assert true
}
else
{
assert false
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for ProductUnavailable" id="6b65f4cb-2cf4-4ed7-a3e3-7a3c8b60e8c2"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -CreateReservation_ProductUnavailable" id="dc948282-ef43-46cf-91d8-0d6ee4df615f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -CreateReservation_ProductUnavailable" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <Payload>\r
      <PayloadHeader>\r
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
         <Target>Test</Target>\r
         <Version>1.0</Version>\r
         <Comm>\r
            <Protocol>IP</Protocol>\r
            <Method>Network</Method>\r
         </Comm>\r
         <TransmitDate>2017-10-02</TransmitDate>\r
         <TransmitTime>15:34:23.60</TransmitTime>\r
         <TktSeller>\r
            <TSMAC>WDPRONAWDW</TSMAC>\r
            <TSSystem>CC</TSSystem>\r
            <TSLocation>PROGENSTR</TSLocation>\r
            <TSSecurity>WaltDisney1</TSSecurity>\r
         </TktSeller>\r
         <CommandCount>1</CommandCount>\r
      </PayloadHeader>\r
      <Command>\r
         <CommandHeader>\r
            <CmdItem>1</CmdItem>\r
            <CmdTimeout>45</CmdTimeout>\r
            <CmdDate>2017-10-02</CmdDate>\r
            <CmdTime>15:34:23.61</CmdTime>\r
            <CmdInvoice>00000010002414977</CmdInvoice>\r
            <CmdDevice>127.0.0.1</CmdDevice>\r
            <CmdOperator>WDPRO</CmdOperator>\r
         </CommandHeader>\r
         <ReservationRequest>\r
            <RequestType>Create</RequestType>\r
            <Ticket>\r
               <TktItem>1</TktItem>\r
               <ProdCode>${#TestCase#PRODUCT_UNAVAILABLE}</ProdCode>\r
               <ProdQty>1</ProdQty>\r
               <ProdPrice>199.00</ProdPrice>\r
               <TktAssignment>\r
                  <AccountItem>1</AccountItem>\r
                  <ProdQty>1</ProdQty>\r
               </TktAssignment>\r
            </Ticket>\r
            <Payment>\r
               <PayItem>1</PayItem>\r
               <PayType>\r
                  <CreditCard>\r
                     <CCManual>\r
                        <CCNbr>ZZZZZZZZZZZZ0212</CCNbr>\r
                        <CCExpiration>1218</CCExpiration>\r
                        <CCVV>ZZZ</CCVV>\r
                        <CCName>Pratsenvotot Test</CCName>\r
                        <CCStreet>3000 184th Street So</CCStreet>\r
                        <CCZipcode>98037</CCZipcode>\r
                        <CCType>DS</CCType>\r
                     </CCManual>\r
                  </CreditCard>\r
               </PayType>\r
               <PayAmount>199.0</PayAmount>\r
            </Payment>\r
            <Reservation>\r
               <ResCreateDate>2017-10-02</ResCreateDate>\r
               <ResPickupDate>2017-10-02</ResPickupDate>\r
               <ResPickupArea>MailOrder</ResPickupArea>\r
               <ResSalesType>MailOrder</ResSalesType>\r
            </Reservation>\r
            <ClientData>\r
               <ClientType>Private</ClientType>\r
               <ClientCategory>WW</ClientCategory>\r
               <DemoLanguage>en</DemoLanguage>\r
               <DemoData>\r
                  <Bill Addr1="3000 184th Street So" City="Lynnwood" Country="US" Email="pratsenv1202@ngetestmail.com" FirstName="Pratsenvotot" LastName="Test" Name="Pratsenvotot Test" State="WA" Telephone="4252837255" Zip="98037"/>\r
                  <Ship Email="pratsenv1202@ngetestmail.com" Name="" Telephone="4252837255"/>\r
               </DemoData>\r
            </ClientData>\r
            <EntitlementAccount>\r
               <SpecifiedAccount>\r
                  <AccountItem>1</AccountItem>\r
                  <NewAccount>\r
                     <ExternalReferenceType>SWID</ExternalReferenceType>\r
                     <ExternalReferenceValue>{ABF4A795-1851-4F61-B5CF-69FC5721F383}</ExternalReferenceValue>\r
                  </NewAccount>\r
                  <AccountDemoData FirstName="Pratsenvotot"/>\r
               </SpecifiedAccount>\r
            </EntitlementAccount>\r
         </ReservationRequest>\r
      </Command>\r
   </Payload>\r
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="17a9a555-9558-4e77-8049-adecb6d5be3f" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ef3520c8-eb01-4354-8e3e-358a5918eb2a" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="3ea8000f-eb5e-485a-b738-92fd42e652fe" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="85cb684d-f72a-43b2-b3f1-4707ff7aca74" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c392993a-fd35-4a58-addc-29150093020b" name="ProductUnavailable"><con:configuration><scriptText>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat
def testCase = messageExchange.modelItem.testCase;
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolderProduct = groovyUtils.getXmlHolder("transmission -CreateReservation_ProductUnavailable#Response")
message = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/CommandHeader[1]/CmdError[1]/CmdErrorText[1]"]
testCase.setPropertyValue("entity",message)
if(message =='Product Unavailable')
{
assert true
}
else
{
assert false
}
log.info "ProductUnavailable : " + message</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for InvalidValidityDates" id="68781caf-ad93-4bcb-911e-0aaee3145654"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -CreateReservation_InvalidValidityDates" id="09310065-13c3-49ce-9fbd-59a973336b7a"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -CreateReservation_InvalidValidityDates" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <Payload>\r
      <PayloadHeader>\r
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
         <Target>Test</Target>\r
         <Version>1.0</Version>\r
         <Comm>\r
            <Protocol>IP</Protocol>\r
            <Method>Network</Method>\r
         </Comm>\r
         <TransmitDate>2017-10-02</TransmitDate>\r
         <TransmitTime>15:34:23.60</TransmitTime>\r
         <TktSeller>\r
            <TSMAC>WDPRONAWDW</TSMAC>\r
            <TSSystem>CC</TSSystem>\r
            <TSLocation>PROGENSTR</TSLocation>\r
            <TSSecurity>WaltDisney1</TSSecurity>\r
         </TktSeller>\r
         <CommandCount>1</CommandCount>\r
      </PayloadHeader>\r
      <Command>\r
         <CommandHeader>\r
            <CmdItem>1</CmdItem>\r
            <CmdTimeout>45</CmdTimeout>\r
            <CmdDate>2017-10-03</CmdDate>\r
            <CmdTime>15:34:23.61</CmdTime>\r
            <CmdInvoice>00000010002414977</CmdInvoice>\r
            <CmdDevice>127.0.0.1</CmdDevice>\r
            <CmdOperator>WDPRO</CmdOperator>\r
         </CommandHeader>\r
         <ReservationRequest>\r
            <RequestType>Create</RequestType>\r
            <Ticket>\r
               <TktItem>1</TktItem>\r
               <ProdCode>${#TestCase#productName}</ProdCode>\r
               <ProdQty>1</ProdQty>\r
               <ProdPrice>${#TestCase#productPrice}</ProdPrice>\r
               <TktValidity>\r
                  <ValidStart>2017-10-02</ValidStart>\r
               </TktValidity>\r
            </Ticket>\r
            <Ticket>\r
               <TktItem>2</TktItem>\r
               <ProdCode>MC004</ProdCode>\r
               <ProdQty>1</ProdQty>\r
               <ProdPrice>0.00</ProdPrice>\r
            </Ticket>\r
            <Payment>\r
               <PayItem>1</PayItem>\r
               <PayType>\r
                  <CreditCard>\r
                     <CCManual>\r
                        <CCNbr>ZZZZZZZZZZZZ0212</CCNbr>\r
                        <CCExpiration>1218</CCExpiration>\r
                        <CCVV>ZZZ</CCVV>\r
                        <CCName>Pratsenvotot Test</CCName>\r
                        <CCStreet>3000 184th Street So</CCStreet>\r
                        <CCZipcode>98037</CCZipcode>\r
                        <CCType>DS</CCType>\r
                     </CCManual>\r
                  </CreditCard>\r
               </PayType>\r
               <PayAmount>${#TestCase#productPrice}</PayAmount>\r
            </Payment>\r
            <Reservation>\r
               <ResCreateDate>2017-10-02</ResCreateDate>\r
               <ResPickupDate>2017-10-02</ResPickupDate>\r
               <ResPickupArea>MailOrder</ResPickupArea>\r
               <ResSalesType>MailOrder</ResSalesType>\r
            </Reservation>\r
            <ClientData>\r
               <ClientType>Private</ClientType>\r
               <ClientCategory>WW</ClientCategory>\r
               <DemoLanguage>en</DemoLanguage>\r
               <DemoData>\r
                  <Bill Addr1="3000 184th Street So" City="Lynnwood" Country="US" Email="pratsenv1202@ngetestmail.com" FirstName="Pratsenvotot" LastName="Test" Name="Pratsenvotot Test" State="WA" Telephone="4252837255" Zip="98037"/>\r
                  <Ship Email="pratsenv1202@ngetestmail.com" Name="" Telephone="4252837255"/>\r
               </DemoData>\r
            </ClientData>\r
            <EntitlementAccount>\r
               <SpecifiedAccount>\r
                  <AccountItem>1</AccountItem>\r
                  <NewAccount>\r
                     <ExternalReferenceType>SWID</ExternalReferenceType>\r
                     <ExternalReferenceValue>{ABF4A795-1851-4F61-B5CF-69FC5721F383}</ExternalReferenceValue>\r
                  </NewAccount>\r
                  <AccountDemoData FirstName="Pratsenvotot"/>\r
               </SpecifiedAccount>\r
            </EntitlementAccount>\r
         </ReservationRequest>\r
      </Command>\r
   </Payload>\r
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="d6142bf9-d923-4bc5-b601-812aeabb35ce" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="279b3806-96bf-4942-a7a4-713ffd07e11f" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="5aef3fe8-c749-4ef8-ba29-98dcafa14a95" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e3bb6fa8-fbed-4023-ba06-5273a016c59e" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c38dad6d-1de9-446c-a36c-c05abec3d8db" name="Invalid_ValididityDates"><con:configuration><scriptText>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat
def testCase = messageExchange.modelItem.testCase;
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def responseHolderProduct = groovyUtils.getXmlHolder("transmission -CreateReservation_InvalidValidityDates#Response")
message = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/CommandHeader[1]/CmdError[1]/CmdErrorText[1]"]
testCase.setPropertyValue("entity",message)
if(message =='Invalid Validity Dates')
{
assert true
}
else
{
assert false
}
log.info "ProductUnavailable : " + message</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for CreditCardDenied" id="9462e62f-cced-4ef1-81df-e25498aa970e"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -CreateReservation_CreditCardDenied" id="182c9ccd-a6c2-43f8-9223-67ac59746117"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -CreateReservation_CreditCardDenied" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <Payload>\r
      <PayloadHeader>\r
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
         <Target>Test</Target>\r
         <Version>1.0</Version>\r
         <Comm>\r
            <Protocol>IP</Protocol>\r
            <Method>Network</Method>\r
         </Comm>\r
         <TransmitDate>2017-10-02</TransmitDate>\r
         <TransmitTime>15:34:23.60</TransmitTime>\r
         <TktSeller>\r
            <TSMAC>WDPRONAWDW</TSMAC>\r
            <TSSystem>CC</TSSystem>\r
            <TSLocation>PROGENSTR</TSLocation>\r
            <TSSecurity>WaltDisney1</TSSecurity>\r
         </TktSeller>\r
         <CommandCount>1</CommandCount>\r
      </PayloadHeader>\r
      <Command>\r
         <CommandHeader>\r
            <CmdItem>1</CmdItem>\r
            <CmdTimeout>45</CmdTimeout>\r
            <CmdDate>2017-10-02</CmdDate>\r
            <CmdTime>15:34:23.61</CmdTime>\r
            <CmdInvoice>00000010002414977</CmdInvoice>\r
            <CmdDevice>127.0.0.1</CmdDevice>\r
            <CmdOperator>WDPRO</CmdOperator>\r
         </CommandHeader>\r
         <ReservationRequest>\r
            <RequestType>Create</RequestType>\r
           <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>${#TestCase#productName}</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>${#TestCase#productPrice}</ProdPrice>
            </Ticket>
           <Ticket>
               <TktItem>2</TktItem>
               <ProdCode>MC004</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>0.00</ProdPrice>
            </Ticket>
            <Payment>\r
               <PayItem>1</PayItem>\r
               <PayType>\r
                  <CreditCard>\r
                     <CCManual>\r
                        <CCNbr>4444333322221111</CCNbr>\r
                        <CCExpiration>1218</CCExpiration>\r
                        <CCVV>999</CCVV>\r
                        <CCName>Pratsenvotot Test</CCName>\r
                        <CCStreet>3000 184th Street So</CCStreet>\r
                        <CCZipcode>98037</CCZipcode>\r
                        <CCType>DS</CCType>\r
                     </CCManual>\r
                  </CreditCard>\r
               </PayType>\r
               <PayAmount>${#TestCase#productPrice}</PayAmount>\r
            </Payment>\r
            <Reservation>\r
               <ResCreateDate>2017-10-02</ResCreateDate>\r
               <ResPickupDate>2017-10-02</ResPickupDate>\r
               <ResPickupArea>MailOrder</ResPickupArea>\r
               <ResSalesType>MailOrder</ResSalesType>\r
            </Reservation>\r
            <ClientData>\r
               <ClientType>Private</ClientType>\r
               <ClientCategory>WW</ClientCategory>\r
               <DemoLanguage>en</DemoLanguage>\r
               <DemoData>\r
                  <Bill Addr1="3000 184th Street So" City="Lynnwood" Country="US" Email="pratsenv1202@ngetestmail.com" FirstName="Pratsenvotot" LastName="Test" Name="Pratsenvotot Test" State="WA" Telephone="4252837255" Zip="98037"/>\r
                  <Ship Email="pratsenv1202@ngetestmail.com" Name="" Telephone="4252837255"/>\r
               </DemoData>\r
            </ClientData>\r
            <EntitlementAccount>\r
               <SpecifiedAccount>\r
                  <AccountItem>1</AccountItem>\r
                  <NewAccount>\r
                     <ExternalReferenceType>SWID</ExternalReferenceType>\r
                     <ExternalReferenceValue>{ABF4A795-1851-4F61-B5CF-69FC5721F383}</ExternalReferenceValue>\r
                  </NewAccount>\r
                  <AccountDemoData FirstName="Pratsenvotot"/>\r
               </SpecifiedAccount>\r
            </EntitlementAccount>\r
         </ReservationRequest>\r
      </Command>\r
   </Payload>\r
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="8912a961-f9ec-4582-8059-cac284a95b81" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b825a545-998c-4f5a-af25-892219a9147c" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="6fb99ec7-126c-4339-a5ee-b3de409581d0" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f0559886-3527-4d27-bd1d-16b3e6b9aa7d" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e5fdb29e-f208-4e0e-8c93-9cb9750db3e1" name="CreditCardDenied"><con:configuration><scriptText>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def testCase = messageExchange.modelItem.testCase;
def responseHolderProduct = groovyUtils.getXmlHolder("transmission -CreateReservation_CreditCardDenied#Response")
message = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/CommandHeader[1]/CmdError[1]/CmdErrorText[1]"]
testCase.setPropertyValue("entity",message)
if(message =='Credit Card Denied')
{
assert true
}
else
{
assert false
}
log.info "ProductUnavailable : " + message</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="CreditCardDenied" id="211f3848-08d3-44ce-adfc-a680f4d3a7ff" disabled="true"><con:settings/><con:config><script>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def responseHolderProduct = groovyUtils.getXmlHolder("transmission -CreateReservation_CreditCardDenied#Response")
message = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/CommandHeader[1]/CmdError[1]/CmdErrorText[1]"]
testRunner.testCase.setPropertyValue("entity",message)
if(message =='Credit Card Denied')
{
assert true
}
else
{
assert false
}
log.info "ProductUnavailable : " + message</script></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for CreditCardDenied_Bulk" id="04ed0e11-6c9b-44cf-b56f-2273d4209f38"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -CreateReservation_CreditCardDenied_Bulk" id="5971ad06-b3ca-4adc-85d7-7121d6ff603b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -CreateReservation_CreditCardDenied_Bulk" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <Payload>\r
      <PayloadHeader>\r
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
         <Target>Test</Target>\r
         <Version>1.0</Version>\r
         <Comm>\r
            <Protocol>IP</Protocol>\r
            <Method>Network</Method>\r
         </Comm>\r
         <TransmitDate>2017-10-02</TransmitDate>\r
         <TransmitTime>15:34:23.60</TransmitTime>\r
         <TktSeller>\r
            <TSMAC>WDPRONAWDW</TSMAC>\r
            <TSSystem>CC</TSSystem>\r
            <TSLocation>PROGENSTR</TSLocation>\r
            <TSSecurity>WaltDisney1</TSSecurity>\r
         </TktSeller>\r
         <CommandCount>1</CommandCount>\r
      </PayloadHeader>\r
      <Command>\r
         <CommandHeader>\r
            <CmdItem>1</CmdItem>\r
            <CmdTimeout>45</CmdTimeout>\r
            <CmdDate>2017-10-02</CmdDate>\r
            <CmdTime>15:34:23.61</CmdTime>\r
            <CmdInvoice>00000010002414977</CmdInvoice>\r
            <CmdDevice>127.0.0.1</CmdDevice>\r
            <CmdOperator>WDPRO</CmdOperator>\r
         </CommandHeader>\r
         <ReservationRequest>\r
            <RequestType>Create</RequestType>\r
           <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>${#TestCase#productName}</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>${#TestCase#productPrice}</ProdPrice>
            </Ticket>
           <Ticket>
               <TktItem>2</TktItem>
               <ProdCode>MC004</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>0.00</ProdPrice>
            </Ticket>
            <Payment>\r
               <PayItem>1</PayItem>\r
               <PayType>\r
                  <CreditCard>
                     <CCManual>
                        <CCNbr>4444333322221111</CCNbr>
                        <CCExpiration>1219</CCExpiration>
                        <CCVV>999</CCVV>
                        <CCName>Jame Bo</CCName>
                        <CCStreet>756 PARIS WAY</CCStreet>
                        <CCZipcode>76590</CCZipcode>
                        <CCType>DS</CCType>
                     </CCManual>
                  </CreditCard>
               </PayType>\r
                <PayAmount>10</PayAmount>
              </Payment>
             <Payment>
               <PayItem>2</PayItem>
               <PayType>
                  <CreditCard>
                     <CCManual>
                        <CCNbr>4444333322221111</CCNbr>
                        <CCExpiration>1219</CCExpiration>
                        <CCVV>999</CCVV>
                        <CCName>Jame Bo</CCName>
                        <CCStreet>756 PARIS WAY</CCStreet>
                        <CCZipcode>76590</CCZipcode>
                        <CCType>DS</CCType>
                     </CCManual>
                  </CreditCard>
                 
               </PayType>
                <PayAmount>103.96</PayAmount>
            </Payment>
            <Reservation>\r
               <ResCreateDate>2017-10-02</ResCreateDate>\r
               <ResPickupDate>2017-10-02</ResPickupDate>\r
               <ResPickupArea>MailOrder</ResPickupArea>\r
               <ResSalesType>MailOrder</ResSalesType>\r
            </Reservation>\r
            <ClientData>\r
               <ClientType>Private</ClientType>\r
               <ClientCategory>WW</ClientCategory>\r
               <DemoLanguage>en</DemoLanguage>\r
               <DemoData>\r
                  <Bill Addr1="3000 184th Street So" City="Lynnwood" Country="US" Email="pratsenv1202@ngetestmail.com" FirstName="Pratsenvotot" LastName="Test" Name="Pratsenvotot Test" State="WA" Telephone="4252837255" Zip="98037"/>\r
                  <Ship Email="pratsenv1202@ngetestmail.com" Name="" Telephone="4252837255"/>\r
               </DemoData>\r
            </ClientData>\r
            <EntitlementAccount>\r
               <SpecifiedAccount>\r
                  <AccountItem>1</AccountItem>\r
                  <NewAccount>\r
                     <ExternalReferenceType>SWID</ExternalReferenceType>\r
                     <ExternalReferenceValue>{ABF4A795-1851-4F61-B5CF-69FC5721F383}</ExternalReferenceValue>\r
                  </NewAccount>\r
                  <AccountDemoData FirstName="Pratsenvotot"/>\r
               </SpecifiedAccount>\r
            </EntitlementAccount>\r
         </ReservationRequest>\r
      </Command>\r
   </Payload>\r
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="8912a961-f9ec-4582-8059-cac284a95b81" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b825a545-998c-4f5a-af25-892219a9147c" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="6fb99ec7-126c-4339-a5ee-b3de409581d0" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f0559886-3527-4d27-bd1d-16b3e6b9aa7d" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9f214c59-7910-480a-8e51-eae387bd10a8" name="CreditCardDenied_Bulk"><con:configuration><scriptText>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def testCase = messageExchange.modelItem.testCase;
def responseHolderProduct = groovyUtils.getXmlHolder("transmission -CreateReservation_CreditCardDenied_Bulk#Response")
message = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/CommandHeader[1]/CmdError[1]/CmdErrorText[1]"]
testCase.setPropertyValue("entity",message)
if(message =='Credit Card Denied')
{
assert true
}
else
{
assert false
}
log.info "ProductUnavailable : " + message</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="CreditCardDenied_Bulk" id="2fd24333-cbdd-4f0a-bf80-2942b3b91459" disabled="true"><con:settings/><con:config><script>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def responseHolderProduct = groovyUtils.getXmlHolder("transmission -CreateReservation_CreditCardDenied#Response")
message = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/CommandHeader[1]/CmdError[1]/CmdErrorText[1]"]
testRunner.testCase.setPropertyValue("entity",message)
if(message =='Credit Card Denied')
{
assert true
}
else
{
assert false
}
log.info "ProductUnavailable : " + message</script></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for DemographicDataNotRequired" id="e9122585-ed7f-43bc-9990-29f9587fe948"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -CreateReservation_DemographicDataNotRequired" id="8175e3dc-c09d-4d28-923f-52c21a757657"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -CreateReservation_DemographicDataNotRequired" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <Payload>\r
      <PayloadHeader>\r
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
         <Target>Test</Target>\r
         <Version>1.0</Version>\r
         <Comm>\r
            <Protocol>IP</Protocol>\r
            <Method>Network</Method>\r
         </Comm>\r
         <TransmitDate>2017-10-05</TransmitDate>\r
         <TransmitTime>15:34:23.60</TransmitTime>\r
         <TktSeller>\r
            <TSMAC>WDPRONAWDW</TSMAC>\r
            <TSSystem>CC</TSSystem>\r
            <TSLocation>PROGENSTR</TSLocation>\r
            <TSSecurity>WaltDisney1</TSSecurity>\r
         </TktSeller>\r
         <CommandCount>1</CommandCount>\r
      </PayloadHeader>\r
      <Command>\r
         <CommandHeader>\r
            <CmdItem>1</CmdItem>\r
            <CmdTimeout>45</CmdTimeout>\r
            <CmdDate>2017-10-02</CmdDate>\r
            <CmdTime>15:34:23.61</CmdTime>\r
            <CmdInvoice>00000010002414977</CmdInvoice>\r
            <CmdDevice>127.0.0.1</CmdDevice>\r
            <CmdOperator>WDPRO</CmdOperator>\r
         </CommandHeader>\r
         <ReservationRequest>\r
            <RequestType>Create</RequestType>\r
            <Ticket>\r
               <TktItem>1</TktItem>\r
               <ProdCode>${#TestCase#productName}</ProdCode>\r
               <ProdQty>1</ProdQty>\r
               <ProdPrice>${#TestCase#productPrice}</ProdPrice>\r
            </Ticket>\r
            <Ticket>\r
               <TktItem>2</TktItem>\r
               <ProdCode>M0108</ProdCode>\r
               <ProdQty>1</ProdQty>\r
               <ProdPrice>0.00</ProdPrice>\r
            </Ticket>\r
            <Payment>\r
               <PayItem>1</PayItem>\r
               <PayType>\r
                  <CreditCard>\r
                     <CCManual>\r
                        <CCNbr>4444855457062688</CCNbr>\r
                        <CCExpiration>1219</CCExpiration>\r
                        <CCVV>529</CCVV>\r
                        <CCName>Jame Bo</CCName>\r
                        <CCStreet>756 PARIS WAY</CCStreet>\r
                        <CCZipcode>76590</CCZipcode>\r
                        <CCType>DS</CCType>\r
                     </CCManual>\r
                  </CreditCard>\r
               </PayType>\r
               <PayAmount>${#TestCase#productPrice}</PayAmount>\r
            </Payment>\r
            <Reservation>\r
               <ResCreateDate>2017-10-02</ResCreateDate>\r
               <ResPickupDate>2017-10-02</ResPickupDate>\r
               <ResPickupArea>MailOrder</ResPickupArea>\r
               <ResSalesType>MailOrder</ResSalesType>\r
            </Reservation>\r
            <ClientData>\r
               <ClientType>Private</ClientType>\r
               <ClientCategory>WW</ClientCategory>\r
               <DemoLanguage>en</DemoLanguage>\r
               <DemoData>\r
                  <Bill Addr1="3000 184th Street So" City="Lynnwood" Country="US" Email="pratsenv1202@ngetestmail.com" FirstName="Pratsenvotot" LastName="Test" Name="Pratsenvotot Test" State="WA" Telephone="4252837255" Zip="98037"/>\r
                  <Ship Email="pratsenv1202@ngetestmail.com" Name="" Telephone="4252837255"/>\r
               </DemoData>\r
            </ClientData>\r
            <EntitlementAccount>\r
               <SpecifiedAccount>\r
                  <AccountItem>1</AccountItem>\r
                  <NewAccount>\r
                     <ExternalReferenceType>SWID</ExternalReferenceType>\r
                     <ExternalReferenceValue>{ABF4A795-1851-4F61-B5CF-69FC5721F383}</ExternalReferenceValue>\r
                  </NewAccount>\r
                  <AccountDemoData FirstName="Pratsenvotot"/>\r
               </SpecifiedAccount>\r
            </EntitlementAccount>\r
         </ReservationRequest>\r
      </Command>\r
   </Payload>\r
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="dc5aa49e-9d39-427a-9cc3-9b0dc48d2b3e" name="Headers Existence - Script Assertion"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" id="66f2668e-e7f0-4647-a961-c56aabc6f970" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="3784e143-76f7-4b7d-a092-d5f2380fa797" name="String Validation - Script Assertion"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" id="2fe3909d-5dc3-4496-a6c1-740962e8685a" name="Numeric Validation - Script Assertion"><con:configuration/></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for DemographicDataRequired" id="64775177-8357-4ed7-af86-d6af6a0d5354"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -CreateReservation_DemographicDataRequired" id="6159b5ed-72b9-43c7-a2c6-035b4df64cb4"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -CreateReservation_DemographicDataRequired" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2017-10-05</TransmitDate>
         <TransmitTime>15:34:23.60</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PROGENSTR</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2017-10-02</CmdDate>
            <CmdTime>15:34:23.61</CmdTime>
            <CmdInvoice>00000010002414977</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <ReservationRequest>
            <RequestType>Create</RequestType>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>NW021</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdDemoData>
                 <TktDemoData Addr1="111 Main Street" City="Los Angeles" Country="US" DateOfBirth="1982-02-02" Email="dlr_apcert2@test.com" FirstName="Teri" Gender="F" LastName="Wilson" OptInSolicit="YES" State="CA" Telephone="8185495353" Zip="90002"/>
                 </ProdDemoData>
               <ProdPrice>829.64</ProdPrice>
            </Ticket>
            <Ticket>
               <TktItem>2</TktItem>
               <ProdCode>M0108</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>0.00</ProdPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCManual>
                        <CCNbr>4444855457062688</CCNbr>
                        <CCExpiration>1219</CCExpiration>
                        <CCVV>529</CCVV>
                        <CCName>Jame Bo</CCName>
                        <CCStreet>756 PARIS WAY</CCStreet>
                        <CCZipcode>76590</CCZipcode>
                        <CCType>DS</CCType>
                     </CCManual>
                  </CreditCard>

               </PayType>
               <PayAmount>829.64</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>2017-10-02</ResCreateDate>
               <ResPickupDate>2017-10-02</ResPickupDate>
               <ResPickupArea>MailOrder</ResPickupArea>
               <ResSalesType>MailOrder</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="3000 184th Street So" City="Lynnwood" Country="US" Email="pratsenv1202@ngetestmail.com" FirstName="Pratsenvotot" LastName="Test" Name="Pratsenvotot Test" State="WA" Telephone="4252837255" Zip="98037"/>
                  <Ship Email="pratsenv1202@ngetestmail.com" Name="" Telephone="4252837255"/>
               </DemoData>
            </ClientData>
            <EntitlementAccount>
               <SpecifiedAccount>
                  <AccountItem>1</AccountItem>
                  <NewAccount>
                     <ExternalReferenceType>SWID</ExternalReferenceType>
                     <ExternalReferenceValue>{ABF4A795-1851-4F61-B5CF-69FC5721F383}</ExternalReferenceValue>
                  </NewAccount>
                  <AccountDemoData FirstName="Pratsenvotot"/>
               </SpecifiedAccount>
            </EntitlementAccount>
         </ReservationRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="0bfee360-471c-4280-81b0-24890201789c" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="3b13d80d-4371-47f9-b9b3-19cc22dacc08" name="Script Assertion"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" id="e82d64a1-131e-4b56-9946-181013be697c" name="String Validation - Script Assertion"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" id="01798a98-1fed-44b2-86b1-b98ec567d72d" name="Numeric Validation - Script Assertion"><con:configuration/></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for DemographicAndNonDemo" id="24a649c2-98d1-4558-8deb-1a82c710f8e6"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -CreateReservation_DemographicAndNonDemo" id="62da3bcc-ac53-4889-b8f0-647c934fb335"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -CreateReservation_DemographicAndNonDemo" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <Payload>\r
      <PayloadHeader>\r
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
         <Target>Test</Target>\r
         <Version>1.0</Version>\r
         <Comm>\r
            <Protocol>IP</Protocol>\r
            <Method>Network</Method>\r
         </Comm>\r
         <TransmitDate>2017-10-05</TransmitDate>\r
         <TransmitTime>15:34:23.60</TransmitTime>\r
         <TktSeller>\r
            <TSMAC>WDPRONAWDW</TSMAC>\r
            <TSSystem>CC</TSSystem>\r
            <TSLocation>PROGENSTR</TSLocation>\r
            <TSSecurity>WaltDisney1</TSSecurity>\r
         </TktSeller>\r
         <CommandCount>1</CommandCount>\r
      </PayloadHeader>\r
      <Command>\r
         <CommandHeader>\r
            <CmdItem>1</CmdItem>\r
            <CmdTimeout>45</CmdTimeout>\r
            <CmdDate>2017-10-02</CmdDate>\r
            <CmdTime>15:34:23.61</CmdTime>\r
            <CmdInvoice>00000010002414977</CmdInvoice>\r
            <CmdDevice>127.0.0.1</CmdDevice>\r
            <CmdOperator>WDPRO</CmdOperator>\r
         </CommandHeader>\r
         <ReservationRequest>\r
            <RequestType>Create</RequestType>\r
            <Ticket>\r
               <TktItem>1</TktItem>\r
               <ProdCode>${#TestCase#productName}</ProdCode>\r
               <ProdQty>1</ProdQty>\r
               <ProdPrice>${#TestCase#productPrice}</ProdPrice>\r
            </Ticket>\r
            <Ticket>\r
               <TktItem>1</TktItem>\r
               <ProdCode>NW021</ProdCode>\r
               <ProdQty>1</ProdQty>\r
               <ProdDemoData>\r
                  <TktDemoData Addr1="111 Main Street" City="Los Angeles" Country="US" DateOfBirth="1982-02-02" Email="dlr_apcert2@test.com" FirstName="Teri" Gender="F" LastName="Wilson" OptInSolicit="YES" State="CA" Telephone="8185495353" Zip="90002"/>\r
               </ProdDemoData>\r
               <ProdPrice>829.64</ProdPrice>\r
            </Ticket>\r
            <Ticket>\r
               <TktItem>3</TktItem>\r
               <ProdCode>M0108</ProdCode>\r
               <ProdQty>1</ProdQty>\r
               <ProdPrice>0.00</ProdPrice>\r
            </Ticket>\r
            <Payment>\r
               <PayItem>1</PayItem>\r
               <PayType>\r
                  <CreditCard>
                     <CCManual>
                        <CCNbr>4444855457062688</CCNbr>
                        <CCExpiration>1219</CCExpiration>
                        <CCVV>529</CCVV>
                        <CCName>Jame Bo</CCName>
                        <CCStreet>756 PARIS WAY</CCStreet>
                        <CCZipcode>76590</CCZipcode>
                        <CCType>DS</CCType>
                     </CCManual>
                  </CreditCard>
               </PayType>\r
               <PayAmount>943.6</PayAmount>\r
            </Payment>\r
            <Reservation>\r
               <ResCreateDate>2017-10-02</ResCreateDate>\r
               <ResPickupDate>2017-10-02</ResPickupDate>\r
               <ResPickupArea>MailOrder</ResPickupArea>\r
               <ResSalesType>MailOrder</ResSalesType>\r
            </Reservation>\r
            <ClientData>\r
               <ClientType>Private</ClientType>\r
               <ClientCategory>WW</ClientCategory>\r
               <DemoLanguage>en</DemoLanguage>\r
               <DemoData>\r
                  <Bill Addr1="3000 184th Street So" City="Lynnwood" Country="US" Email="pratsenv1202@ngetestmail.com" FirstName="Pratsenvotot" LastName="Test" Name="Pratsenvotot Test" State="WA" Telephone="4252837255" Zip="98037"/>\r
                  <Ship Email="pratsenv1202@ngetestmail.com" Name="" Telephone="4252837255"/>\r
               </DemoData>\r
            </ClientData>\r
            <EntitlementAccount>\r
               <SpecifiedAccount>\r
                  <AccountItem>1</AccountItem>\r
                  <NewAccount>\r
                     <ExternalReferenceType>SWID</ExternalReferenceType>\r
                     <ExternalReferenceValue>{ABF4A795-1851-4F61-B5CF-69FC5721F383}</ExternalReferenceValue>\r
                  </NewAccount>\r
                  <AccountDemoData FirstName="Pratsenvotot"/>\r
               </SpecifiedAccount>\r
            </EntitlementAccount>\r
         </ReservationRequest>\r
      </Command>\r
   </Payload>\r
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="66f2668e-e7f0-4647-a961-c56aabc6f970" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="06035535-aad7-4fb9-ae63-ad98fb06dc51" name="XPath Existence - Script Assertion"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" id="e0c7f772-8380-4a47-9847-2073d4b16665" name="String Validation - Script Assertion"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" id="440dc1f8-6cbb-4b86-a4a7-4ba72c659fc7" name="Numeric Validation - Script Assertion"><con:configuration/></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for PrintAtHome" id="ec22fe15-5857-4e95-aa51-674a2d67ed5b"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -CreateReservation_PrintAtHome" id="b4b135c5-15ce-414b-a480-37ba9c64831b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -CreateReservation_PrintAtHome" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2017-10-05</TransmitDate>
         <TransmitTime>15:34:23.60</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PROGENSTR</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2017-10-02</CmdDate>
            <CmdTime>15:34:23.61</CmdTime>
            <CmdInvoice>00000010002414977</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <ReservationRequest>
            <RequestType>Create</RequestType>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>${#TestCase#productName}</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>${#TestCase#productPrice}</ProdPrice>
            </Ticket>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>NW021</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdDemoData>
                  <TktDemoData Addr1="111 Main Street" City="Los Angeles" Country="US" DateOfBirth="1982-02-02" Email="dlr_apcert2@test.com" FirstName="Teri" Gender="F" LastName="Wilson" OptInSolicit="YES" State="CA" Telephone="8185495353" Zip="90002"/>
               </ProdDemoData>
               <ProdPrice>829.64</ProdPrice>
            </Ticket>
            <Ticket>
               <TktItem>3</TktItem>
               <ProdCode>M0108</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>0.00</ProdPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCManual>
                        <CCNbr>4444855457062688</CCNbr>
                        <CCExpiration>1219</CCExpiration>
                        <CCVV>529</CCVV>
                        <CCName>Jame Bo</CCName>
                        <CCStreet>756 PARIS WAY</CCStreet>
                        <CCZipcode>76590</CCZipcode>
                        <CCType>DS</CCType>
                     </CCManual>
                  </CreditCard>
               </PayType>
               <PayAmount>943.6</PayAmount>
            </Payment>
              <Eligibility>
               <Group>BOLT</Group>
               <Member>ZMDI12E</Member>
            </Eligibility>
           <Reservation>
               <ResCode>DOLM0000010005369399</ResCode>
               <ResCreateDate>2017-10-12</ResCreateDate>
               <ResPickupDate>2017-10-12</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>PrintAtHome</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="3000 184th Street So" City="Lynnwood" Country="US" Email="pratsenv1202@ngetestmail.com" FirstName="Pratsenvotot" LastName="Test" Name="Pratsenvotot Test" State="WA" Telephone="4252837255" Zip="98037"/>
                  <Ship Email="pratsenv1202@ngetestmail.com" Name="" Telephone="4252837255"/>
               </DemoData>
            </ClientData>
         </ReservationRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="66f2668e-e7f0-4647-a961-c56aabc6f970" name="Headers Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="06035535-aad7-4fb9-ae63-ad98fb06dc51" name="XPath Existence - Script Assertion"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" id="e0c7f772-8380-4a47-9847-2073d4b16665" name="String Validation - Script Assertion"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" id="440dc1f8-6cbb-4b86-a4a7-4ba72c659fc7" name="Numeric Validation - Script Assertion"><con:configuration/></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>DTIAppUrl</con:name><con:value>https://dti-latest.disney.pvt/DTIApp/DTIApp</con:value></con:property><con:property><con:name>BasePath</con:name><con:value>/var/opt/apps/RT/schemas/</con:value></con:property><con:property><con:name>Payload_ID</con:name><con:value>91120171026150902326</con:value></con:property><con:property><con:name>factor</con:name><con:value>23</con:value></con:property><con:property><con:name>counter</con:name><con:value>100000</con:value></con:property><con:property><con:name>CurrentDate</con:name><con:value>2017-10-26</con:value></con:property><con:property><con:name>tickets</con:name><con:value><![CDATA[<Ticket> <TktItem>1</TktItem><ProdCode>10011</ProdCode><ProdQty>1</ProdQty><ProdPrice>125.67</ProdPrice></Ticket><Ticket> <TktItem>2</TktItem><ProdCode>10021</ProdCode><ProdQty>1</ProdQty><ProdPrice>122.48</ProdPrice></Ticket><Ticket> <TktItem>3</TktItem><ProdCode>10031</ProdCode><ProdQty>1</ProdQty><ProdPrice>116.09</ProdPrice></Ticket><Ticket> <TktItem>4</TktItem><ProdCode>10041</ProdCode><ProdQty>1</ProdQty><ProdPrice>113.96</ProdPrice></Ticket><Ticket> <TktItem>5</TktItem><ProdCode>10051</ProdCode><ProdQty>1</ProdQty><ProdPrice>107.57</ProdPrice></Ticket><Ticket> <TktItem>6</TktItem><ProdCode>10F01</ProdCode><ProdQty>1</ProdQty><ProdPrice>132.06</ProdPrice></Ticket><Ticket> <TktItem>7</TktItem><ProdCode>10F11</ProdCode><ProdQty>1</ProdQty><ProdPrice>125.67</ProdPrice></Ticket><Ticket> <TktItem>8</TktItem><ProdCode>10F21</ProdCode><ProdQty>1</ProdQty><ProdPrice>122.48</ProdPrice></Ticket><Ticket> <TktItem>9</TktItem><ProdCode>10F31</ProdCode><ProdQty>1</ProdQty><ProdPrice>116.09</ProdPrice></Ticket><Ticket> <TktItem>10</TktItem><ProdCode>10F41</ProdCode><ProdQty>1</ProdQty><ProdPrice>113.96</ProdPrice></Ticket><Ticket> <TktItem>11</TktItem><ProdCode>10F51</ProdCode><ProdQty>1</ProdQty><ProdPrice>107.57</ProdPrice></Ticket><Ticket> <TktItem>12</TktItem><ProdCode>1J001</ProdCode><ProdQty>1</ProdQty><ProdPrice>126.74</ProdPrice></Ticket><Ticket> <TktItem>13</TktItem><ProdCode>1J011</ProdCode><ProdQty>1</ProdQty><ProdPrice>120.35</ProdPrice></Ticket><Ticket> <TktItem>14</TktItem><ProdCode>1J021</ProdCode><ProdQty>1</ProdQty><ProdPrice>113.96</ProdPrice></Ticket><Ticket> <TktItem>15</TktItem><ProdCode>1J031</ProdCode><ProdQty>1</ProdQty><ProdPrice>107.57</ProdPrice></Ticket><Ticket> <TktItem>16</TktItem><ProdCode>1J041</ProdCode><ProdQty>1</ProdQty><ProdPrice>105.44</ProdPrice></Ticket><Ticket> <TktItem>17</TktItem><ProdCode>1J051</ProdCode><ProdQty>1</ProdQty><ProdPrice>99.05</ProdPrice></Ticket><Ticket> <TktItem>18</TktItem><ProdCode>1JF01</ProdCode><ProdQty>1</ProdQty><ProdPrice>126.74</ProdPrice></Ticket><Ticket> <TktItem>19</TktItem><ProdCode>1JF11</ProdCode><ProdQty>1</ProdQty><ProdPrice>120.35</ProdPrice></Ticket>]]></con:value></con:property><con:property><con:name>Product Code</con:name><con:value>1JF11</con:value></con:property><con:property><con:name>entity</con:name><con:value>Credit Card Denied</con:value></con:property><con:property><con:name>price</con:name><con:value>2223.8</con:value></con:property><con:property><con:name>productName</con:name><con:value>1JF21</con:value></con:property><con:property><con:name>productPrice</con:name><con:value>113.96</con:value></con:property><con:property><con:name>PDT_CODE</con:name><con:value>DMW01</con:value></con:property><con:property><con:name>ENTITY_CODE</con:name><con:value>Niche</con:value></con:property><con:property><con:name>soldOut</con:name><con:value>S0B01</con:value></con:property><con:property><con:name>lowPrice</con:name><con:value>112.96</con:value></con:property><con:property><con:name>highPrice</con:name><con:value>123.96</con:value></con:property><con:property><con:name>PRODUCT_EXPIRED_FUTURE</con:name><con:value>S0B0G</con:value></con:property><con:property><con:name>PRODUCT_EXPIRED_Past</con:name><con:value>13244</con:value></con:property><con:property><con:name>PRODUCT_UNAVAILABLE</con:name><con:value>A12345678</con:value></con:property><con:property><con:name>ENTITY_DATE_TIME</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="5d65e231-ec12-4945-a59d-61444ff1a21f" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SmokeTest_CreateTicket TestCase_S-324451" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DataBaseScript" id="fddca758-c1ce-4a02-9647-786eaa60c315"><con:settings/><con:config><script>import groovy.sql.Sql
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.OracleDriver" )
def url = 'jdbc:oracle:thin:@(description=(address=(host=lnxu002dva-scan.wdw.disney.com)(protocol=tcp)(port=1541))(connect_data=(service_name=dtis1svc.wdw.disney.com)))'
def user = 'dti_gateway'
def password = 'TARD1S09'
def driver = 'oracle.jdbc.driver.OracleDriver'
def sql = Sql.newInstance(url, user, password, driver)
//Query to get the not permited producr code
def PDT_CODE = sql.firstRow(" select  pdt_code from DTI_PRODUCT where ROWNUM = 1")
def product = "${PDT_CODE.pdt_code}"
testRunner.testCase.setPropertyValue("PDT_CODE",product.toString() )

testRunner.testCase.setPropertyValue("Invalid_Product_Code",'1J0321' )
log.info "Not permitted product code is :"+product


sql.close()</script></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload_For_Product Catalog" id="050e0bcb-bf3e-4956-b8b8-0924a6515655"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

testRunner.testCase.setPropertyValue("factor", String.valueOf(1))

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
//Extract First 20 character
Payload_ID = workString.substring(0,20)

sdf = new SimpleDateFormat("yyyy-MM-dd")
CurrentDate = sdf.format(date)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )
testRunner.testCase.setPropertyValue("CurrentDate",CurrentDate )

log.info "Payload_ID value is set to: " + Payload_ID 
log.info "CurrentDate value is set to: " + CurrentDate</script></con:config></con:testStep><con:testStep type="request" id="20b3eca6-c5ce-4366-b847-01c4365c50ad" name="transmission - InfoSys BRAVO Product Catalog"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - InfoSys BRAVO Product Catalog" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="c4a4fb7e-231a-47c9-b4b7-68737429c445"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dti-latest.disney.pvt/DTIInfoSys/DTIInfoSysServlet</con:endpoint><con:request><![CDATA[<ProductCatalogRQ xsi:noNamespaceSchemaLocation="\var\opt\apps\RT\schemas\dtiinfosys.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <PayloadHeader>\r
      <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
      <Target>Test-WDW</Target>\r
      <Version>1.0</Version>\r
      <Comm>\r
         <Protocol>IP</Protocol>\r
         <Method>Network</Method>\r
      </Comm>\r
      <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>\r
      <TransmitTime>08:29:34.374</TransmitTime>\r
   </PayloadHeader>\r
   <CommandHeader>\r
      <CmdTimeout>30</CmdTimeout>\r
      <CmdRequestor>\r
         <TSMAC>AAA212</TSMAC>\r
         <TSLocation>PROGENSTR</TSLocation>\r
         <CmdOperator>Bob</CmdOperator>\r
         <CmdActor>DVR</CmdActor>\r
      </CmdRequestor>\r
   </CommandHeader>\r
   <CommandBody>\r
      <ProviderType>Walt Disney World</ProviderType>\r
      <TSMAC>WDPRONAWDW</TSMAC>\r
      <TSLocation>PROGENSTR</TSLocation>\r
      <IncludeSoldOut>true</IncludeSoldOut>\r
      <OnSaleStartDate>2005-01-31</OnSaleStartDate>\r
      <SkipResponses>1</SkipResponses>\r
      <IncludeCalendarDetail>true</IncludeCalendarDetail>\r
   </CommandBody>\r
</ProductCatalogRQ>]]></con:request><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Element existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath + "\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * assertion to validate the String existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayloadFor100_Standard_shell" id="543f3604-dea2-47de-8393-4b22774196fa"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="groovy" name="Transfer_ProductCode" id="bd3f58f9-672a-43eb-ba27-2bd7ebaafb7a"><con:settings/><con:config><script><![CDATA[import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Get Product Code and price
def responseHolderProduct = groovyUtils.getXmlHolder("transmission - InfoSys BRAVO Product Catalog#Response")
def tickets =''
float price
def productName
def productNamePrice
for (int i = 1; i<=24; i++) {
productCode = responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product["+i+"]/ProdCode[1]"]
productPrice = responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product["+i+"]/ProdPricing[1]/ProdNetPrice[1]"]
tickets = tickets + "<Ticket> <TktItem>"+i+"</TktItem><ProdCode>"+productCode+"</ProdCode><ProdQty>1</ProdQty><ProdPrice>"+productPrice+"</ProdPrice></Ticket>"
log.info "product code is " +productCode

float newPrice = Float.parseFloat(productPrice);
priceForLowVarient = (newPrice-1).round(2)
priceForHighVarient = (newPrice+1).round(2)
price = (price+newPrice).round(2)
productName = productCode
}
log.info "priceForLowVarient :" +priceForLowVarient
log.info "priceForHighVarient :" +priceForHighVarient

log.info "productCode :" +productCode
log.info "productPrice :" +productPrice
//log.info "price" +price
log.info "price final" +price
testRunner.testCase.setPropertyValue("tickets",tickets.toString())
testRunner.testCase.setPropertyValue("price",price.toString())

testRunner.testCase.setPropertyValue("productName",productCode.toString())
testRunner.testCase.setPropertyValue("productPrice",productPrice.toString())

testRunner.testCase.setPropertyValue("priceForLowVarient",priceForLowVarient.toString())
testRunner.testCase.setPropertyValue("priceForHighVarient",priceForHighVarient.toString())

log.info "Product Price" + productPrice
log.info "Product Code" + productCode.toString()
log.info "tickets property is set to value: " + tickets.toString()
]]></script></con:config></con:testStep><con:testStep type="request" name="transmission -CreateTicket_100_Standard_shell" id="091330ed-78ce-47a3-9eaf-9df772849891"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -CreateTicket_100_Standard_shell" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}create_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <Payload>\r
      <PayloadHeader>\r
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
         <Target>Test-WDW</Target>\r
         <Version>3.0</Version>\r
         <Comm>\r
            <Protocol>IP</Protocol>\r
            <Method>Network</Method>\r
         </Comm>\r
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>\r
         <TransmitTime>13:11:00</TransmitTime>\r
         <TktSeller>\r
            <TSMAC>WDWADMIN</TSMAC>\r
            <TSSystem>CC</TSSystem>\r
            <TSLocation>mkl2</TSLocation>\r
            <TSSecurity>WaltDisney1</TSSecurity>\r
         </TktSeller>\r
         <CommandCount>1</CommandCount>\r
      </PayloadHeader>\r
      <Command>\r
         <CommandHeader>\r
            <CmdItem>1</CmdItem>\r
            <CmdTimeout>45</CmdTimeout>\r
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>\r
            <CmdTime>13:11:00</CmdTime>\r
            <CmdInvoice>99920170117000088</CmdInvoice>\r
            <CmdDevice>CreTktReq</CmdDevice>\r
            <CmdOperator>DTICTR</CmdOperator>\r
         </CommandHeader>\r
         <CreateTicketRequest>\r
            <Ticket>\r
               <TktItem>1</TktItem>\r
               <ProdCode>ALPHA-01</ProdCode>\r
               <ProdQty>1</ProdQty>\r
               <TktShell>100</TktShell>\r
               <TktNote>104372</TktNote>\r
            </Ticket>\r
         </CreateTicketRequest>\r
      </Command>\r
   </Payload>\r
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="4fc708e0-86a7-4be2-b9c2-19dd7357be56" name="Headers Existence - Script Assertion"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" id="66f2668e-e7f0-4647-a961-c56aabc6f970" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="89df7b79-fcca-4141-afb9-6a9c1feeeca2" name="String Validation - Script Assertion"><con:configuration><scriptText/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="119023fd-c289-460f-a1ca-b5315e780adb" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayloadFor_10_Standard_Ticket" id="7c5920e3-0a38-4bb5-8684-21816b0e19bb"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="groovy" name="Transfer_ProductCode_For_10_Product" id="9c62efab-acff-48b2-90da-8efcd4a7e981"><con:settings/><con:config><script><![CDATA[import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat
def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
//Get Product Code and price
def responseHolderProduct = groovyUtils.getXmlHolder("transmission - InfoSys BRAVO Product Catalog#Response")
def tickets =''
float price = 0
for (int i = 1; i<=10; i++) {
productCode = responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product["+i+"]/ProdCode[1]"]
productPrice = responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product["+i+"]/ProdPricing[1]/ProdNetPrice[1]"]
tickets = tickets + "<Ticket> <TktItem>"+i+"</TktItem><ProdCode>"+productCode+"</ProdCode><ProdQty>1</ProdQty><ProdPrice>"+productPrice+"</ProdPrice></Ticket>"
price = (price+Float.parseFloat(productPrice)).round(2)
priceForLowVariant = (price-1).round(2) 
priceForHighVariant = (price+1).round(2) 
}
log.info "price" +price
//To set Product code and price property Value
testRunner.testCase.setPropertyValue("tickets",tickets.toString())
testRunner.testCase.setPropertyValue("price",price.toString())
testRunner.testCase.setPropertyValue("priceForLowVariant",priceForLowVariant.toString())
testRunner.testCase.setPropertyValue("priceForHighVariant",priceForHighVariant.toString())
log.info "Product Price for LowVariant " + priceForLowVariant
log.info "Product Code" + productCode.toString()
log.info "tickets property is set to value: " + tickets.toString()
]]></script></con:config></con:testStep><con:testStep type="request" name="transmission -CreateTicket_10_Standard_Ticket" id="0cd25760-aa49-49d7-aec4-1a31b088a1dd"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -CreateTicket_10_Standard_Ticket" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}create_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>3.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>13:11:00</TransmitTime>
         <TktSeller>
            <TSMAC>MOBILEATS</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>MOBILEATSMK</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>13:11:00</CmdTime>
            <CmdInvoice>99920170117000088</CmdInvoice>
            <CmdDevice>CreTktReq</CmdDevice>
            <CmdOperator>DTICTR</CmdOperator>
         </CommandHeader>
         <CreateTicketRequest>
            ${#TestCase#tickets}
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCManual>
                        <CCNbr>4444855457062688</CCNbr>
                        <CCExpiration>1219</CCExpiration>
                        <CCName>Visa</CCName>
                        <CCStreet>756 PARIS WAY</CCStreet>
                        <CCZipcode>76590</CCZipcode>
                     </CCManual>
                  </CreditCard>
               </PayType>
               <PayAmount>${#TestCase#price}</PayAmount>
            </Payment>
         </CreateTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="d722b2c7-86fb-440e-8080-5b8deb82e98f" name="Headers Existence - Script Assertion"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" id="66f2668e-e7f0-4647-a961-c56aabc6f970" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="267355c6-0ce0-4b2f-8e19-d3d61ceef51e" name="String Validation - Script Assertion"><con:configuration><scriptText/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0bd3b1f9-9733-45ec-ae2a-800d3f48ead0" name="Numeric Validation - Script Assertion"><con:configuration/></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for ProductNotPermitted" id="6225ec56-7343-4002-ac47-1187535940fd"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -CreateTicket_ProductNotPermitted" id="6e3b91e0-62d8-4893-922e-e74b692ad4b1"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -CreateTicket_ProductNotPermitted" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}create_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>3.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>13:11:00</TransmitTime>
         <TktSeller>
            <TSMAC>MOBILEATS</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>MOBILEATSMK</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>13:11:00</CmdTime>
            <CmdInvoice>99920170117000088</CmdInvoice>
            <CmdDevice>CreTktReq</CmdDevice>
            <CmdOperator>DTICTR</CmdOperator>
         </CommandHeader>
         <CreateTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>${#TestCase#PDT_CODE}</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>135.67</ProdPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCManual>
                        <CCNbr>4444855457062688</CCNbr>
                        <CCExpiration>1219</CCExpiration>
                        <CCName>Visa</CCName>
                        <CCStreet>756 PARIS WAY</CCStreet>
                        <CCZipcode>76590</CCZipcode>
                     </CCManual>
                  </CreditCard>
               </PayType>
               <PayAmount>${#TestCase#price}</PayAmount>
            </Payment>
         </CreateTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="fe67b68b-a253-49f1-a9eb-16fba206ad5f" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="66f2668e-e7f0-4647-a961-c56aabc6f970" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="fbcabfba-2c2c-4bf8-9282-b2003f5097ca" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="51719428-6b09-465c-8826-758bba9d58d5" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ab283392-bc43-4f7b-b129-4811134c5a8a" name="ProductNotPermited"><con:configuration><scriptText>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def testCase = messageExchange.modelItem.testCase;
def responseHolderProduct = groovyUtils.getXmlHolder("transmission -CreateTicket_ProductNotPermitted#Response")
message = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/CommandHeader[1]/CmdError[1]/CmdErrorText[1]"]
testCase.setPropertyValue("entity",message)
if(message =='Product Not Permitted')
{
assert true
}
else
{
assert false
}
log.info "InvalidProductCode : " + message</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for InvalidProductCode" id="633002f0-cac6-4e90-b213-d5cc60d21e8e"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -CreateTicket_InvalidProductCode" id="ab76d27b-071a-4c14-88c5-0bcc780177fe"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -CreateTicket_InvalidProductCode" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}create_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>3.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>13:11:00</TransmitTime>
         <TktSeller>
            <TSMAC>MOBILEATS</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>MOBILEATSMK</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>13:11:00</CmdTime>
            <CmdInvoice>99920170117000088</CmdInvoice>
            <CmdDevice>CreTktReq</CmdDevice>
            <CmdOperator>DTICTR</CmdOperator>
         </CommandHeader>
         <CreateTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>${#TestCase#Invalid_Product_Code}</ProdCode>
               <ProdQty>1</ProdQty>
               <ProdPrice>${#TestCase#priceForLowVariant}</ProdPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCManual>
                        <CCNbr>4444855457062688</CCNbr>
                        <CCExpiration>1219</CCExpiration>
                        <CCName>Visa</CCName>
                        <CCStreet>756 PARIS WAY</CCStreet>
                        <CCZipcode>76590</CCZipcode>
                     </CCManual>
                  </CreditCard>
               </PayType>
               <PayAmount>${#TestCase#price}</PayAmount>
            </Payment>
         </CreateTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="915d07b3-6b09-4191-9be9-9a5924e61c2a" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="42593c9b-1bea-4049-9ad8-b41815d2f743" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2a016bb4-d1be-453a-878d-dbd01dee0a3c" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="90ca0110-2f24-470f-b7fd-39a3b99cd649" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="307bfe00-6a68-42d1-a598-0e076e615bca" name="InvalidProductCode"><con:configuration><scriptText>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def testCase = messageExchange.modelItem.testCase;
def responseHolderProduct = groovyUtils.getXmlHolder("transmission -CreateTicket_InvalidProductCode#Response")
message = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/CommandHeader[1]/CmdError[1]/CmdErrorText[1]"]
testCase.setPropertyValue("entity",message)
if(message =='Invalid Product Code')
{
assert true
}
else
{
assert false
}
log.info "InvalidProductCode : " + message</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for InvalidPrice_LowPriceVariant" id="321a803a-319d-45ba-8de6-3c102f9bc2a6"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -CreateTicket_InvalidPrice_LowPriceVariant" id="3739c37a-70fd-484e-83fb-06632d3d3181"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -CreateTicket_InvalidPrice_LowPriceVariant" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}create_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <Payload>\r
      <PayloadHeader>\r
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
         <Target>Test-WDW</Target>\r
         <Version>3.0</Version>\r
         <Comm>\r
            <Protocol>IP</Protocol>\r
            <Method>Network</Method>\r
         </Comm>\r
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>\r
         <TransmitTime>13:11:00</TransmitTime>\r
         <TktSeller>\r
            <TSMAC>MOBILEATS</TSMAC>\r
            <TSSystem>CC</TSSystem>\r
            <TSLocation>MOBILEATSMK</TSLocation>\r
            <TSSecurity>WaltDisney1</TSSecurity>\r
         </TktSeller>\r
         <CommandCount>1</CommandCount>\r
      </PayloadHeader>\r
      <Command>\r
         <CommandHeader>\r
            <CmdItem>1</CmdItem>\r
            <CmdTimeout>45</CmdTimeout>\r
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>\r
            <CmdTime>13:11:00</CmdTime>\r
            <CmdInvoice>99920170117000088</CmdInvoice>\r
            <CmdDevice>CreTktReq</CmdDevice>\r
            <CmdOperator>DTICTR</CmdOperator>\r
         </CommandHeader>\r
         <CreateTicketRequest>\r
            <Ticket>\r
               <TktItem>1</TktItem>\r
               <ProdCode>${#TestCase#productName}</ProdCode>\r
               <ProdQty>1</ProdQty>\r
               <ProdPrice>${#TestCase#priceForLowVariant}</ProdPrice>\r
            </Ticket>\r
            <Payment>\r
               <PayItem>1</PayItem>\r
               <PayType>\r
                  <CreditCard>\r
                     <CCManual>\r
                        <CCNbr>4444855457062688</CCNbr>\r
                        <CCExpiration>1219</CCExpiration>\r
                        <CCName>Visa</CCName>\r
                        <CCStreet>756 PARIS WAY</CCStreet>\r
                        <CCZipcode>76590</CCZipcode>\r
                     </CCManual>\r
                  </CreditCard>\r
               </PayType>\r
               <PayAmount>${#TestCase#price}</PayAmount>\r
            </Payment>\r
         </CreateTicketRequest>\r
      </Command>\r
   </Payload>\r
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="d2202758-4ef4-49f9-9845-6272b9130f44" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="fcf13f8a-ba45-4d9e-8594-0cd377b2c7c5" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ad711999-db5a-4378-9c48-068e1f8ae21a" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d9742e25-cafe-4ee6-bcd6-0d6cd54f96fc" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="5c51dcb9-b6c7-49e4-bd2c-6854c0cf735f" name="InvalidPrice_LowPriceVariant"><con:configuration><scriptText>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def testCase = messageExchange.modelItem.testCase;
def responseHolderProduct = groovyUtils.getXmlHolder("transmission -CreateTicket_InvalidPrice_LowPriceVariant#Response")
message = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/CommandHeader[1]/CmdError[1]/CmdErrorText[1]"]
testCase.setPropertyValue("entity",message)
if(message =='Invalid Price')
{
assert true
}
else
{
assert false
}
log.info "InvalidPrice_LowPriceVariant : " + message</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for InvalidPrice_HighPriceVariant" id="ea000d82-c27d-4113-9b04-ad4724b93d7b"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -CreateTicket_InvalidPrice_HighPriceVariant" id="f26a3dec-f274-4ce3-a9eb-84731304f242"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -CreateTicket_InvalidPrice_HighPriceVariant" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}create_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <Payload>\r
      <PayloadHeader>\r
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
         <Target>Test-WDW</Target>\r
         <Version>3.0</Version>\r
         <Comm>\r
            <Protocol>IP</Protocol>\r
            <Method>Network</Method>\r
         </Comm>\r
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>\r
         <TransmitTime>13:11:00</TransmitTime>\r
         <TktSeller>\r
            <TSMAC>MOBILEATS</TSMAC>\r
            <TSSystem>CC</TSSystem>\r
            <TSLocation>MOBILEATSMK</TSLocation>\r
            <TSSecurity>WaltDisney1</TSSecurity>\r
         </TktSeller>\r
         <CommandCount>1</CommandCount>\r
      </PayloadHeader>\r
      <Command>\r
         <CommandHeader>\r
            <CmdItem>1</CmdItem>\r
            <CmdTimeout>45</CmdTimeout>\r
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>\r
            <CmdTime>13:11:00</CmdTime>\r
            <CmdInvoice>99920170117000088</CmdInvoice>\r
            <CmdDevice>CreTktReq</CmdDevice>\r
            <CmdOperator>DTICTR</CmdOperator>\r
         </CommandHeader>\r
         <CreateTicketRequest>\r
            <Ticket>\r
               <TktItem>1</TktItem>\r
               <ProdCode>${#TestCase#productName}</ProdCode>\r
               <ProdQty>1</ProdQty>\r
               <ProdPrice>${#TestCase#priceForHighVariant}</ProdPrice>\r
            </Ticket>\r
            <Payment>\r
               <PayItem>1</PayItem>\r
               <PayType>\r
                  <CreditCard>\r
                     <CCManual>\r
                        <CCNbr>4444855457062688</CCNbr>\r
                        <CCExpiration>1219</CCExpiration>\r
                        <CCName>Visa</CCName>\r
                        <CCStreet>756 PARIS WAY</CCStreet>\r
                        <CCZipcode>76590</CCZipcode>\r
                     </CCManual>\r
                  </CreditCard>\r
               </PayType>\r
               <PayAmount>${#TestCase#price}</PayAmount>\r
            </Payment>\r
         </CreateTicketRequest>\r
      </Command>\r
   </Payload>\r
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="481c1dbe-6d71-4caa-a989-80684ba1ecb2" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4a94b1a8-8a59-4c61-a63f-df448517ab3f" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8e7023f0-63a8-4cf4-87ac-0754fbccb478" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="157238ee-0c5f-49dc-b275-f32408c1c6f8" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2830b48b-9844-4445-af99-be0db0637547" name="InvalidPrice_HighPriceVariant"><con:configuration><scriptText>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def testCase = messageExchange.modelItem.testCase;
def responseHolderProduct = groovyUtils.getXmlHolder("transmission -CreateTicket_InvalidPrice_LowPriceVariant#Response")
message = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/CommandHeader[1]/CmdError[1]/CmdErrorText[1]"]
testCase.setPropertyValue("entity",message)
if(message =='Invalid Price')
{
assert true
}
else
{
assert false
}
log.info "InvalidPrice_LowPriceVariant : " + message</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>DTIAppUrl</con:name><con:value>https://dti-latest.disney.pvt/DTIApp/DTIApp</con:value></con:property><con:property><con:name>BasePath</con:name><con:value>/var/opt/apps/RT/schemas/</con:value></con:property><con:property><con:name>Payload_ID</con:name><con:value>91120171031150945449</con:value></con:property><con:property><con:name>factor</con:name><con:value>9</con:value></con:property><con:property><con:name>counter</con:name><con:value>100000</con:value></con:property><con:property><con:name>CurrentDate</con:name><con:value>2017-10-30</con:value></con:property><con:property><con:name>tickets</con:name><con:value><![CDATA[<Ticket> <TktItem>1</TktItem><ProdCode>10011</ProdCode><ProdQty>1</ProdQty><ProdPrice>125.67</ProdPrice></Ticket><Ticket> <TktItem>2</TktItem><ProdCode>10021</ProdCode><ProdQty>1</ProdQty><ProdPrice>122.48</ProdPrice></Ticket><Ticket> <TktItem>3</TktItem><ProdCode>10031</ProdCode><ProdQty>1</ProdQty><ProdPrice>116.09</ProdPrice></Ticket><Ticket> <TktItem>4</TktItem><ProdCode>10041</ProdCode><ProdQty>1</ProdQty><ProdPrice>113.96</ProdPrice></Ticket><Ticket> <TktItem>5</TktItem><ProdCode>10051</ProdCode><ProdQty>1</ProdQty><ProdPrice>107.57</ProdPrice></Ticket><Ticket> <TktItem>6</TktItem><ProdCode>10F01</ProdCode><ProdQty>1</ProdQty><ProdPrice>132.06</ProdPrice></Ticket><Ticket> <TktItem>7</TktItem><ProdCode>10F11</ProdCode><ProdQty>1</ProdQty><ProdPrice>125.67</ProdPrice></Ticket><Ticket> <TktItem>8</TktItem><ProdCode>10F21</ProdCode><ProdQty>1</ProdQty><ProdPrice>122.48</ProdPrice></Ticket><Ticket> <TktItem>9</TktItem><ProdCode>10F31</ProdCode><ProdQty>1</ProdQty><ProdPrice>116.09</ProdPrice></Ticket><Ticket> <TktItem>10</TktItem><ProdCode>10F41</ProdCode><ProdQty>1</ProdQty><ProdPrice>113.96</ProdPrice></Ticket>]]></con:value></con:property><con:property><con:name>Product Code</con:name><con:value>1JF11</con:value></con:property><con:property><con:name>entity</con:name><con:value>Invalid Product Code</con:value></con:property><con:property><con:name>price</con:name><con:value>1196.03</con:value></con:property><con:property><con:name>productName</con:name><con:value>1K001</con:value></con:property><con:property><con:name>productPrice</con:name><con:value>185.31</con:value></con:property><con:property><con:name>PDT_CODE</con:name><con:value>DMW01</con:value></con:property><con:property><con:name>ENTITY_CODE</con:name><con:value>Niche</con:value></con:property><con:property><con:name>soldOut</con:name><con:value>S0B01</con:value></con:property><con:property><con:name>lowPrice</con:name><con:value>112.96</con:value></con:property><con:property><con:name>highPrice</con:name><con:value>123.96</con:value></con:property><con:property><con:name>PRODUCT_EXPIRED_FUTURE</con:name><con:value>S0B0G</con:value></con:property><con:property><con:name>PRODUCT_EXPIRED_Past</con:name><con:value>13244</con:value></con:property><con:property><con:name>PRODUCT_UNAVAILABLE</con:name><con:value>A12345678</con:value></con:property><con:property><con:name>ENTITY_DATE_TIME</con:name><con:value>4</con:value></con:property><con:property><con:name>priceForLowVariant</con:name><con:value>1195.03</con:value></con:property><con:property><con:name>priceForHighVariant</con:name><con:value>1197.03</con:value></con:property><con:property><con:name>priceForLowVarient</con:name><con:value>184.31</con:value></con:property><con:property><con:name>priceForHighVarient</con:name><con:value>186.31</con:value></con:property><con:property><con:name>Invalid_Product_Code</con:name><con:value>1J0321</con:value></con:property></con:properties></con:testCase><con:testCase id="4e06843d-be98-47be-8cf9-2c877d901c14" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SmokeTest_UpgradeAlpha TestCase_S-324451" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DataBaseScript" id="30fd1379-349d-4f52-8baf-30ac58b4460f"><con:settings/><con:config><script>import groovy.sql.Sql
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.OracleDriver" )
def url = 'jdbc:oracle:thin:@(description=(address=(host=lnxu002dva-scan.wdw.disney.com)(protocol=tcp)(port=1541))(connect_data=(service_name=dtis1svc.wdw.disney.com)))'
def user = 'dti_gateway'
def password = 'TARD1S09'
def driver = 'oracle.jdbc.driver.OracleDriver'
def sql = Sql.newInstance(url, user, password, driver)
//==================================
//Query to get the sold out product code
def result = sql.firstRow("select PDT_CODE from DTI_PRODUCT where ACTIVE_IND ='T' and sold_out is not null and rownum =1")
soldOut="${result.PDT_CODE}"
testRunner.testCase.setPropertyValue("soldOut",soldOut.toString() )
log.info "SoldOut product code is :"+soldOut
//==================================
//Query to get the not permited producr code
def PDT_CODE = sql.firstRow(" select pdt_code from DTI_PRODUCT where ROWNUM = 1")
def product = "${PDT_CODE.pdt_code}"
testRunner.testCase.setPropertyValue("PDT_CODE",product.toString() )
log.info "Not permitted product code is :"+product
//==================================
//Query to get the inactive entity
def ENTITY = sql.firstRow("select ENTITY_CODE from TICKET_SELLER_ENTITY where ACTIVE_IND='F'  and  rownum=1")
def ENTITY_CODE = "${ENTITY.ENTITY_CODE}"
log.info "Inactive entity found as :"+ENTITY_CODE 
testRunner.testCase.setPropertyValue("ENTITY_CODE",ENTITY_CODE.toString() )
//==================================

//Query to get the prodcut code expired future variant
def codeResult = sql.firstRow("select PDT_CODE from DTI_Product where START_SALE_DATE > current_timestamp and rownum =1")
def productCodeExpiredFuture = "${codeResult.PDT_CODE}"
log.info "Product code expired future  :"+productCodeExpiredFuture 

testRunner.testCase.setPropertyValue("PRODUCT_EXPIRED_FUTURE",productCodeExpiredFuture.toString() )
//==================================
//Query to get the prodcut code expired past variant
def productCodeExpired = sql.firstRow("select PDT_CODE from DTI_Product where  END_SALE_DATE &lt; current_timestamp and rownum =1")
def productCodeExpiredPast = "${productCodeExpired.PDT_CODE}"
log.info "Product code expired past  :"+productCodeExpiredPast 
testRunner.testCase.setPropertyValue("PRODUCT_EXPIRED_PAST",productCodeExpiredPast.toString() )

//==================================
//Query to get the prodcut unavailable
def productUnavailable = sql.firstRow("select PDT_CODE from DTI_PRODUCT where ACTIVE_IND ='F' and rownum = 1")
def productCodeUnavailable = "${productUnavailable.PDT_CODE}"
log.info "Product code unavailable  :"+productCodeUnavailable 
testRunner.testCase.setPropertyValue("PRODUCT_UNAVAILABLE",productCodeUnavailable.toString() )


//==================================
//Query to get Entity valid start date and Time
def validEntityDateTime = sql.firstRow("select count(*) as numberOfRows from ticket_seller_entity where START_VALID_DATE &lt;= sysdate and END_VALID_DATE >= sysdate and START_VALID_TIME >= to_char(SYSDATE, 'HH24:MI') and END_VALID_TIME >= to_char(SYSDATE, 'HH24:MI') and ENTITY_CODE='PROGENSTR'")
def entityDateTime = "${validEntityDateTime.numberOfRows}"
log.info "entityDateTime ...  :"+entityDateTime 
testRunner.testCase.setPropertyValue("ENTITY_DATE_TIME",entityDateTime.toString() )
sql.close()</script></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload_For_WDW Create Tkt" id="ed680778-7197-42fe-8b78-6dd73208ea1d"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

testRunner.testCase.setPropertyValue("factor", String.valueOf(1))

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
//Extract First 20 character
Payload_ID = workString.substring(0,20)

sdf = new SimpleDateFormat("yyyy-MM-dd")
CurrentDate = sdf.format(date)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )
testRunner.testCase.setPropertyValue("CurrentDate",CurrentDate )

log.info "Payload_ID value is set to: " + Payload_ID 
log.info "CurrentDate value is set to: " + CurrentDate</script></con:config></con:testStep><con:testStep type="request" id="19a6d541-56f0-4472-9854-10b3b307aeee" name="transmission - WDW_Create_Tkt_Alpha_Shells"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - WDW_Create_Tkt_Alpha_Shells" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="b35c1dd2-c939-4070-882d-a52bfab2aa56"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppURL}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}create_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>${#TestCase#Payload_ID}</PayloadID>
      <Target>Test-WDW</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>  
      <TransmitTime>14:02:03.280</TransmitTime>  
      <TktSeller> 
        <TSMAC>WDWADMIN</TSMAC>  
        <TSSystem>DTIAdminV1</TSSystem>  
        <TSLocation>mkl2</TSLocation>  
        <TSSecurity>Admin1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>${#TestCase#CurrentDate}</CmdDate>  
        <CmdTime>14:02:03.280</CmdTime>  
        <CmdInvoice>CreTktReq</CmdInvoice>  
        <CmdDevice>DTICTR</CmdDevice>  
        <CmdOperator>DTI</CmdOperator>  
        <CmdNote>DTI Create 1</CmdNote> 
      </CommandHeader>  
      <CreateTicketRequest> 
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>ALPHA-03</ProdCode>  
          <ProdQty>10</ProdQty>  
          <TktShell>2</TktShell>  
          <TktNote>100018</TktNote> 
        </Ticket> 
      </CreateTicketRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="aa83a569-525c-4ff9-a538-1ca43094ff11" name="Header_Existance" disabled="true"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="bd51a49a-9c91-4a02-8298-0a5297b3d0f2" name="Xpath Existance" disabled="true"><con:configuration><scriptText>/*
 * Script assertion to validate the Xpath existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Xpath Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="88964a58-f73d-490f-ac30-a613f5648ca8" name="Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Script assertion to validate the String existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="de817a90-400d-4851-8ea7-ce3f315ed5b5" name="Numeric Validation" disabled="true"><con:configuration><scriptText>/*
 * Script assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload_For_Product Catalog" id="1bf1a229-dad2-4b50-9fb0-b227c93541c0"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" id="a2d9ca4c-6733-4fc2-81d8-0f5c90497fcf" name="transmission - InfoSys BRAVO Product Catalog"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - InfoSys BRAVO Product Catalog" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="c4a4fb7e-231a-47c9-b4b7-68737429c445"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dti-latest.disney.pvt/DTIInfoSys/DTIInfoSysServlet</con:endpoint><con:request><![CDATA[<ProductCatalogRQ xsi:noNamespaceSchemaLocation="\var\opt\apps\RT\schemas\dtiinfosys.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <PayloadHeader>
      <PayloadID>${#TestCase#Payload_ID}</PayloadID>
      <Target>Test-WDW</Target>
      <Version>1.0</Version>
      <Comm>
         <Protocol>IP</Protocol>
         <Method>Network</Method>
      </Comm>
      <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
      <TransmitTime>08:29:34.374</TransmitTime>
   </PayloadHeader>
   <CommandHeader>
      <CmdTimeout>30</CmdTimeout>
      <CmdRequestor>
                <TSMAC>AAA212</TSMAC>
         <TSLocation>08625050</TSLocation>
         <CmdOperator>Bob</CmdOperator>
         <CmdActor>DVR</CmdActor>
      </CmdRequestor>
   </CommandHeader>
   <CommandBody>
      <ProviderType>Walt Disney World</ProviderType>
      <TSMAC>AAA212</TSMAC>
      <TSLocation>08625050</TSLocation>
      <IncludeSoldOut>true</IncludeSoldOut>
      <OnSaleStartDate>2005-01-31</OnSaleStartDate>
      <SkipResponses>1</SkipResponses>
      <IncludeCalendarDetail>true</IncludeCalendarDetail>
   </CommandBody>
</ProductCatalogRQ>]]></con:request><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="Headers Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="XPath Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Element existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath + "\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="String Validation - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * assertion to validate the String existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="Numeric Validation - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Script assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Transfer_MagTrack1" id="97f12851-c874-4186-8930-7fb6ee95718b"><con:settings/><con:config><script>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Get Product Code and price
def responseHolderProduct = groovyUtils.getXmlHolder("transmission - InfoSys BRAVO Product Catalog#Response")

def productQueryString =''
for (int i = 1; i&lt;=10; i++) {
prodGuestType = responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product["+i+"]/ProdDetails[1]/ProdGuestType[1]"]

if(prodGuestType == 'Adult')
{
productCodeAdult = responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product["+i+"]/ProdCode[1]"]
productPriceAdult = responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product["+i+"]/ProdPricing[1]/ProdNetPrice[1]"]

testRunner.testCase.setPropertyValue("productCodeAdult",productCodeAdult)
testRunner.testCase.setPropertyValue("productPriceAdult",productPriceAdult)
}

if(prodGuestType == 'Child')
{
productCodeChild = responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product["+i+"]/ProdCode[1]"]
productPriceChild = responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product["+i+"]/ProdPricing[1]/ProdNetPrice[1]"]

testRunner.testCase.setPropertyValue("productCodeChild",productCodeChild)
testRunner.testCase.setPropertyValue("productPriceChild",productPriceChild)
}
}
//To get the thired product
for (int i = 11; i&lt;=24; i++) {
prodGuestType = responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product["+i+"]/ProdDetails[1]/ProdGuestType[1]"]

if(prodGuestType == 'Adult')
{
thiredproductCodeAdult = responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product["+i+"]/ProdCode[1]"]
thiredproductPriceAdult = responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product["+i+"]/ProdPricing[1]/ProdNetPrice[1]"]

testRunner.testCase.setPropertyValue("thiredproductCodeAdult",thiredproductCodeAdult)
testRunner.testCase.setPropertyValue("thiredproductPriceAdult",thiredproductPriceAdult)
}
}


log.info "productCodeAdult :" +productCodeAdult
log.info "productPriceAdult :" +productPriceAdult
log.info "productCodeChild :" +productCodeChild
log.info "productPriceChild :" +productPriceChild
log.info "thiredproductCodeAdult :" +thiredproductCodeAdult
log.info "thiredproductPriceAdult :" +thiredproductPriceAdult

//Get Magic Track
def responseHolderCreateMag = groovyUtils.getXmlHolder("transmission - WDW_Create_Tkt_Alpha_Shells#Response")

adultMag = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[1]/TktID[1]/Mag[1]"]
childMag = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[2]/TktID[1]/Mag[1]"]
adultAndChildMag1 = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[3]/TktID[1]/Mag[1]"]
adultAndChildMag2 = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[4]/TktID[1]/Mag[1]"]
eightTicketMag = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[5]/TktID[1]/Mag[1]"]
threeDiffProductMag = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[6]/TktID[1]/Mag[1]"]
thiredproductPriceAdultMag = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[7]/TktID[1]/Mag[1]"]
thiredproductPriceAdultMag1 = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[8]/TktID[1]/Mag[1]"]
thiredproductPriceAdultMag2 = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[9]/TktID[1]/Mag[1]"]
multiTicketMag = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[10]/TktID[1]/Mag[1]"]

testRunner.testCase.setPropertyValue("adultMag",adultMag.toString())
testRunner.testCase.setPropertyValue("childMag",childMag.toString())
testRunner.testCase.setPropertyValue("adultAndChildMag1",adultAndChildMag1.toString())
testRunner.testCase.setPropertyValue("adultAndChildMag2",adultAndChildMag2.toString())
testRunner.testCase.setPropertyValue("eightTicketMag",eightTicketMag.toString())
testRunner.testCase.setPropertyValue("threeDiffProductMag",threeDiffProductMag.toString())
testRunner.testCase.setPropertyValue("thiredproductPriceAdultMag",thiredproductPriceAdultMag.toString())
testRunner.testCase.setPropertyValue("thiredproductPriceAdultMag1",thiredproductPriceAdultMag1.toString())
testRunner.testCase.setPropertyValue("thiredproductPriceAdultMag2",thiredproductPriceAdultMag2.toString())
testRunner.testCase.setPropertyValue("multiTicketMag",multiTicketMag.toString())
log.info "adultMag :" + adultMag
log.info "childMag :" + childMag
log.info "adultAndChildMag1 :" + adultAndChildMag1
log.info "adultAndChildMag2 :" + adultAndChildMag2
log.info "eightTicketMag :" + eightTicketMag
log.info "threeDiffProductMag :" + threeDiffProductMag
log.info "thiredproductPriceAdultMag1 :" + thiredproductPriceAdultMag1
log.info "thiredproductPriceAdultMag2 :" + thiredproductPriceAdultMag2
log.info "multiTicketMag :" + multiTicketMag





</script></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayloadFor_UpgradeAlpha ADULT_shell" id="b8d53191-3290-4062-839b-d340c62659e4"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -UpgradeAlpha_ ADULT_shell" id="37a3fdd6-21fd-4194-8a65-d8f4b95ec56f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -UpgradeAlpha_ ADULT_shell" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}upgrade_alpha_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <Payload>\r
      <PayloadHeader>\r
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
         <Target>Test-WDW</Target>\r
         <Version>3.0</Version>\r
         <Comm>\r
            <Protocol>IP</Protocol>\r
            <Method>Network</Method>\r
         </Comm>\r
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>\r
         <TransmitTime>13:11:00</TransmitTime>\r
         <TktSeller>\r
            <TSMAC>AAA212</TSMAC>\r
            <TSSystem>CC</TSSystem>\r
            <TSLocation>08625050</TSLocation>\r
            <TSSecurity>WaltDisney1</TSSecurity>\r
         </TktSeller>\r
         <CommandCount>1</CommandCount>\r
      </PayloadHeader>\r
      <Command>\r
         <CommandHeader>\r
            <CmdItem>1</CmdItem>\r
            <CmdTimeout>45</CmdTimeout>\r
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>\r
            <CmdTime>13:11:00</CmdTime>\r
            <CmdInvoice>4094635-3</CmdInvoice>\r
            <CmdDevice>527</CmdDevice>\r
            <CmdOperator>527</CmdOperator>\r
         </CommandHeader>\r
         <UpgradeAlphaRequest>\r
           <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>${#TestCase#productCodeAdult}</ProdCode>  
          <ProdPrice>${#TestCase#productPriceAdult}</ProdPrice>  
          <TktID> 
            <Mag> 
              <MagTrack1> ${#TestCase#adultMag} </MagTrack1> 
              <MagTrack2>78=100018</MagTrack2>
            </Mag> 
          </TktID> 
          </Ticket>
         </UpgradeAlphaRequest>\r
      </Command>\r
   </Payload>\r
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="4fc708e0-86a7-4be2-b9c2-19dd7357be56" name="Headers Existence - Script Assertion"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" id="66f2668e-e7f0-4647-a961-c56aabc6f970" name="XPath Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="89df7b79-fcca-4141-afb9-6a9c1feeeca2" name="String Validation - Script Assertion"><con:configuration><scriptText/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="119023fd-c289-460f-a1ca-b5315e780adb" name="Numeric Validation - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayloadFor_CHILD_shell" id="681022df-98bd-4a89-b78a-3d35f54923bc"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -UpgradeAlpha_CHILD_shell" id="a5bfdb3a-a232-4157-bf23-b82295c14c32"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -UpgradeAlpha_CHILD_shell" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}upgrade_alpha_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>3.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>13:11:00</TransmitTime>
         <TktSeller>
            <TSMAC>AAA212</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>08625050</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>13:11:00</CmdTime>
            <CmdInvoice>50100118560740818003</CmdInvoice>
            <CmdDevice>WDPRO</CmdDevice>
            <CmdOperator>bpacifico</CmdOperator>
         </CommandHeader>
         <UpgradeAlphaRequest>
           <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>${#TestCase#productCodeChild}</ProdCode>  
          <ProdPrice>${#TestCase#productPriceChild}</ProdPrice>  
          <TktID> 
            <Mag> 
              <MagTrack1> ${#TestCase#childMag} </MagTrack1> 
              <MagTrack2>79=100010</MagTrack2>
            </Mag> 
          </TktID> 
          </Ticket>
         </UpgradeAlphaRequest>
      </Command>
   </Payload>

</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="d722b2c7-86fb-440e-8080-5b8deb82e98f" name="Headers Existence - Script Assertion"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" id="66f2668e-e7f0-4647-a961-c56aabc6f970" name="XPath Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="267355c6-0ce0-4b2f-8e19-d3d61ceef51e" name="String Validation - Script Assertion"><con:configuration><scriptText/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0bd3b1f9-9733-45ec-ae2a-800d3f48ead0" name="Numeric Validation - Script Assertion"><con:configuration/></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for ProductNotPermitted" id="bcd66127-3140-4e48-8147-d9185ed6efab"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -UpgradeAlpha_ProductNotPermitted" id="ff085945-fd70-4d05-bc60-32148e384d14"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -UpgradeAlpha_ProductNotPermitted" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}upgrade_alpha_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <Payload>\r
      <PayloadHeader>\r
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
         <Target>Test-WDW</Target>\r
         <Version>3.0</Version>\r
         <Comm>\r
            <Protocol>IP</Protocol>\r
            <Method>Network</Method>\r
         </Comm>\r
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>\r
         <TransmitTime>13:11:00</TransmitTime>\r
         <TktSeller>\r
            <TSMAC>AAA212</TSMAC>\r
            <TSSystem>CC</TSSystem>\r
            <TSLocation>08625050</TSLocation>\r
            <TSSecurity>WaltDisney1</TSSecurity>\r
         </TktSeller>\r
         <CommandCount>1</CommandCount>\r
      </PayloadHeader>\r
      <Command>\r
         <CommandHeader>\r
            <CmdItem>1</CmdItem>\r
            <CmdTimeout>45</CmdTimeout>\r
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>\r
            <CmdTime>13:11:00</CmdTime>\r
            <CmdInvoice>50100118560740818003</CmdInvoice>\r
            <CmdDevice>WDPRO</CmdDevice>\r
            <CmdOperator>bpacifico</CmdOperator>\r
         </CommandHeader>\r
         <UpgradeAlphaRequest>\r
            <Ticket>\r
               <TktItem>1</TktItem>\r
               <ProdCode>DMW01</ProdCode>\r
               <ProdPrice>${#TestCase#productPriceAdult}</ProdPrice>\r
               <TktID>\r
                  <Mag>\r
                     <MagTrack1> ${#TestCase#adultMag} </MagTrack1>\r
                     <MagTrack2>78=100018</MagTrack2>\r
                  </Mag>\r
               </TktID>\r
            </Ticket>\r
         </UpgradeAlphaRequest>\r
      </Command>\r
   </Payload>\r
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="fe67b68b-a253-49f1-a9eb-16fba206ad5f" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="66f2668e-e7f0-4647-a961-c56aabc6f970" name="XPath Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="fbcabfba-2c2c-4bf8-9282-b2003f5097ca" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="51719428-6b09-465c-8826-758bba9d58d5" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ab283392-bc43-4f7b-b129-4811134c5a8a" name="ProductNotPermited"><con:configuration><scriptText>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def testCase = messageExchange.modelItem.testCase;
def responseHolderProduct = groovyUtils.getXmlHolder("transmission -UpgradeAlpha_ProductNotPermitted#Response")
message = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/CommandHeader[1]/CmdError[1]/CmdErrorText[1]"]
testCase.setPropertyValue("entity",message)
if(message =='Product Not Permitted')
{
assert true
}
else
{
assert false
}
log.info "InvalidProductCode : " + message</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for Invalid Entity" id="62ea0a29-e90a-498b-920d-0cba2ac78f3a"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -UpgradeAlpha_Invalid Entity" id="998267ba-e917-4986-a947-08403b1b78c7"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -UpgradeAlpha_Invalid Entity" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}upgrade_alpha_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>3.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>13:11:00</TransmitTime>
         <TktSeller>
            <TSMAC></TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>08625050</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>13:11:00</CmdTime>
            <CmdInvoice>50100118560740818003</CmdInvoice>
            <CmdDevice>WDPRO</CmdDevice>
            <CmdOperator>bpacifico</CmdOperator>
         </CommandHeader>
         <UpgradeAlphaRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>3JA01</ProdCode>
               <ProdPrice>275.84</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1>KFIMJ4IHI1KLJYIIZIHXNOHHERI5XHHHHHHMFVMJ4IHI1KLJYIIZIHXNOHHERI5XHHHHHHM</MagTrack1>
                     <MagTrack2>78=100018</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
         </UpgradeAlphaRequest>
      </Command>
   </Payload>

</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="915d07b3-6b09-4191-9be9-9a5924e61c2a" name="Headers Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="42593c9b-1bea-4049-9ad8-b41815d2f743" name="XPath Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2a016bb4-d1be-453a-878d-dbd01dee0a3c" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="90ca0110-2f24-470f-b7fd-39a3b99cd649" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="307bfe00-6a68-42d1-a598-0e076e615bca" name="InvalidProductCode"><con:configuration/></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for InvalidPrice_LowPriceVariant" id="43f17910-dcbe-4428-b1f4-cd523810d5f7"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -UpgradeAlpha_InvalidPrice_LowPriceVariant" id="0be0f823-733b-4e1d-9745-1d14c3d2eff0"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -UpgradeAlpha_InvalidPrice_LowPriceVariant" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}upgrade_alpha_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>3.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>13:11:00</TransmitTime>
         <TktSeller>
            <TSMAC>AAA212</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>08625050</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>13:11:00</CmdTime>
            <CmdInvoice>50100118560740818003</CmdInvoice>
            <CmdDevice>WDPRO</CmdDevice>
            <CmdOperator>bpacifico</CmdOperator>
         </CommandHeader>
         <UpgradeAlphaRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>3JA01</ProdCode>
               <ProdPrice>270.84</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1>KFIMJ4IHI1KLJYIIZIHXNOHHERI5XHHHHHHMFVMJ4IHI1KLJYIIZIHXNOHHERI5XHHHHHHM</MagTrack1>
                     <MagTrack2>78=100018</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
         </UpgradeAlphaRequest>
      </Command>
   </Payload>

</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="d2202758-4ef4-49f9-9845-6272b9130f44" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="fcf13f8a-ba45-4d9e-8594-0cd377b2c7c5" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ad711999-db5a-4378-9c48-068e1f8ae21a" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d9742e25-cafe-4ee6-bcd6-0d6cd54f96fc" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="5c51dcb9-b6c7-49e4-bd2c-6854c0cf735f" name="InvalidPrice_LowPriceVariant"><con:configuration><scriptText>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def testCase = messageExchange.modelItem.testCase;
def responseHolderProduct = groovyUtils.getXmlHolder("transmission -UpgradeAlpha_InvalidPrice_LowPriceVariant#Response")
message = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/CommandHeader[1]/CmdError[1]/CmdErrorText[1]"]
testCase.setPropertyValue("entity",message)
if(message =='Invalid Price')
{
assert true
}
else
{
assert false
}
log.info "InvalidPrice_LowPriceVariant : " + message</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for InvalidPrice_HighPriceVariant" id="07b80b7a-2743-4a96-84ad-71487d9fb713"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -UpgradeAlpha_InvalidPrice_HighPriceVariant" id="f3b28869-8386-49a3-becb-aeb05b290c33"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -UpgradeAlpha_InvalidPrice_HighPriceVariant" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}upgrade_alpha_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>3.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>13:11:00</TransmitTime>
         <TktSeller>
            <TSMAC>AAA212</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>08625050</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>13:11:00</CmdTime>
            <CmdInvoice>50100118560740818003</CmdInvoice>
            <CmdDevice>WDPRO</CmdDevice>
            <CmdOperator>bpacifico</CmdOperator>
         </CommandHeader>
         <UpgradeAlphaRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>3JA01</ProdCode>
               <ProdPrice>285.84</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1>KFIMJ4IHI1KLJYIIZIHXNOHHERI5XHHHHHHMFVMJ4IHI1KLJYIIZIHXNOHHERI5XHHHHHHM</MagTrack1>
                     <MagTrack2>78=100018</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
         </UpgradeAlphaRequest>
      </Command>
   </Payload>

</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="481c1dbe-6d71-4caa-a989-80684ba1ecb2" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4a94b1a8-8a59-4c61-a63f-df448517ab3f" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="8e7023f0-63a8-4cf4-87ac-0754fbccb478" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="157238ee-0c5f-49dc-b275-f32408c1c6f8" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2830b48b-9844-4445-af99-be0db0637547" name="InvalidPrice_HighPriceVariant"><con:configuration><scriptText>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def testCase = messageExchange.modelItem.testCase;
def responseHolderProduct = groovyUtils.getXmlHolder("transmission -UpgradeAlpha_InvalidPrice_HighPriceVariant#Response")
message = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/CommandHeader[1]/CmdError[1]/CmdErrorText[1]"]
testCase.setPropertyValue("entity",message)
if(message =='Invalid Price')
{
assert true
}
else
{
assert false
}
log.info "InvalidPrice_LowPriceVariant : " + message</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayloadFor_ADULT_And_CHILD_shell" id="d5b26141-3d33-48ea-bec8-b64c9729c9ec"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -UpgradeAlpha_ADULT_And_CHILD_shell" id="c1e896ec-8e55-46bf-99eb-002fee88cb06"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -UpgradeAlpha_ADULT_And_CHILD_shell" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}upgrade_alpha_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <Payload>\r
      <PayloadHeader>\r
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
         <Target>Test-WDW</Target>\r
         <Version>3.0</Version>\r
         <Comm>\r
            <Protocol>IP</Protocol>\r
            <Method>Network</Method>\r
         </Comm>\r
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>\r
         <TransmitTime>13:11:00</TransmitTime>\r
         <TktSeller>\r
            <TSMAC>AAA212</TSMAC>\r
            <TSSystem>CC</TSSystem>\r
            <TSLocation>08625050</TSLocation>\r
            <TSSecurity>WaltDisney1</TSSecurity>\r
         </TktSeller>\r
         <CommandCount>1</CommandCount>\r
      </PayloadHeader>\r
      <Command>\r
         <CommandHeader>\r
            <CmdItem>1</CmdItem>\r
            <CmdTimeout>45</CmdTimeout>\r
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>\r
            <CmdTime>13:11:00</CmdTime>\r
            <CmdInvoice>50100118560740818003</CmdInvoice>\r
            <CmdDevice>WDPRO</CmdDevice>\r
            <CmdOperator>bpacifico</CmdOperator>\r
         </CommandHeader>\r
         <UpgradeAlphaRequest>\r
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>${#TestCase#productCodeAdult}</ProdCode>
               <ProdPrice>${#TestCase#productPriceAdult}</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> ${#TestCase#adultAndChildMag1} </MagTrack1>
                     <MagTrack2>78=100018</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
            <Ticket>
               <TktItem>2</TktItem>
               <ProdCode>${#TestCase#productCodeChild}</ProdCode>
               <ProdPrice>${#TestCase#productPriceChild}</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> ${#TestCase#adultAndChildMag2} </MagTrack1>
                     <MagTrack2>79=100010</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>

         </UpgradeAlphaRequest>\r
      </Command>\r
   </Payload>\r
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="d722b2c7-86fb-440e-8080-5b8deb82e98f" name="Headers Existence - Script Assertion"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" id="66f2668e-e7f0-4647-a961-c56aabc6f970" name="XPath Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="267355c6-0ce0-4b2f-8e19-d3d61ceef51e" name="String Validation - Script Assertion"><con:configuration><scriptText/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0bd3b1f9-9733-45ec-ae2a-800d3f48ead0" name="Numeric Validation - Script Assertion"><con:configuration/></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload_For_WDW Create Tkt_8" id="515bd20b-0e6e-4b70-8d31-9286c0b129ed"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" id="0d8347a5-a13b-4d9b-8d11-dd27e0dd61d6" name="transmission - WDW Create Tkt Alpha Shells(8)"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - WDW Create Tkt Alpha Shells(8)" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="b35c1dd2-c939-4070-882d-a52bfab2aa56"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppURL}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}create_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
     <PayloadID>${#TestCase#Payload_ID}</PayloadID> 
      <Target>Test-WDW</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>  
      <TransmitTime>14:02:03.280</TransmitTime>  
      <TktSeller> 
        <TSMAC>WDWADMIN</TSMAC>  
        <TSSystem>DTIAdminV1</TSSystem>  
        <TSLocation>mkl2</TSLocation>  
        <TSSecurity>Admin1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>${#TestCase#CurrentDate}</CmdDate>  
        <CmdTime>14:02:03.280</CmdTime>  
        <CmdInvoice>CreTktReq</CmdInvoice>  
        <CmdDevice>DTICTR</CmdDevice>  
        <CmdOperator>DTI</CmdOperator>  
        <CmdNote>DTI Create 1</CmdNote> 
      </CommandHeader>  
      <CreateTicketRequest> 
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>ALPHA-03</ProdCode>  
          <ProdQty>8</ProdQty>  
          <TktShell>2</TktShell>  
          <TktNote>100018</TktNote> 
        </Ticket> 
      </CreateTicketRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="aa83a569-525c-4ff9-a538-1ca43094ff11" name="Header_Existance" disabled="true"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="bd51a49a-9c91-4a02-8298-0a5297b3d0f2" name="Xpath Existance" disabled="true"><con:configuration><scriptText>/*
 * Script assertion to validate the Xpath existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Xpath Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="88964a58-f73d-490f-ac30-a613f5648ca8" name="Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Script assertion to validate the String existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="de817a90-400d-4851-8ea7-ce3f315ed5b5" name="Numeric Validation" disabled="true"><con:configuration><scriptText>/*
 * Script assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Transfer_MagTrack_8" id="fe6dfcb3-d81e-4601-8e94-8a612e498b32"><con:settings/><con:config><script>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Get Product Code and price
def responseHolderProduct = groovyUtils.getXmlHolder("transmission - InfoSys BRAVO Product Catalog#Response")

def productQueryString =''
for (int i = 1; i&lt;=24; i++) {
prodGuestType = responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product["+i+"]/ProdDetails[1]/ProdGuestType[1]"]

if(prodGuestType == 'Adult')
{
productCodeAdult = responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product["+i+"]/ProdCode[1]"]
productPriceAdult = responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product["+i+"]/ProdPricing[1]/ProdNetPrice[1]"]

testRunner.testCase.setPropertyValue("productCodeAdult",productCodeAdult)
testRunner.testCase.setPropertyValue("productPriceAdult",productPriceAdult)
}

if(prodGuestType == 'Child')
{
productCodeChild = responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product["+i+"]/ProdCode[1]"]
productPriceChild = responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product["+i+"]/ProdPricing[1]/ProdNetPrice[1]"]

testRunner.testCase.setPropertyValue("productCodeChild",productCodeChild)
testRunner.testCase.setPropertyValue("productPriceChild",productPriceChild)
}
}
log.info "productCodeAdult :" +productCodeAdult
log.info "productPriceAdult :" +productPriceAdult
log.info "productCodeChild :" +productCodeChild
log.info "productPriceChild :" +productPriceChild

//Get Magic Track
def responseHolderCreateMag = groovyUtils.getXmlHolder("transmission - WDW Create Tkt Alpha Shells(8)#Response")

//Mag = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket["+i+"]/TktID[1]/Mag[1]"]

eightTicketMag1 = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[1]/TktID[1]/Mag[1]"]
eightTicketMag2 = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[2]/TktID[1]/Mag[1]"]
eightTicketMag3 = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[3]/TktID[1]/Mag[1]"]
eightTicketMag4 = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[4]/TktID[1]/Mag[1]"]
eightTicketMag5 = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[5]/TktID[1]/Mag[1]"]
eightTicketMag6 = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[6]/TktID[1]/Mag[1]"]
eightTicketMag7 = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[7]/TktID[1]/Mag[1]"]
eightTicketMag8 = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[8]/TktID[1]/Mag[1]"]


testRunner.testCase.setPropertyValue("eightTicketMag1",eightTicketMag1)
testRunner.testCase.setPropertyValue("eightTicketMag2",eightTicketMag2)
testRunner.testCase.setPropertyValue("eightTicketMag3",eightTicketMag3)
testRunner.testCase.setPropertyValue("eightTicketMag4",eightTicketMag4)
testRunner.testCase.setPropertyValue("eightTicketMag5",eightTicketMag5)
testRunner.testCase.setPropertyValue("eightTicketMag6",eightTicketMag6)
testRunner.testCase.setPropertyValue("eightTicketMag7",eightTicketMag7)
testRunner.testCase.setPropertyValue("eightTicketMag8",eightTicketMag8)

log.info "eightTicketMag1 :" + eightTicketMag1
log.info "eightTicketMag2 :" + eightTicketMag2
log.info "eightTicketMag3 :" + eightTicketMag3
log.info "eightTicketMag4 :" + eightTicketMag4
log.info "eightTicketMag5 :" + eightTicketMag5
log.info "eightTicketMag6 :" + eightTicketMag6
log.info "eightTicketMag7 :" + eightTicketMag7
log.info "eightTicketMag8 :" + eightTicketMag8








</script></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayloadFor_Eight_Tickets" id="8c8c2bc2-eb9a-4aa2-9358-b6d5dedd1cd3"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission _UpgradeAlpha_Eight_Tickets" id="bbffe5cb-c6e3-424e-a52d-a8adc8b976f3"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission _UpgradeAlpha_Eight_Tickets" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}upgrade_alpha_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
 <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>3.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>13:11:00</TransmitTime>
         <TktSeller>
            <TSMAC>AAA212</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>08625050</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>13:11:00</CmdTime>
            <CmdInvoice>50100118560740818003</CmdInvoice>
            <CmdDevice>WDPRO</CmdDevice>
            <CmdOperator>bpacifico</CmdOperator>
         </CommandHeader>
         <UpgradeAlphaRequest>
             <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>${#TestCase#productCodeAdult}</ProdCode>
               <ProdPrice>${#TestCase#productPriceAdult}</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> ${#TestCase#eightTicketMag1} </MagTrack1>
                     <MagTrack2>78=100018</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
              <Ticket>
               <TktItem>2</TktItem>
               <ProdCode>${#TestCase#productCodeAdult}</ProdCode>
               <ProdPrice>${#TestCase#productPriceAdult}</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> ${#TestCase#eightTicketMag2} </MagTrack1>
                     <MagTrack2>78=100018</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
              <Ticket>
               <TktItem>3</TktItem>
               <ProdCode>${#TestCase#productCodeAdult}</ProdCode>
               <ProdPrice>${#TestCase#productPriceAdult}</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> ${#TestCase#eightTicketMag3} </MagTrack1>
                     <MagTrack2>78=100018</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
              <Ticket>
               <TktItem>4</TktItem>
               <ProdCode>${#TestCase#productCodeAdult}</ProdCode>
               <ProdPrice>${#TestCase#productPriceAdult}</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> ${#TestCase#eightTicketMag4} </MagTrack1>
                     <MagTrack2>78=100018</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
              <Ticket>
               <TktItem>5</TktItem>
               <ProdCode>${#TestCase#productCodeAdult}</ProdCode>
               <ProdPrice>${#TestCase#productPriceAdult}</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> ${#TestCase#eightTicketMag5} </MagTrack1>
                     <MagTrack2>78=100018</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
              <Ticket>
               <TktItem>6</TktItem>
               <ProdCode>${#TestCase#productCodeAdult}</ProdCode>
               <ProdPrice>${#TestCase#productPriceAdult}</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> ${#TestCase#eightTicketMag6} </MagTrack1>
                     <MagTrack2>78=100018</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
              <Ticket>
               <TktItem>7</TktItem>
               <ProdCode>${#TestCase#productCodeAdult}</ProdCode>
               <ProdPrice>${#TestCase#productPriceAdult}</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> ${#TestCase#eightTicketMag7} </MagTrack1>
                     <MagTrack2>78=100018</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
              <Ticket>
               <TktItem>8</TktItem>
               <ProdCode>${#TestCase#productCodeAdult}</ProdCode>
               <ProdPrice>${#TestCase#productPriceAdult}</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> ${#TestCase#eightTicketMag8} </MagTrack1>
                     <MagTrack2>78=100018</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
         </UpgradeAlphaRequest>
      </Command>
   </Payload>

</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="d722b2c7-86fb-440e-8080-5b8deb82e98f" name="Headers Existence - Script Assertion"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" id="66f2668e-e7f0-4647-a961-c56aabc6f970" name="XPath Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="267355c6-0ce0-4b2f-8e19-d3d61ceef51e" name="String Validation - Script Assertion"><con:configuration><scriptText/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0bd3b1f9-9733-45ec-ae2a-800d3f48ead0" name="Numeric Validation - Script Assertion"><con:configuration/></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload_For_WDW Create Tkt_9" id="024924b2-2694-4f7e-b544-c5133e6b13c2"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

testRunner.testCase.setPropertyValue("factor", String.valueOf(1))

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
//Extract First 20 character
Payload_ID = workString.substring(0,20)

sdf = new SimpleDateFormat("yyyy-MM-dd")
CurrentDate = sdf.format(date)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )
testRunner.testCase.setPropertyValue("CurrentDate",CurrentDate )

log.info "Payload_ID value is set to: " + Payload_ID 
log.info "CurrentDate value is set to: " + CurrentDate</script></con:config></con:testStep><con:testStep type="request" id="9176e43a-d31b-4f9f-97b2-93bbd34eddff" name="transmission - WDW Create Tkt Alpha Shells(9)"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - WDW Create Tkt Alpha Shells(9)" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="b35c1dd2-c939-4070-882d-a52bfab2aa56"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppURL}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}create_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
        <PayloadID>${#TestCase#Payload_ID}</PayloadID>
      <Target>Test-WDW</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>  
      <TransmitTime>14:02:03.280</TransmitTime>  
      <TktSeller> 
        <TSMAC>WDWADMIN</TSMAC>  
        <TSSystem>DTIAdminV1</TSSystem>  
        <TSLocation>mkl2</TSLocation>  
        <TSSecurity>Admin1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>${#TestCase#CurrentDate}</CmdDate>  
        <CmdTime>14:02:03.280</CmdTime>  
        <CmdInvoice>CreTktReq</CmdInvoice>  
        <CmdDevice>DTICTR</CmdDevice>  
        <CmdOperator>DTI</CmdOperator>  
        <CmdNote>DTI Create 1</CmdNote> 
      </CommandHeader>  
      <CreateTicketRequest> 
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>ALPHA-03</ProdCode>  
          <ProdQty>9</ProdQty>  
          <TktShell>2</TktShell>  
          <TktNote>100018</TktNote> 
        </Ticket> 
      </CreateTicketRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="aa83a569-525c-4ff9-a538-1ca43094ff11" name="Header_Existance" disabled="true"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="bd51a49a-9c91-4a02-8298-0a5297b3d0f2" name="Xpath Existance" disabled="true"><con:configuration><scriptText>/*
 * Script assertion to validate the Xpath existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Xpath Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="88964a58-f73d-490f-ac30-a613f5648ca8" name="Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Script assertion to validate the String existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="de817a90-400d-4851-8ea7-ce3f315ed5b5" name="Numeric Validation" disabled="true"><con:configuration><scriptText>/*
 * Script assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Transfer_MagTrack_9" id="20c14cd3-b0e5-4485-8d5d-782aa1c6b0b7"><con:settings/><con:config><script>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Get Magic Track
def responseHolderCreateMag = groovyUtils.getXmlHolder("transmission - WDW Create Tkt Alpha Shells(9)#Response")

//Mag = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket["+i+"]/TktID[1]/Mag[1]"]

nineTicketMag1 = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[1]/TktID[1]/Mag[1]"]
nineTicketMag2 = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[2]/TktID[1]/Mag[1]"]
nineTicketMag3 = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[3]/TktID[1]/Mag[1]"]
nineTicketMag4 = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[4]/TktID[1]/Mag[1]"]
nineTicketMag5 = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[5]/TktID[1]/Mag[1]"]
nineTicketMag6 = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[6]/TktID[1]/Mag[1]"]
nineTicketMag7 = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[7]/TktID[1]/Mag[1]"]
nineTicketMag8 = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[8]/TktID[1]/Mag[1]"]
nineTicketMag9 = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[9]/TktID[1]/Mag[1]"]

testRunner.testCase.setPropertyValue("nineTicketMag1",nineTicketMag1)
testRunner.testCase.setPropertyValue("nineTicketMag2",nineTicketMag2)
testRunner.testCase.setPropertyValue("nineTicketMag3",nineTicketMag3)
testRunner.testCase.setPropertyValue("nineTicketMag4",nineTicketMag4)
testRunner.testCase.setPropertyValue("nineTicketMag5",nineTicketMag5)
testRunner.testCase.setPropertyValue("nineTicketMag6",nineTicketMag6)
testRunner.testCase.setPropertyValue("nineTicketMag7",nineTicketMag7)
testRunner.testCase.setPropertyValue("nineTicketMag8",nineTicketMag8)
testRunner.testCase.setPropertyValue("nineTicketMag9",nineTicketMag9)

log.info "nineTicketMag1 :" + nineTicketMag1
log.info "nineTicketMag2 :" + nineTicketMag2
log.info "nineTicketMag3 :" + nineTicketMag3
log.info "nineTicketMag4 :" + nineTicketMag4
log.info "nineTicketMag5 :" + nineTicketMag5
log.info "nineTicketMag6:" + nineTicketMag6
log.info "nineTicketMag7 :" + nineTicketMag7
log.info "nineTicketMag8 :" + nineTicketMag8
log.info "nineTicketMag9 :" + nineTicketMag9






</script></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayloadFor_Nine_Tickets" id="8c06ce75-634f-4fbf-98fd-6bfcfd6202a8"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission _UpgradeAlpha_Nine_Tickets" id="724757e5-a905-47b0-a8ba-9fb9466d9fe8"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission _UpgradeAlpha_Nine_Tickets" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}upgrade_alpha_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>3.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>13:11:00</TransmitTime>
         <TktSeller>
            <TSMAC>AAA212</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>08625050</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>13:11:00</CmdTime>
            <CmdInvoice>50100118560740818003</CmdInvoice>
            <CmdDevice>WDPRO</CmdDevice>
            <CmdOperator>bpacifico</CmdOperator>
         </CommandHeader>
         <UpgradeAlphaRequest>
           <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>${#TestCase#productCodeAdult}</ProdCode>
               <ProdPrice>${#TestCase#productPriceAdult}</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> ${#TestCase#nineTicketMag1} </MagTrack1>
                     <MagTrack2>78=100018</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
              <Ticket>
               <TktItem>2</TktItem>
               <ProdCode>${#TestCase#productCodeAdult}</ProdCode>
               <ProdPrice>${#TestCase#productPriceAdult}</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> ${#TestCase#nineTicketMag2} </MagTrack1>
                     <MagTrack2>78=100018</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
              <Ticket>
               <TktItem>3</TktItem>
               <ProdCode>${#TestCase#productCodeAdult}</ProdCode>
               <ProdPrice>${#TestCase#productPriceAdult}</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> ${#TestCase#nineTicketMag3} </MagTrack1>
                     <MagTrack2>78=100018</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
              <Ticket>
               <TktItem>4</TktItem>
               <ProdCode>${#TestCase#productCodeAdult}</ProdCode>
               <ProdPrice>${#TestCase#productPriceAdult}</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> ${#TestCase#nineTicketMag4} </MagTrack1>
                     <MagTrack2>78=100018</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
              <Ticket>
               <TktItem>5</TktItem>
               <ProdCode>${#TestCase#productCodeAdult}</ProdCode>
               <ProdPrice>${#TestCase#productPriceAdult}</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> ${#TestCase#nineTicketMag5} </MagTrack1>
                     <MagTrack2>78=100018</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
              <Ticket>
               <TktItem>6</TktItem>
               <ProdCode>${#TestCase#productCodeAdult}</ProdCode>
               <ProdPrice>${#TestCase#productPriceAdult}</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> ${#TestCase#nineTicketMag6} </MagTrack1>
                     <MagTrack2>78=100018</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
              <Ticket>
               <TktItem>7</TktItem>
               <ProdCode>${#TestCase#productCodeAdult}</ProdCode>
               <ProdPrice>${#TestCase#productPriceAdult}</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> ${#TestCase#nineTicketMag7} </MagTrack1>
                     <MagTrack2>78=100018</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
              <Ticket>
               <TktItem>8</TktItem>
               <ProdCode>${#TestCase#productCodeAdult}</ProdCode>
               <ProdPrice>${#TestCase#productPriceAdult}</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> ${#TestCase#nineTicketMag8} </MagTrack1>
                     <MagTrack2>78=100018</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
            <Ticket>
               <TktItem>9</TktItem>
               <ProdCode>${#TestCase#productCodeAdult}</ProdCode>
               <ProdPrice>${#TestCase#productPriceAdult}</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> ${#TestCase#nineTicketMag9} </MagTrack1>
                     <MagTrack2>78=100018</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
         </UpgradeAlphaRequest>
      </Command>
   </Payload>

</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="d722b2c7-86fb-440e-8080-5b8deb82e98f" name="Headers Existence - Script Assertion"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" id="66f2668e-e7f0-4647-a961-c56aabc6f970" name="XPath Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="267355c6-0ce0-4b2f-8e19-d3d61ceef51e" name="String Validation - Script Assertion"><con:configuration><scriptText/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0bd3b1f9-9733-45ec-ae2a-800d3f48ead0" name="Numeric Validation - Script Assertion"><con:configuration/></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayloadFor_Multi_Tickts_One_AlreadyUpgraded" id="87e593ef-51bf-43e0-89cd-66431b2034bc"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission _UpgradeAlpha_Multi_Tickts_One_AlreadyUpgraded" id="2f8f90bb-b261-4e77-b836-38f679a7212e"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission _UpgradeAlpha_Multi_Tickts_One_AlreadyUpgraded" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}upgrade_alpha_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>3.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>13:11:00</TransmitTime>
         <TktSeller>
            <TSMAC>AAA212</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>08625050</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>13:11:00</CmdTime>
            <CmdInvoice>50100118560740818003</CmdInvoice>
            <CmdDevice>WDPRO</CmdDevice>
            <CmdOperator>bpacifico</CmdOperator>
         </CommandHeader>
         <UpgradeAlphaRequest>
             <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>${#TestCase#productCodeAdult}</ProdCode>
               <ProdPrice>${#TestCase#productPriceAdult}</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> ${#TestCase#multiTicketMag} </MagTrack1>
                     <MagTrack2>78=100018</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
              <Ticket>
               <TktItem>2</TktItem>
               <ProdCode>${#TestCase#productCodeAdult}</ProdCode>
               <ProdPrice>${#TestCase#productPriceAdult}</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> ${#TestCase#eightTicketMag1} </MagTrack1>
                     <MagTrack2>78=100018</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
         </UpgradeAlphaRequest>
      </Command>
   </Payload>

</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="d722b2c7-86fb-440e-8080-5b8deb82e98f" name="Headers Existence - Script Assertion"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" id="66f2668e-e7f0-4647-a961-c56aabc6f970" name="XPath Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="267355c6-0ce0-4b2f-8e19-d3d61ceef51e" name="String Validation - Script Assertion"><con:configuration><scriptText/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0bd3b1f9-9733-45ec-ae2a-800d3f48ead0" name="Numeric Validation - Script Assertion"><con:configuration/></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayloadFor_Multi_Tickts_One_AlreadyVoided" id="989f4a8c-ed2c-4b68-8ec8-a104f4470391" disabled="true"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission _UpgradeAlpha_Multi_Tickts_One_AlreadyVoided" id="7e54a318-906e-4403-9bd9-aaa8d905d8c3" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission _UpgradeAlpha_Multi_Tickts_One_AlreadyVoided" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}upgrade_alpha_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>3.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>13:11:00</TransmitTime>
         <TktSeller>
            <TSMAC>AAA212</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>08625050</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>13:11:00</CmdTime>
            <CmdInvoice>50100118560740818003</CmdInvoice>
            <CmdDevice>WDPRO</CmdDevice>
            <CmdOperator>bpacifico</CmdOperator>
         </CommandHeader>
         <UpgradeAlphaRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>3JA01</ProdCode>
               <ProdPrice>275.84</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> KFIMJ4IHI1KLJYIIZIHXNOHHERI5XHHHHHHMFVMJ4IHI1KLJYIIZIHXNOHHERI5XHHHHHHM </MagTrack1>
                     <MagTrack2>78=100018</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
         </UpgradeAlphaRequest>
      </Command>
   </Payload>

</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="d722b2c7-86fb-440e-8080-5b8deb82e98f" name="Headers Existence - Script Assertion"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" id="66f2668e-e7f0-4647-a961-c56aabc6f970" name="XPath Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="267355c6-0ce0-4b2f-8e19-d3d61ceef51e" name="String Validation - Script Assertion"><con:configuration><scriptText/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0bd3b1f9-9733-45ec-ae2a-800d3f48ead0" name="Numeric Validation - Script Assertion"><con:configuration/></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayloadFor_Child_ProductOnAdultShell" id="b01fe39c-98ca-4ae9-b8a4-a4dbb9e77ae5"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission _UpgradeAlpha_Child_ProductOnAdultShell" id="6313fcd7-6bfd-4cf8-8579-936bfde58070"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission _UpgradeAlpha_Child_ProductOnAdultShell" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}upgrade_alpha_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>3.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>13:11:00</TransmitTime>
         <TktSeller>
            <TSMAC>AAA212</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>08625050</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>13:11:00</CmdTime>
            <CmdInvoice>50100118560740818003</CmdInvoice>
            <CmdDevice>WDPRO</CmdDevice>
            <CmdOperator>bpacifico</CmdOperator>
         </CommandHeader>
         <UpgradeAlphaRequest>
          <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>${#TestCase#productCodeChild}</ProdCode>
               <ProdPrice>${#TestCase#productPriceChild}</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> ${#TestCase#adultAndChildMag2} </MagTrack1>
                      <MagTrack2>78=100018</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
         </UpgradeAlphaRequest>
      </Command>
   </Payload>

</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="d722b2c7-86fb-440e-8080-5b8deb82e98f" name="Headers Existence - Script Assertion"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" id="66f2668e-e7f0-4647-a961-c56aabc6f970" name="XPath Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="267355c6-0ce0-4b2f-8e19-d3d61ceef51e" name="String Validation - Script Assertion"><con:configuration><scriptText/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0bd3b1f9-9733-45ec-ae2a-800d3f48ead0" name="Numeric Validation - Script Assertion"><con:configuration/></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayloadFor_Adult_ProductOnChildShell" id="9ec18fcd-0df0-4a9c-a117-5f95eac62a7c"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission _UpgradeAlpha_Adult_ProductOnChildShell" id="2b3e1fd5-110d-4a4f-bae6-7e511bba8829"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission _UpgradeAlpha_Adult_ProductOnChildShell" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}upgrade_alpha_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>3.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>13:11:00</TransmitTime>
         <TktSeller>
            <TSMAC>AAA212</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>08625050</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>13:11:00</CmdTime>
            <CmdInvoice>50100118560740818003</CmdInvoice>
            <CmdDevice>WDPRO</CmdDevice>
            <CmdOperator>bpacifico</CmdOperator>
         </CommandHeader>
         <UpgradeAlphaRequest>
            <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>${#TestCase#productCodeAdult}</ProdCode>  
          <ProdPrice>${#TestCase#productPriceAdult}</ProdPrice>  
          <TktID> 
            <Mag> 
              <MagTrack1> ${#TestCase#adultMag} </MagTrack1> 
              <MagTrack2>79=100010</MagTrack2>
            </Mag> 
          </TktID> 
          </Ticket>
         </UpgradeAlphaRequest>
      </Command>
   </Payload>

</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="d722b2c7-86fb-440e-8080-5b8deb82e98f" name="Headers Existence - Script Assertion"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" id="66f2668e-e7f0-4647-a961-c56aabc6f970" name="XPath Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="267355c6-0ce0-4b2f-8e19-d3d61ceef51e" name="String Validation - Script Assertion"><con:configuration><scriptText/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0bd3b1f9-9733-45ec-ae2a-800d3f48ead0" name="Numeric Validation - Script Assertion"><con:configuration/></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayloadFor_Three_Different_Product" id="cca8abf8-36cc-4115-84e8-aa9422deec12"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission _UpgradeAlpha_Three_Different_Product" id="6753b243-0c8d-4a3c-adb5-30c99319ab27"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission _UpgradeAlpha_Three_Different_Product" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}upgrade_alpha_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>3.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>13:11:00</TransmitTime>
         <TktSeller>
            <TSMAC>AAA212</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>08625050</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>13:11:00</CmdTime>
            <CmdInvoice>50100118560740818003</CmdInvoice>
            <CmdDevice>WDPRO</CmdDevice>
            <CmdOperator>bpacifico</CmdOperator>
         </CommandHeader>
         <UpgradeAlphaRequest>
           <Ticket>
               <TktItem>1</TktItem>
               <ProdCode>${#TestCase#productCodeAdult}</ProdCode>
               <ProdPrice>${#TestCase#productPriceAdult}</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> ${#TestCase#thiredproductPriceAdultMag1} </MagTrack1>
                     <MagTrack2>78=100018</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
            <Ticket>
               <TktItem>2</TktItem>
               <ProdCode>${#TestCase#productCodeChild}</ProdCode>
               <ProdPrice>${#TestCase#productPriceChild}</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> ${#TestCase#thiredproductPriceAdultMag2} </MagTrack1>
                     <MagTrack2>79=100010</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
            <Ticket>
               <TktItem>3</TktItem>
               <ProdCode>${#TestCase#thiredproductCodeAdult}</ProdCode>
               <ProdPrice>${#TestCase#thiredproductPriceAdult}</ProdPrice>
               <TktID>
                  <Mag>
                     <MagTrack1> ${#TestCase#thiredproductPriceAdultMag} </MagTrack1>
                     <MagTrack2>78=100018</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
         </UpgradeAlphaRequest>
      </Command>
   </Payload>

</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="d722b2c7-86fb-440e-8080-5b8deb82e98f" name="Headers Existence - Script Assertion"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" id="66f2668e-e7f0-4647-a961-c56aabc6f970" name="XPath Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="267355c6-0ce0-4b2f-8e19-d3d61ceef51e" name="String Validation - Script Assertion"><con:configuration><scriptText/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0bd3b1f9-9733-45ec-ae2a-800d3f48ead0" name="Numeric Validation - Script Assertion"><con:configuration/></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>DTIAppUrl</con:name><con:value>https://dti-latest.disney.pvt/DTIApp/DTIApp</con:value></con:property><con:property><con:name>BasePath</con:name><con:value>/var/opt/apps/RT/schemas/</con:value></con:property><con:property><con:name>Payload_ID</con:name><con:value>91120171031150945334</con:value></con:property><con:property><con:name>factor</con:name><con:value>2</con:value></con:property><con:property><con:name>counter</con:name><con:value>100000</con:value></con:property><con:property><con:name>CurrentDate</con:name><con:value>2017-10-31</con:value></con:property><con:property><con:name>tickets</con:name><con:value><![CDATA[<Ticket> <TktItem>1</TktItem><ProdCode>10A11</ProdCode><ProdQty>1</ProdQty><ProdPrice>125.67</ProdPrice></Ticket><Ticket> <TktItem>2</TktItem><ProdCode>10A21</ProdCode><ProdQty>1</ProdQty><ProdPrice>122.48</ProdPrice></Ticket><Ticket> <TktItem>3</TktItem><ProdCode>10A31</ProdCode><ProdQty>1</ProdQty><ProdPrice>116.09</ProdPrice></Ticket><Ticket> <TktItem>4</TktItem><ProdCode>10A41</ProdCode><ProdQty>1</ProdQty><ProdPrice>113.96</ProdPrice></Ticket><Ticket> <TktItem>5</TktItem><ProdCode>10A51</ProdCode><ProdQty>1</ProdQty><ProdPrice>107.57</ProdPrice></Ticket><Ticket> <TktItem>6</TktItem><ProdCode>1JA01</ProdCode><ProdQty>1</ProdQty><ProdPrice>126.74</ProdPrice></Ticket><Ticket> <TktItem>7</TktItem><ProdCode>1JA11</ProdCode><ProdQty>1</ProdQty><ProdPrice>120.35</ProdPrice></Ticket><Ticket> <TktItem>8</TktItem><ProdCode>1JA21</ProdCode><ProdQty>1</ProdQty><ProdPrice>113.96</ProdPrice></Ticket><Ticket> <TktItem>9</TktItem><ProdCode>1JA31</ProdCode><ProdQty>1</ProdQty><ProdPrice>107.57</ProdPrice></Ticket><Ticket> <TktItem>10</TktItem><ProdCode>1JA41</ProdCode><ProdQty>1</ProdQty><ProdPrice>105.44</ProdPrice></Ticket><Ticket> <TktItem>11</TktItem><ProdCode>1JA51</ProdCode><ProdQty>1</ProdQty><ProdPrice>99.05</ProdPrice></Ticket><Ticket> <TktItem>12</TktItem><ProdCode>1KA01</ProdCode><ProdQty>1</ProdQty><ProdPrice>185.31</ProdPrice></Ticket><Ticket> <TktItem>13</TktItem><ProdCode>1KA11</ProdCode><ProdQty>1</ProdQty><ProdPrice>178.92</ProdPrice></Ticket><Ticket> <TktItem>14</TktItem><ProdCode>1KA21</ProdCode><ProdQty>1</ProdQty><ProdPrice>181.05</ProdPrice></Ticket><Ticket> <TktItem>15</TktItem><ProdCode>1KA31</ProdCode><ProdQty>1</ProdQty><ProdPrice>174.66</ProdPrice></Ticket><Ticket> <TktItem>16</TktItem><ProdCode>1KA41</ProdCode><ProdQty>1</ProdQty><ProdPrice>172.53</ProdPrice></Ticket><Ticket> <TktItem>17</TktItem><ProdCode>1KA51</ProdCode><ProdQty>1</ProdQty><ProdPrice>166.14</ProdPrice></Ticket><Ticket> <TktItem>18</TktItem><ProdCode>1MA01</ProdCode><ProdQty>1</ProdQty><ProdPrice>201.29</ProdPrice></Ticket><Ticket> <TktItem>19</TktItem><ProdCode>1MA11</ProdCode><ProdQty>1</ProdQty><ProdPrice>194.90</ProdPrice></Ticket><Ticket> <TktItem>20</TktItem><ProdCode>1MA21</ProdCode><ProdQty>1</ProdQty><ProdPrice>197.03</ProdPrice></Ticket><Ticket> <TktItem>21</TktItem><ProdCode>1MA31</ProdCode><ProdQty>1</ProdQty><ProdPrice>190.64</ProdPrice></Ticket><Ticket> <TktItem>22</TktItem><ProdCode>1MA41</ProdCode><ProdQty>1</ProdQty><ProdPrice>188.51</ProdPrice></Ticket><Ticket> <TktItem>23</TktItem><ProdCode>1MA51</ProdCode><ProdQty>1</ProdQty><ProdPrice>182.12</ProdPrice></Ticket><Ticket> <TktItem>24</TktItem><ProdCode>2JA01</ProdCode><ProdQty>1</ProdQty><ProdPrice>211.94</ProdPrice></Ticket>]]></con:value></con:property><con:property><con:name>Product Code</con:name><con:value>1JF11</con:value></con:property><con:property><con:name>entity</con:name><con:value>Invalid Price</con:value></con:property><con:property><con:name>price</con:name><con:value>3683.92</con:value></con:property><con:property><con:name>productName</con:name><con:value>2JA01</con:value></con:property><con:property><con:name>productPrice</con:name><con:value>211.94</con:value></con:property><con:property><con:name>PDT_CODE</con:name><con:value>DMW01</con:value></con:property><con:property><con:name>ENTITY_CODE</con:name><con:value>Niche</con:value></con:property><con:property><con:name>soldOut</con:name><con:value>S0B01</con:value></con:property><con:property><con:name>lowPrice</con:name><con:value>112.96</con:value></con:property><con:property><con:name>highPrice</con:name><con:value>123.96</con:value></con:property><con:property><con:name>PRODUCT_EXPIRED_FUTURE</con:name><con:value>S0B0G</con:value></con:property><con:property><con:name>PRODUCT_EXPIRED_Past</con:name><con:value>13244</con:value></con:property><con:property><con:name>PRODUCT_UNAVAILABLE</con:name><con:value>JKA02</con:value></con:property><con:property><con:name>ENTITY_DATE_TIME</con:name><con:value>2</con:value></con:property><con:property><con:name>productCodeAdult</con:name><con:value>2JA01</con:value></con:property><con:property><con:name>productPriceAdult</con:name><con:value>211.94</con:value></con:property><con:property><con:name>productCodeChild</con:name><con:value>1MA51</con:value></con:property><con:property><con:name>productPriceChild</con:name><con:value>182.12</con:value></con:property><con:property><con:name>adultMag</con:name><con:value>KFXB8K656P895766RU5956555W55H555555BFGB8K656P895766RU5956555W55H555555B</con:value></con:property><con:property><con:name>childMag</con:name><con:value>AFACAM878RAB7988TW7B78777Z77J777777CFTCAM878RAB7988TW7B78777Z77J777777C</con:value></con:property><con:property><con:name>adultAndChildMag</con:name><con:value>EFBVS4QPQ9STPWQQB7PWR5PPPAPP1PPPPPPVFSVS4QPQ9STPWQQB7PWR5PPPAPP1PPPPPPV</con:value></con:property><con:property><con:name>eightTicketMag</con:name><con:value>CFOFBN989SBC8A99UX8C89888388K888888FFFFBN989SBC8A99UX8C89888388K888888F</con:value></con:property><con:property><con:name>threeDiffProductMag</con:name><con:value>KFTGDPBABUDEACBBWZAEABAAA6AAMAAAAAAGFKGDPBABUDEACBBWZAEABAAA6AAMAAAAAAG</con:value></con:property><con:property><con:name>adultAndChildMag1</con:name><con:value>AFYDCOA9ATCD9BAAVY9D9A999299L999999DFVDCOA9ATCD9BAAVY9D9A999299L999999D</con:value></con:property><con:property><con:name>adultAndChildMag2</con:name><con:value>WFGE9L767Q9A6877SV6A67666066I666666EFDE9L767Q9A6877SV6A67666066I666666E</con:value></con:property><con:property><con:name>eightTicketMag1</con:name><con:value>KFUGDPBABUDEAHBBWZAEASAAA6AAPAAAAAAGFJGDPBABUDEAHBBWZAEASAAA6AAPAAAAAAG</con:value></con:property><con:property><con:name>eightTicketMag2</con:name><con:value>KFIHFRDCDWFGCJDDY1CGCUCCCACCRCCCCCCHFVHFRDCDWFGCJDDY1CGCUCCCACCRCCCCCCH</con:value></con:property><con:property><con:name>eightTicketMag3</con:name><con:value>CFOIHTFEFYHIELFF03EIEWEEEDEETEEEEEEIFFIHTFEFYHIELFF03EIEWEEEDEETEEEEEEI</con:value></con:property><con:property><con:name>eightTicketMag4</con:name><con:value>KFIJEQCBCVEFBICCX0BFBTBBCBBBQBBBBBBJFVJEQCBCVEFBICCX0BFBTBBCBBBQBBBBBBJ</con:value></con:property><con:property><con:name>eightTicketMag5</con:name><con:value>AFTKGSEDEXGHDKEEZ2DHDVDDEEDDSDDDDDDKFAKGSEDEXGHDKEEZ2DHDVDDEEDDSDDDDDDK</con:value></con:property><con:property><con:name>eightTicketMag6</con:name><con:value>AFTLIUGFGZIJFMGG14FJFXFFGHFFUFFFFFFLFALIUGFGZIJFMGG14FJFXFFGHFFUFFFFFFL</con:value></con:property><con:property><con:name>eightTicketMag7</con:name><con:value>AFXMKWIHI1KLHOII36HLH0HHIKHHWHHHHHHMFMMKWIHI1KLHOII36HLH0HHIKHHWHHHHHHM</con:value></con:property><con:property><con:name>eightTicketMag8</con:name><con:value>WFGNMYKJK3MNJQKK58JNJ2JJKNJJYJJJJJJNFDNMYKJK3MNJQKK58JNJ2JJKNJJYJJJJJJN</con:value></con:property><con:property><con:name>eightTicketMag9</con:name><con:value>AFYQNZLKL4NOKNLL63KMOPKKLRKKUKKKKKKQFVQNZLKL4NOKNLL63KMOPKKLRKKUKKKKKKQ</con:value></con:property><con:property><con:name>Payload_ID_CreatTicket</con:name><con:value>91120171031150944707</con:value></con:property><con:property><con:name>nineTicketMag1</con:name><con:value>WFDYT5RQRATUQZRRCFQUQDQQQEQQ4QQQQQQYFGYT5RQRATUQZRRCFQUQDQQQEQQ4QQQQQQY</con:value></con:property><con:property><con:name>nineTicketMag2</con:name><con:value>KFJZV7TSTCVWS1TTEHSWSFSSSHSS6SSSSSSZFUZV7TSTCVWS1TTEHSWSFSSSHSS6SSSSSSZ</con:value></con:property><con:property><con:name>nineTicketMag3</con:name><con:value>AFZA6I434N673C44PS373Q333T33H333333AFUA6I434N673C44PS373Q333T33H333333A</con:value></con:property><con:property><con:name>nineTicketMag4</con:name><con:value>KFIB8K656P895E66RU595S555W55J555555BFVB8K656P895E66RU595S555W55J555555B</con:value></con:property><con:property><con:name>nineTicketMag5</con:name><con:value>AFVCAM878RAB7G88TW7B7U777Z77L777777CFYCAM878RAB7G88TW7B7U777Z77L777777C</con:value></con:property><con:property><con:name>nineTicketMag6</con:name><con:value>WFDDCOA9ATCD9IAAVY9D9W999299N999999DFGDCOA9ATCD9IAAVY9D9W999299N999999D</con:value></con:property><con:property><con:name>nineTicketMag7</con:name><con:value>AFVE9L767Q9A6F77SV6A6T666066K666666EFYE9L767Q9A6F77SV6A6T666066K666666E</con:value></con:property><con:property><con:name>nineTicketMag8</con:name><con:value>AFXFBN989SBC8H99UX8C8W888388M888888FFMFBN989SBC8H99UX8C8W888388M888888F</con:value></con:property><con:property><con:name>nineTicketMag9</con:name><con:value>KFJGDPBABUDEAJBBWZAEAYAAA6AAOAAAAAAGFUGDPBABUDEAJBBWZAEAYAAA6AAOAAAAAAG</con:value></con:property><con:property><con:name>thiredproductCodeAdult</con:name><con:value>2JA01</con:value></con:property><con:property><con:name>thiredproductPriceAdult</con:name><con:value>211.94</con:value></con:property><con:property><con:name>thiredproductPriceAdultMag</con:name><con:value>KFGHFRDCDWFGCEDDY1CGCECCCACCOCCCCCCHFXHFRDCDWFGCEDDY1CGCECCCACCOCCCCCCH</con:value></con:property><con:property><con:name>thiredproductPriceAdultMag1</con:name><con:value>AFMIHTFEFYHIEGFF03EIEGEEEDEEQEEEEEEIFXIHTFEFYHIEGFF03EIEGEEEDEEQEEEEEEI</con:value></con:property><con:property><con:name>thiredproductPriceAdultMag2</con:name><con:value>KFGJEQCBCVEFBDCCX0BFBDBBCBBBNBBBBBBJFXJEQCBCVEFBDCCX0BFBDBBCBBBNBBBBBBJ</con:value></con:property><con:property><con:name>multiTicketMag</con:name><con:value>KFTKGSEDEXGHDFEEZ2DHDFDDEEDDPDDDDDDKFKKGSEDEXGHDFEEZ2DHDFDDEEDDPDDDDDDK</con:value></con:property></con:properties></con:testCase><con:testCase id="18faf9ee-42c1-4d74-b0d9-08b6763a3e10" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SmokeTest_VoidTicket TestCase_S-324451" searchProperties="true"><con:settings/><con:testStep type="groovy" name="DataBaseScript" id="e9f495c6-fb20-4b10-94f5-e65b296b9517"><con:settings/><con:config><script>import groovy.sql.Sql
com.eviware.soapui.support.GroovyUtils.registerJdbcDriver("oracle.jdbc.OracleDriver" )
def url = 'jdbc:oracle:thin:@(description=(address=(host=lnxu002dva-scan.wdw.disney.com)(protocol=tcp)(port=1541))(connect_data=(service_name=dtis1svc.wdw.disney.com)))'
def user = 'dti_gateway'
def password = 'TARD1S09'
def driver = 'oracle.jdbc.driver.OracleDriver'
def sql = Sql.newInstance(url, user, password, driver)
//==================================
//Query to get the sold out product code
def result = sql.firstRow("select PDT_CODE from DTI_PRODUCT where ACTIVE_IND ='T' and sold_out is not null and rownum =1")
soldOut="${result.PDT_CODE}"
testRunner.testCase.setPropertyValue("soldOut",soldOut.toString() )
log.info "SoldOut product code is :"+soldOut
//==================================
//Query to get the not permited producr code
def PDT_CODE = sql.firstRow(" select pdt_code from DTI_PRODUCT where ROWNUM = 1")
def product = "${PDT_CODE.pdt_code}"
testRunner.testCase.setPropertyValue("PDT_CODE",product.toString() )
log.info "Not permitted product code is :"+product
//==================================
//Query to get the inactive entity
def ENTITY = sql.firstRow("select ENTITY_CODE from TICKET_SELLER_ENTITY where ACTIVE_IND='F'  and  rownum=1")
def ENTITY_CODE = "${ENTITY.ENTITY_CODE}"
log.info "Inactive entity found as :"+ENTITY_CODE 
testRunner.testCase.setPropertyValue("ENTITY_CODE",ENTITY_CODE.toString() )
//==================================

//Query to get the prodcut code expired future variant
def codeResult = sql.firstRow("select PDT_CODE from DTI_Product where START_SALE_DATE > current_timestamp and rownum =1")
def productCodeExpiredFuture = "${codeResult.PDT_CODE}"
log.info "Product code expired future  :"+productCodeExpiredFuture 

testRunner.testCase.setPropertyValue("PRODUCT_EXPIRED_FUTURE",productCodeExpiredFuture.toString() )
//==================================
//Query to get the prodcut code expired past variant
def productCodeExpired = sql.firstRow("select PDT_CODE from DTI_Product where  END_SALE_DATE &lt; current_timestamp and rownum =1")
def productCodeExpiredPast = "${productCodeExpired.PDT_CODE}"
log.info "Product code expired past  :"+productCodeExpiredPast 
testRunner.testCase.setPropertyValue("PRODUCT_EXPIRED_PAST",productCodeExpiredPast.toString() )

//==================================
//Query to get the prodcut unavailable
def productUnavailable = sql.firstRow("select PDT_CODE from DTI_PRODUCT where ACTIVE_IND ='F' and rownum = 1")
def productCodeUnavailable = "${productUnavailable.PDT_CODE}"
log.info "Product code unavailable  :"+productCodeUnavailable 
testRunner.testCase.setPropertyValue("PRODUCT_UNAVAILABLE",productCodeUnavailable.toString() )


//==================================
//Query to get Entity valid start date and Time
def validEntityDateTime = sql.firstRow("select count(*) as numberOfRows from ticket_seller_entity where START_VALID_DATE &lt;= sysdate and END_VALID_DATE >= sysdate and START_VALID_TIME >= to_char(SYSDATE, 'HH24:MI') and END_VALID_TIME >= to_char(SYSDATE, 'HH24:MI') and ENTITY_CODE='PROGENSTR'")
def entityDateTime = "${validEntityDateTime.numberOfRows}"
log.info "entityDateTime ...  :"+entityDateTime 
testRunner.testCase.setPropertyValue("ENTITY_DATE_TIME",entityDateTime.toString() )
sql.close() </script></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload_For_WDW Create Tkt" id="8cdc6d89-d49e-4df1-9ee7-3ef8e6cb4c89"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

testRunner.testCase.setPropertyValue("factor", String.valueOf(1))

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
//Extract First 20 character
Payload_ID = workString.substring(0,20)

sdf = new SimpleDateFormat("yyyy-MM-dd")
CurrentDate = sdf.format(date)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )
testRunner.testCase.setPropertyValue("CurrentDate",CurrentDate )

log.info "Payload_ID value is set to: " + Payload_ID 
log.info "CurrentDate value is set to: " + CurrentDate</script></con:config></con:testStep><con:testStep type="request" id="6283c058-30aa-4486-8d76-e4c755525a78" name="transmission - WDW_Create_Tkt_Alpha_Shells"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - WDW_Create_Tkt_Alpha_Shells" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="b35c1dd2-c939-4070-882d-a52bfab2aa56"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppURL}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="/var/opt/apps/RT/schemas/create_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>${#TestCase#Payload_ID}</PayloadID>
      <Target>Test-WDW</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>  
      <TransmitTime>14:02:03.280</TransmitTime>  
      <TktSeller> 
        <TSMAC>WDWADMIN</TSMAC>  
        <TSSystem>DTIAdminV1</TSSystem>  
        <TSLocation>mkl2</TSLocation>  
        <TSSecurity>Admin1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>45</CmdTimeout>  
        <CmdDate>${#TestCase#CurrentDate}</CmdDate>  
        <CmdTime>14:02:03.280</CmdTime>  
        <CmdInvoice>CreTktReq</CmdInvoice>  
        <CmdDevice>DTICTR</CmdDevice>  
        <CmdOperator>DTI</CmdOperator>  
        <CmdNote>DTI Create 1</CmdNote> 
      </CommandHeader>  
      <CreateTicketRequest> 
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>ALPHA-03</ProdCode>  
          <ProdQty>8</ProdQty>  
          <TktShell>2</TktShell>  
          <TktNote>100018</TktNote> 
        </Ticket> 
      </CreateTicketRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="aa83a569-525c-4ff9-a538-1ca43094ff11" name="Header_Existance" disabled="true"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="bd51a49a-9c91-4a02-8298-0a5297b3d0f2" name="Xpath Existance" disabled="true"><con:configuration><scriptText>/*
 * Script assertion to validate the Xpath existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Xpath Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="88964a58-f73d-490f-ac30-a613f5648ca8" name="Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Script assertion to validate the String existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="de817a90-400d-4851-8ea7-ce3f315ed5b5" name="Numeric Validation" disabled="true"><con:configuration><scriptText>/*
 * Script assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("/"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"/LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, 
i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload_For_Product Catalog" id="39f27a6f-97ef-43cb-80c1-1fdf59f09156"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" id="b2efb194-cd0e-4681-accb-7f27ed57fef2" name="transmission - InfoSys BRAVO Product Catalog"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - InfoSys BRAVO Product Catalog" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="c4a4fb7e-231a-47c9-b4b7-68737429c445"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://dti-latest.disney.pvt/DTIInfoSys/DTIInfoSysServlet</con:endpoint><con:request><![CDATA[<ProductCatalogRQ xsi:noNamespaceSchemaLocation="\var\opt\apps\RT\schemas\dtiinfosys.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <PayloadHeader>
      <PayloadID>${#TestCase#Payload_ID}</PayloadID>
      <Target>Test-WDW</Target>
      <Version>1.0</Version>
      <Comm>
         <Protocol>IP</Protocol>
         <Method>Network</Method>
      </Comm>
      <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
      <TransmitTime>08:29:34.374</TransmitTime>
   </PayloadHeader>
   <CommandHeader>
      <CmdTimeout>30</CmdTimeout>
      <CmdRequestor>
                <TSMAC>AAA212</TSMAC>
         <TSLocation>08625050</TSLocation>
         <CmdOperator>Bob</CmdOperator>
         <CmdActor>DVR</CmdActor>
      </CmdRequestor>
   </CommandHeader>
   <CommandBody>
      <ProviderType>Walt Disney World</ProviderType>
      <TSMAC>AAA212</TSMAC>
      <TSLocation>08625050</TSLocation>
      <IncludeSoldOut>true</IncludeSoldOut>
      <OnSaleStartDate>2005-01-31</OnSaleStartDate>
      <SkipResponses>1</SkipResponses>
      <IncludeCalendarDetail>true</IncludeCalendarDetail>
   </CommandBody>
</ProductCatalogRQ>]]></con:request><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="Headers Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="XPath Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Element existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath + "\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="String Validation - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * assertion to validate the String existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="Numeric Validation - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Script assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Transfer_MagTrack1" id="d3a120ad-187f-4d10-92c9-c64ede4d4234"><con:settings/><con:config><script>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

def responseHolderCreateMag = groovyUtils.getXmlHolder("transmission - WDW_Create_Tkt_Alpha_Shells#Response")

firstMag = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[1]/TktID[1]/Mag[1]"]
adultFirstMag = responseHolderCreateMag["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[2]/TktID[1]/Mag[1]"]

testRunner.testCase.setPropertyValue("firstMag",firstMag.toString())
testRunner.testCase.setPropertyValue("adultFirstMag",adultFirstMag.toString())
log.info "firstMag :" + firstMag
log.info "adultFirstMag :" + adultFirstMag


//Get Product Code and price
def responseHolderProduct = groovyUtils.getXmlHolder("transmission - InfoSys BRAVO Product Catalog#Response")

def productQueryString =''
for (int i = 1; i&lt;=10; i++) {
prodGuestType = responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product["+i+"]/ProdDetails[1]/ProdGuestType[1]"]

if(prodGuestType == 'Adult')
{
productCodeAdult = responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product["+i+"]/ProdCode[1]"]
productPriceAdult = responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product["+i+"]/ProdPricing[1]/ProdNetPrice[1]"]

testRunner.testCase.setPropertyValue("productCodeAdult",productCodeAdult)
testRunner.testCase.setPropertyValue("productPriceAdult",productPriceAdult)
}
}





</script></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayloadFor_UpgradeAlpha ADULT_shell_Failed_Transation" id="ccbcc812-8ad0-4fab-ac94-4eef753a2707"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -UpgradeAlpha_ ADULT_shell_Failed_Transation" id="844188ca-2192-4727-b31c-6d2bde99a93c"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -UpgradeAlpha_ ADULT_shell_Failed_Transation" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}upgrade_alpha_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <Payload>\r
      <PayloadHeader>\r
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
         <Target>Test-WDW</Target>\r
         <Version>3.0</Version>\r
         <Comm>\r
            <Protocol>IP</Protocol>\r
            <Method>Network</Method>\r
         </Comm>\r
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>\r
         <TransmitTime>13:11:00</TransmitTime>\r
         <TktSeller>\r
            <TSMAC>AAA212</TSMAC>\r
            <TSSystem>CC</TSSystem>\r
            <TSLocation>08625050</TSLocation>\r
            <TSSecurity>WaltDisney1</TSSecurity>\r
         </TktSeller>\r
         <CommandCount>1</CommandCount>\r
      </PayloadHeader>\r
      <Command>\r
         <CommandHeader>\r
            <CmdItem>1</CmdItem>\r
            <CmdTimeout>45</CmdTimeout>\r
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>\r
            <CmdTime>13:11:00</CmdTime>\r
            <CmdInvoice>4094635-3</CmdInvoice>\r
            <CmdDevice>527</CmdDevice>\r
            <CmdOperator>527</CmdOperator>\r
         </CommandHeader>\r
         <UpgradeAlphaRequest>\r
           <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>${#TestCase#PRODUCT_UNAVAILABLE}</ProdCode>  
          <ProdPrice>${#TestCase#productPriceAdult}</ProdPrice>  
          <TktID> 
            <Mag> 
              <MagTrack1> ${#TestCase#adultFirstMag} </MagTrack1> 
              <MagTrack2>78=100018</MagTrack2>
            </Mag> 
          </TktID> 
          </Ticket>
         </UpgradeAlphaRequest>\r
      </Command>\r
   </Payload>\r
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="4fc708e0-86a7-4be2-b9c2-19dd7357be56" name="Headers Existence - Script Assertion"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" id="66f2668e-e7f0-4647-a961-c56aabc6f970" name="XPath Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="89df7b79-fcca-4141-afb9-6a9c1feeeca2" name="String Validation - Script Assertion"><con:configuration><scriptText/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="119023fd-c289-460f-a1ca-b5315e780adb" name="Numeric Validation - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayloadFor_UpgradeAlpha ADULT_shell" id="9b88e744-737d-45fa-b91c-183943b3da3f"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -UpgradeAlpha_ ADULT_shell" id="7140cf56-fe3e-44ea-99cc-5ffe21a62bf2"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -UpgradeAlpha_ ADULT_shell" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}upgrade_alpha_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <Payload>\r
      <PayloadHeader>\r
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
         <Target>Test-WDW</Target>\r
         <Version>3.0</Version>\r
         <Comm>\r
            <Protocol>IP</Protocol>\r
            <Method>Network</Method>\r
         </Comm>\r
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>\r
         <TransmitTime>13:11:00</TransmitTime>\r
         <TktSeller>\r
            <TSMAC>AAA212</TSMAC>\r
            <TSSystem>CC</TSSystem>\r
            <TSLocation>08625050</TSLocation>\r
            <TSSecurity>WaltDisney1</TSSecurity>\r
         </TktSeller>\r
         <CommandCount>1</CommandCount>\r
      </PayloadHeader>\r
      <Command>\r
         <CommandHeader>\r
            <CmdItem>1</CmdItem>\r
            <CmdTimeout>45</CmdTimeout>\r
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>\r
            <CmdTime>13:11:00</CmdTime>\r
            <CmdInvoice>4094635-3</CmdInvoice>\r
            <CmdDevice>527</CmdDevice>\r
            <CmdOperator>527</CmdOperator>\r
         </CommandHeader>\r
         <UpgradeAlphaRequest>\r
           <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>${#TestCase#productCodeAdult}</ProdCode>  
          <ProdPrice>${#TestCase#productPriceAdult}</ProdPrice>  
          <TktID> 
            <Mag> 
              <MagTrack1> ${#TestCase#firstMag} </MagTrack1> 
              <MagTrack2>78=100018</MagTrack2>
            </Mag> 
          </TktID> 
          </Ticket>
         </UpgradeAlphaRequest>\r
      </Command>\r
   </Payload>\r
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="4fc708e0-86a7-4be2-b9c2-19dd7357be56" name="Headers Existence - Script Assertion"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" id="66f2668e-e7f0-4647-a961-c56aabc6f970" name="XPath Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="89df7b79-fcca-4141-afb9-6a9c1feeeca2" name="String Validation - Script Assertion"><con:configuration><scriptText/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="119023fd-c289-460f-a1ca-b5315e780adb" name="Numeric Validation - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayloadFor_ManualVoidSwipedTicket" id="d11f7167-da4b-4f4c-bcab-a8f6faa7a28a"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -ManualVoidSwipedTicket" id="b77fe274-a360-4800-b0dc-18277ba002b5"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -ManualVoidSwipedTicket" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}void_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <Payload>\r
      <PayloadHeader>\r
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
         <Target>Test-WDW</Target>\r
         <Version>3.0</Version>\r
         <Comm>\r
            <Protocol>IP</Protocol>\r
            <Method>Network</Method>\r
         </Comm>\r
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>\r
         <TransmitTime>13:11:00</TransmitTime>\r
         <TktSeller>\r
            <TSMAC>AAA212P</TSMAC>\r
            <TSSystem>CC</TSSystem>\r
            <TSLocation>026</TSLocation>\r
            <TSSecurity>WaltDisney1</TSSecurity>\r
         </TktSeller>\r
         <CommandCount>1</CommandCount>\r
      </PayloadHeader>\r
      <Command>\r
         <CommandHeader>\r
            <CmdItem>1</CmdItem>\r
            <CmdTimeout>45</CmdTimeout>\r
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>\r
            <CmdTime>13:11:00</CmdTime>\r
            <CmdInvoice>2012120260000128369</CmdInvoice>\r
            <CmdDevice>DENDRES</CmdDevice>\r
            <CmdOperator>DENDRES</CmdOperator>\r
            <CmdActor>MGR</CmdActor>\r
         </CommandHeader>\r
         <VoidTicketRequest>\r
            <Ticket>\r
               <TktItem>1</TktItem>\r
               <TktID>\r
                  <Mag>\r
                     <MagTrack1> ${#TestCase#firstMag} </MagTrack1>\r
                     <MagTrack2>79=100010</MagTrack2>\r
                  </Mag>\r
               </TktID>\r
            </Ticket>\r
         </VoidTicketRequest>\r
      </Command>\r
   </Payload>\r
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="d722b2c7-86fb-440e-8080-5b8deb82e98f" name="Headers Existence - Script Assertion"><con:configuration/></con:assertion><con:assertion type="GroovyScriptAssertion" id="66f2668e-e7f0-4647-a961-c56aabc6f970" name="XPath Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="267355c6-0ce0-4b2f-8e19-d3d61ceef51e" name="String Validation - Script Assertion"><con:configuration><scriptText/></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0bd3b1f9-9733-45ec-ae2a-800d3f48ead0" name="Numeric Validation - Script Assertion"><con:configuration/></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for VoidShell_Failed_Upgrade_Alpha" id="3c377c35-1b55-482d-95b9-3bc425e09ebf"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - WDW QueryReservation
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",workString.substring(0,20))

log.info "Payload_ID value is set to: " + workString.substring(0,20)</script></con:config></con:testStep><con:testStep type="request" name="transmission -VoidShell_Failed_Upgrade_Alpha" id="afb1c71b-a334-4478-aa5f-26d0cc322ac5"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -VoidShell_Failed_Upgrade_Alpha" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}void_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">\r
   <Payload>\r
      <PayloadHeader>\r
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>\r
         <Target>Test-WDW</Target>\r
         <Version>3.0</Version>\r
         <Comm>\r
            <Protocol>IP</Protocol>\r
            <Method>Network</Method>\r
         </Comm>\r
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>\r
         <TransmitTime>13:11:00</TransmitTime>\r
         <TktSeller>\r
             <TSMAC>AAA212P</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>026</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
         </TktSeller>\r
         <CommandCount>1</CommandCount>\r
      </PayloadHeader>\r
      <Command>\r
         <CommandHeader>\r
            <CmdItem>1</CmdItem>\r
            <CmdTimeout>45</CmdTimeout>\r
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>\r
            <CmdTime>13:11:00</CmdTime>\r
             <CmdInvoice>2012120260000128369</CmdInvoice>  
        <CmdDevice>DENDRES</CmdDevice>  
        <CmdOperator>DENDRES</CmdOperator>  
        <CmdActor>MGR</CmdActor> 
         </CommandHeader>\r
         <VoidTicketRequest>\r
            <Ticket>\r
               <TktItem>1</TktItem>\r            
               <TktID>\r
                  <Mag>\r
                     <MagTrack1> ${#TestCase#adultFirstMag} </MagTrack1>\r
                     <MagTrack2>78=100018</MagTrack2>\r
                  </Mag>\r
               </TktID>\r
            </Ticket>\r
         </VoidTicketRequest>\r
      </Command>\r
   </Payload>\r
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="fe67b68b-a253-49f1-a9eb-16fba206ad5f" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="66f2668e-e7f0-4647-a961-c56aabc6f970" name="XPath Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="fbcabfba-2c2c-4bf8-9282-b2003f5097ca" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="51719428-6b09-465c-8826-758bba9d58d5" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ab283392-bc43-4f7b-b129-4811134c5a8a" name="ProductNotPermited" disabled="true"><con:configuration><scriptText>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )
def testCase = messageExchange.modelItem.testCase;
def responseHolderProduct = groovyUtils.getXmlHolder("transmission -VoidShell_Failed_Upgrade_Alpha#Response")
message = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/CommandHeader[1]/CmdError[1]/CmdErrorText[1]"]
testCase.setPropertyValue("entity",message)
if(message =='Product Not Permitted')
{
assert true
}
else
{
assert false
}
log.info "InvalidProductCode : " + message</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for VoidPreviouslyVoidedTicket" id="064fb40d-bf7a-4c0c-b75c-2ecf847aab8e"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission -VoidPreviouslyVoidedTicket" id="36fffbef-ce1d-440e-a45d-d7d1a28835f5"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission -VoidPreviouslyVoidedTicket" id="a67e8c23-6908-4845-9809-4fe7b811f07d"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}void_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>3.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>13:11:00</TransmitTime>
         <TktSeller>
             <TSMAC>AAA212P</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>026</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>13:11:00</CmdTime>
            <CmdInvoice>2012120260000128369</CmdInvoice>  
        <CmdDevice>DENDRES</CmdDevice>  
        <CmdOperator>DENDRES</CmdOperator>  
        <CmdActor>MGR</CmdActor> 
         </CommandHeader>
         <VoidTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <Mag>
                     <MagTrack1> ${#TestCase#firstMag} </MagTrack1>
                     <MagTrack2>78=100018</MagTrack2>
                  </Mag>
               </TktID>
            </Ticket>
         </VoidTicketRequest>
      </Command>
   </Payload>

</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="915d07b3-6b09-4191-9be9-9a5924e61c2a" name="Headers Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="42593c9b-1bea-4049-9ad8-b41815d2f743" name="XPath Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2a016bb4-d1be-453a-878d-dbd01dee0a3c" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="90ca0110-2f24-470f-b7fd-39a3b99cd649" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="307bfe00-6a68-42d1-a598-0e076e615bca" name="InvalidProductCode"><con:configuration/></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>DTIAppUrl</con:name><con:value>https://dti-latest.disney.pvt/DTIApp/DTIApp</con:value></con:property><con:property><con:name>BasePath</con:name><con:value>/var/opt/apps/RT/schemas/</con:value></con:property><con:property><con:name>Payload_ID</con:name><con:value>91120171031150945420</con:value></con:property><con:property><con:name>factor</con:name><con:value>8</con:value></con:property><con:property><con:name>counter</con:name><con:value>100000</con:value></con:property><con:property><con:name>CurrentDate</con:name><con:value>2017-10-31</con:value></con:property><con:property><con:name>tickets</con:name><con:value><![CDATA[<Ticket> <TktItem>1</TktItem><ProdCode>10A11</ProdCode><ProdQty>1</ProdQty><ProdPrice>125.67</ProdPrice></Ticket><Ticket> <TktItem>2</TktItem><ProdCode>10A21</ProdCode><ProdQty>1</ProdQty><ProdPrice>122.48</ProdPrice></Ticket><Ticket> <TktItem>3</TktItem><ProdCode>10A31</ProdCode><ProdQty>1</ProdQty><ProdPrice>116.09</ProdPrice></Ticket><Ticket> <TktItem>4</TktItem><ProdCode>10A41</ProdCode><ProdQty>1</ProdQty><ProdPrice>113.96</ProdPrice></Ticket><Ticket> <TktItem>5</TktItem><ProdCode>10A51</ProdCode><ProdQty>1</ProdQty><ProdPrice>107.57</ProdPrice></Ticket><Ticket> <TktItem>6</TktItem><ProdCode>1JA01</ProdCode><ProdQty>1</ProdQty><ProdPrice>126.74</ProdPrice></Ticket><Ticket> <TktItem>7</TktItem><ProdCode>1JA11</ProdCode><ProdQty>1</ProdQty><ProdPrice>120.35</ProdPrice></Ticket><Ticket> <TktItem>8</TktItem><ProdCode>1JA21</ProdCode><ProdQty>1</ProdQty><ProdPrice>113.96</ProdPrice></Ticket><Ticket> <TktItem>9</TktItem><ProdCode>1JA31</ProdCode><ProdQty>1</ProdQty><ProdPrice>107.57</ProdPrice></Ticket><Ticket> <TktItem>10</TktItem><ProdCode>1JA41</ProdCode><ProdQty>1</ProdQty><ProdPrice>105.44</ProdPrice></Ticket><Ticket> <TktItem>11</TktItem><ProdCode>1JA51</ProdCode><ProdQty>1</ProdQty><ProdPrice>99.05</ProdPrice></Ticket><Ticket> <TktItem>12</TktItem><ProdCode>1KA01</ProdCode><ProdQty>1</ProdQty><ProdPrice>185.31</ProdPrice></Ticket><Ticket> <TktItem>13</TktItem><ProdCode>1KA11</ProdCode><ProdQty>1</ProdQty><ProdPrice>178.92</ProdPrice></Ticket><Ticket> <TktItem>14</TktItem><ProdCode>1KA21</ProdCode><ProdQty>1</ProdQty><ProdPrice>181.05</ProdPrice></Ticket><Ticket> <TktItem>15</TktItem><ProdCode>1KA31</ProdCode><ProdQty>1</ProdQty><ProdPrice>174.66</ProdPrice></Ticket><Ticket> <TktItem>16</TktItem><ProdCode>1KA41</ProdCode><ProdQty>1</ProdQty><ProdPrice>172.53</ProdPrice></Ticket><Ticket> <TktItem>17</TktItem><ProdCode>1KA51</ProdCode><ProdQty>1</ProdQty><ProdPrice>166.14</ProdPrice></Ticket><Ticket> <TktItem>18</TktItem><ProdCode>1MA01</ProdCode><ProdQty>1</ProdQty><ProdPrice>201.29</ProdPrice></Ticket><Ticket> <TktItem>19</TktItem><ProdCode>1MA11</ProdCode><ProdQty>1</ProdQty><ProdPrice>194.90</ProdPrice></Ticket><Ticket> <TktItem>20</TktItem><ProdCode>1MA21</ProdCode><ProdQty>1</ProdQty><ProdPrice>197.03</ProdPrice></Ticket><Ticket> <TktItem>21</TktItem><ProdCode>1MA31</ProdCode><ProdQty>1</ProdQty><ProdPrice>190.64</ProdPrice></Ticket><Ticket> <TktItem>22</TktItem><ProdCode>1MA41</ProdCode><ProdQty>1</ProdQty><ProdPrice>188.51</ProdPrice></Ticket><Ticket> <TktItem>23</TktItem><ProdCode>1MA51</ProdCode><ProdQty>1</ProdQty><ProdPrice>182.12</ProdPrice></Ticket><Ticket> <TktItem>24</TktItem><ProdCode>2JA01</ProdCode><ProdQty>1</ProdQty><ProdPrice>211.94</ProdPrice></Ticket>]]></con:value></con:property><con:property><con:name>Product Code</con:name><con:value>1JF11</con:value></con:property><con:property><con:name>entity</con:name><con:value>Credit Card Denied</con:value></con:property><con:property><con:name>price</con:name><con:value>3683.92</con:value></con:property><con:property><con:name>productName</con:name><con:value>2JA01</con:value></con:property><con:property><con:name>productPrice</con:name><con:value>211.94</con:value></con:property><con:property><con:name>PDT_CODE</con:name><con:value>DMW01</con:value></con:property><con:property><con:name>ENTITY_CODE</con:name><con:value>Niche</con:value></con:property><con:property><con:name>soldOut</con:name><con:value>S0B01</con:value></con:property><con:property><con:name>lowPrice</con:name><con:value>112.96</con:value></con:property><con:property><con:name>highPrice</con:name><con:value>123.96</con:value></con:property><con:property><con:name>PRODUCT_EXPIRED_FUTURE</con:name><con:value>S0B0G</con:value></con:property><con:property><con:name>PRODUCT_EXPIRED_Past</con:name><con:value>13244</con:value></con:property><con:property><con:name>PRODUCT_UNAVAILABLE</con:name><con:value>JKA02</con:value></con:property><con:property><con:name>ENTITY_DATE_TIME</con:name><con:value>2</con:value></con:property><con:property><con:name>productCodeAdult</con:name><con:value>1JA41</con:value></con:property><con:property><con:name>productPriceAdult</con:name><con:value>105.44</con:value></con:property><con:property><con:name>productCodeChild</con:name><con:value>1MA51</con:value></con:property><con:property><con:name>productPriceChild</con:name><con:value>182.12</con:value></con:property><con:property><con:name>adultMag</con:name><con:value>AFEFBN989SBC8C99US8B5Q88B28CX888888FFPFBN989SBC8C99US8B5Q88B28CX888888F</con:value></con:property><con:property><con:name>childMag</con:name><con:value>AFUGDPBABUDEAEBBWUAD8SAAD5AEZAAAAAAGFZGDPBABUDEAEBBWUAD8SAAD5AEZAAAAAAG</con:value></con:property><con:property><con:name>adultAndChildMag</con:name><con:value>EFBVS4QPQ9STPWQQB7PWR5PPPAPP1PPPPPPVFSVS4QPQ9STPWQQB7PWR5PPPAPP1PPPPPPV</con:value></con:property><con:property><con:name>eightTicketMag</con:name><con:value>EFRJEQCBCVEFBFCCXVBE8UBBE9BF0BBBBBBJFCJEQCBCVEFBFCCXVBE8UBBE9BF0BBBBBBJ</con:value></con:property><con:property><con:name>threeDiffProductMag</con:name><con:value>AFUKGSEDEXGHDHEEZXDGAWDDHDDH2DDDDDDKFZKGSEDEXGHDHEEZXDGAWDDHDDH2DDDDDDK</con:value></con:property><con:property><con:name>adultAndChildMag1</con:name><con:value>AFYHFRDCDWFGCGDDYWCFAUCCF9CG1CCCCCCHFVHFRDCDWFGCGDDYWCFAUCCF9CG1CCCCCCH</con:value></con:property><con:property><con:name>adultAndChildMag2</con:name><con:value>AFXIHTFEFYHIEIFF0YEHCWEEHCEI3EEEEEEIFMIHTFEFYHIEIFF0YEHCWEEHCEI3EEEEEEI</con:value></con:property><con:property><con:name>eightTicketMag1</con:name><con:value>EFRIHTFEFYHIEHFF0XEGIJEEEDEEOEEEEEEIFCIHTFEFYHIEHFF0XEGIJEEEDEEOEEEEEEI</con:value></con:property><con:property><con:name>eightTicketMag2</con:name><con:value>EFRJEQCBCVEFBECCXUBDFGBBCBBBLBBBBBBJFCJEQCBCVEFBECCXUBDFGBBCBBBLBBBBBBJ</con:value></con:property><con:property><con:name>eightTicketMag3</con:name><con:value>EFSKGSEDEXGHDGEEZWDFHIDDEEDDNDDDDDDKFBKGSEDEXGHDGEEZWDFHIDDEEDDNDDDDDDK</con:value></con:property><con:property><con:name>eightTicketMag4</con:name><con:value>KFULIUGFGZIJFIGG1YFHJKFFGHFFPFFFFFFLFJLIUGFGZIJFIGG1YFHJKFFGHFFPFFFFFFL</con:value></con:property><con:property><con:name>eightTicketMag5</con:name><con:value>KFRMKWIHI1KLHKII30HJLMHHIKHHRHHHHHHMFMMKWIHI1KLHKII30HJLMHHIKHHRHHHHHHM</con:value></con:property><con:property><con:name>eightTicketMag6</con:name><con:value>AFYNMYKJK3MNJMKK52JLNOJJKNJJTJJJJJJNFVNMYKJK3MNJMKK52JLNOJJKNJJTJJJJJJN</con:value></con:property><con:property><con:name>eightTicketMag7</con:name><con:value>EFBOJVHGH0JKGJHH2ZGIKLGGHLGGQGGGGGGOFSOJVHGH0JKGJHH2ZGIKLGGHLGGQGGGGGGO</con:value></con:property><con:property><con:name>eightTicketMag8</con:name><con:value>AFZPLXJIJ2LMILJJ41IKMNIIJOIISIIIIIIPFUPLXJIJ2LMILJJ41IKMNIIJOIISIIIIIIP</con:value></con:property><con:property><con:name>eightTicketMag9</con:name><con:value>AFYQNZLKL4NOKNLL63KMOPKKLRKKUKKKKKKQFVQNZLKL4NOKNLL63KMOPKKLRKKUKKKKKKQ</con:value></con:property><con:property><con:name>Payload_ID_CreatTicket</con:name><con:value>91120171030150937595</con:value></con:property><con:property><con:name>nineTicketMag1</con:name><con:value>EFRIHTFEFYHIEHFF0XEGIJEEEDEEOEEEEEEIFCIHTFEFYHIEHFF0XEGIJEEEDEEOEEEEEEI</con:value></con:property><con:property><con:name>nineTicketMag2</con:name><con:value>EFRJEQCBCVEFBECCXUBDFGBBCBBBLBBBBBBJFCJEQCBCVEFBECCXUBDFGBBCBBBLBBBBBBJ</con:value></con:property><con:property><con:name>nineTicketMag3</con:name><con:value>EFSKGSEDEXGHDGEEZWDFHIDDEEDDNDDDDDDKFBKGSEDEXGHDGEEZWDFHIDDEEDDNDDDDDDK</con:value></con:property><con:property><con:name>nineTicketMag4</con:name><con:value>KFULIUGFGZIJFIGG1YFHJKFFGHFFPFFFFFFLFJLIUGFGZIJFIGG1YFHJKFFGHFFPFFFFFFL</con:value></con:property><con:property><con:name>nineTicketMag5</con:name><con:value>KFRMKWIHI1KLHKII30HJLMHHIKHHRHHHHHHMFMMKWIHI1KLHKII30HJLMHHIKHHRHHHHHHM</con:value></con:property><con:property><con:name>nineTicketMag6</con:name><con:value>AFYNMYKJK3MNJMKK52JLNOJJKNJJTJJJJJJNFVNMYKJK3MNJMKK52JLNOJJKNJJTJJJJJJN</con:value></con:property><con:property><con:name>nineTicketMag7</con:name><con:value>EFBOJVHGH0JKGJHH2ZGIKLGGHLGGQGGGGGGOFSOJVHGH0JKGJHH2ZGIKLGGHLGGQGGGGGGO</con:value></con:property><con:property><con:name>nineTicketMag8</con:name><con:value>AFZPLXJIJ2LMILJJ41IKMNIIJOIISIIIIIIPFUPLXJIJ2LMILJJ41IKMNIIJOIISIIIIIIP</con:value></con:property><con:property><con:name>nineTicketMag9</con:name><con:value>AFYQNZLKL4NOKNLL63KMOPKKLRKKUKKKKKKQFVQNZLKL4NOKNLL63KMOPKKLRKKUKKKKKKQ</con:value></con:property><con:property><con:name>firstMag</con:name><con:value>WFDHFRDCDWFGCLDDY1CGN5CCCACCTCCCCCCHFGHFRDCDWFGCLDDY1CGN5CCCACCTCCCCCCH</con:value></con:property><con:property><con:name>adultFirstMag</con:name><con:value>KFVIHTFEFYHIENFF03EIP7EEEDEEVEEEEEEIFIIHTFEFYHIENFF03EIP7EEEDEEVEEEEEEI</con:value></con:property></con:properties></con:testCase><con:testCase id="eb800903-e64a-4152-896d-ced2ed2775e1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SmokeTest_Ticket LifeCycleTest_DLR_QEP_Eligible" searchProperties="true"><con:settings/><con:testStep type="groovy" name="GeneratePayload for QueryEligibleProducts" id="1c9b9d2c-e1ac-4bb3-8da8-2605f09b7426"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - QueryEligibleProducts_DLR" id="30648656-42d7-4354-9a99-4396a9cdbe91"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - QueryEligibleProducts_DLR" id="6b2e632e-7d7e-4a9d-803a-a297aa448117"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/query_eligible_products_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-DLR</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>11:56:39.58</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONADLR</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>DLR_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>11:56:39.58</CmdTime>
            <CmdInvoice>2018895220000011272</CmdInvoice>
            <CmdDevice>PAULH</CmdDevice>
            <CmdOperator>PAULH</CmdOperator>
         </CommandHeader>
         <QueryEligibleProductsRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <External>468380050500000517</External>
               </TktID>
               <SaleType>UPGRADE</SaleType>
            </Ticket>
         </QueryEligibleProductsRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="8abee21c-141a-4510-9641-e9443c72939b" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of QUERYELIGIBLEPRODUCT Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2d41d5a4-0d49-4c72-ab5f-a77cb1ed2951" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of QUERYELIGIBLEPRODUCT Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f7918578-d083-44cf-b1ac-01ccb1da6fa6" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of QUERYELIGIBLEPRODUCT Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0d00be00-44e9-47d7-8039-f01032de32ad" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of QUERYELIGIBLEPRODUCT Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Transfer Ticket details" id="61d79a20-159d-479e-a0af-985fd5722dc2"><con:settings/><con:config><script>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Get Product Code and price
def responseHolderProduct = groovyUtils.getXmlHolder("transmission - QueryEligibleProducts_DLR#Response")
float upgradePrice

External = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/QueryEligibleProductsResponse[1]/Ticket[1]/TktID[1]/External[1]"]
FromProdCode = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/QueryEligibleProductsResponse[1]/Ticket[1]/ProdCode[1]"]
FromProdPrice = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/QueryEligibleProductsResponse[1]/Ticket[1]/SRPPrice[1]"]
ProdCode = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/QueryEligibleProductsResponse[1]/Ticket[1]/EligibleProducts[1]/ProdCode[1]"]
ProdPrice = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/QueryEligibleProductsResponse[1]/Ticket[1]/EligibleProducts[1]/ProdPrice[1]"]
UpgradePrice = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/QueryEligibleProductsResponse[1]/Ticket[1]/EligibleProducts[1]/UpgrdPrice[1]"]
//To set Product code and price property Value
testRunner.testCase.setPropertyValue("External", External)
testRunner.testCase.setPropertyValue("FromProdCode", FromProdCode)
testRunner.testCase.setPropertyValue("FromProdPrice", FromProdPrice)
testRunner.testCase.setPropertyValue("ProdCode", ProdCode)
testRunner.testCase.setPropertyValue("ProdPrice", ProdPrice)
testRunner.testCase.setPropertyValue("UpgradePrice", UpgradePrice)

log.info "External property is set to value: " +  External 
log.info "FromProductCode property is set to value: " +  FromProdCode
log.info "FromProductPrice property is set to value: " +  FromProdPrice
log.info "ProductCode property is set to value: " +  ProdCode
log.info "ProductPrice property is set to value: " +  ProdPrice
log.info "UpgradePrice property is set to value: " + UpgradePrice</script></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for UpgradeEntitlement_CreditCard" id="3bc01ea5-9938-4ec0-adfb-fddc94c79ee6"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_ValidPaymentViaCreditCard" id="dd155a5e-5efb-4687-926e-30f4fc35eb9e"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_ValidPaymentViaCreditCard" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-DLR</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>02:41:45.955</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONADLR</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>DLR_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>02:41:45.955</CmdTime>
            <CmdInvoice>2018895220000011272</CmdInvoice>
            <CmdDevice>PAULH</CmdDevice>
            <CmdOperator>PAULH</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <External>${#TestCase#External}</External>
               </TktID>
               <ProdCode>${#TestCase#ProdCode}</ProdCode>
               <ProdPrice>${#TestCase#ProdPrice}</ProdPrice>
               <ProdDemoData>
                  <TktDemoData Zip="34747" Telephone="8185490789" State="FL" OptInSolicit="NO" LastName="Duck" Gender="M" FirstName="Donald" Email="1@disney.com" DateOfBirth="1982-06-01" Country="US" City="Celebration" Addr1="5151 Buena Vista"/>
               </ProdDemoData>
               <UpgrdPrice>${#TestCase#UpgradePrice}</UpgrdPrice>
               <FromProdCode>${#TestCase#FromProdCode}</FromProdCode>
               <FromPrice>${#TestCase#FromProdPrice}</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <CreditCard>
                     <CCManual>
                        <CCNbr>4444855457062688</CCNbr>
                        <CCExpiration>1219</CCExpiration>
                        <CCVV>529</CCVV>
                        <CCStreet>756 PARIS WAY</CCStreet>
                        <CCZipcode>76590</CCZipcode>
                        <CCType>AX</CCType>
                     </CCManual>
                  </CreditCard>
               </PayType>
               <PayAmount>${#TestCase#UpgradePrice}</PayAmount>
            </Payment>
           <Reservation>
               <ResCode>DLRY2000010000062970</ResCode>
               <ResCreateDate>2017-08-09</ResCreateDate>
               <ResPickupDate>2017-08-09</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
                  <Ship Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for UpgradeEntitlement_Installment" id="2c44ac10-0a5c-4182-8727-2080e0946588"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_ValidPaymentViaInstallment" id="38be18ee-4912-4346-9209-f8462ea7d7e5"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_ValidPaymentViaInstallment" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-DLR</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>02:41:45.955</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONADLR</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>DLR_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>02:41:45.955</CmdTime>
            <CmdInvoice>2018895220000011272</CmdInvoice>
            <CmdDevice>PAULH</CmdDevice>
            <CmdOperator>PAULH</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <External>${#TestCase#External}</External>
               </TktID>
               <ProdCode>${#TestCase#ProdCode}</ProdCode>
               <ProdPrice>${#TestCase#ProdPrice}</ProdPrice>
               <ProdDemoData>
                  <TktDemoData Zip="34747" Telephone="8185490789" State="FL" OptInSolicit="NO" LastName="Duck" Gender="M" FirstName="Donald" Email="1@disney.com" DateOfBirth="1982-06-01" Country="US" City="Celebration" Addr1="5151 Buena Vista"/>
               </ProdDemoData>
               <UpgrdPrice>${#TestCase#UpgradePrice}</UpgrdPrice>
               <FromProdCode>${#TestCase#FromProdCode}</FromProdCode>
               <FromPrice>${#TestCase#FromProdPrice}</FromPrice>
            </Ticket>
            <Eligibility>
               <Group>RESIDENCE</Group>
               <Member>SOCA_RES</Member>
            </Eligibility>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>4444855457062688</CCNbr>
                           <CCExpiration>1219</CCExpiration>
                           <CCName>Visa</CCName>
                           <CCVV>529</CCVV>
                           <CCStreet>756 PARIS WAY</CCStreet>
                           <CCZipcode>76590</CCZipcode>
                           <CCType>AX</CCType>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>${#TestCase#UpgradePrice}</PayAmount>
            </Payment>
            <Reservation>
               <ResCode>DLRY1000010000084112</ResCode>
               <ResCreateDate>2017-08-09</ResCreateDate>
               <ResPickupDate>2017-08-09</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
                  <Ship Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>DTIAppUrl</con:name><con:value>https://dti-latest.disney.pvt/DTIApp/DTIApp</con:value></con:property><con:property><con:name>factor</con:name><con:value>200</con:value></con:property><con:property><con:name>counter</con:name><con:value>100000</con:value></con:property><con:property><con:name>Payload_ID</con:name><con:value>91120171026150904057</con:value></con:property><con:property><con:name>CurrentDate</con:name><con:value>2017-09-22</con:value></con:property><con:property><con:name>DTIInfoSysServlet</con:name><con:value>https://dti-latest.disney.pvt/DTIInfoSys/DTIInfoSysServlet</con:value></con:property><con:property><con:name>TktNId</con:name><con:value>10501615091700014</con:value></con:property><con:property><con:name>tickets</con:name><con:value>468390050500000530</con:value></con:property><con:property><con:name>BasePath</con:name><con:value>/var/opt/apps/RT/schemas</con:value></con:property><con:property><con:name>External</con:name><con:value>468380050500000517</con:value></con:property><con:property><con:name>ProdCode</con:name><con:value>80422NCS</con:value></con:property><con:property><con:name>ProdPrice</con:name><con:value>339</con:value></con:property><con:property><con:name>FromProdCode</con:name><con:value>46838</con:value></con:property><con:property><con:name>FromProdPrice</con:name><con:value>187</con:value></con:property><con:property><con:name>UpgradePrice</con:name><con:value>152</con:value></con:property></con:properties></con:testCase><con:testCase id="fa0cdb44-f033-4f75-aaf8-d5295ff3e792" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SmokeTest_Ticket LifeCycleTest_DLR_QEP_InEligible" searchProperties="true"><con:settings/><con:testStep type="groovy" name="GeneratePayload  for Product Catalog" id="fb3ee45b-71aa-4f0a-8dac-c985bf8f5e6b"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

testRunner.testCase.setPropertyValue("factor", String.valueOf(1))

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
//Extract First 20 character
Payload_ID = workString.substring(0,20)

sdf = new SimpleDateFormat("yyyy-MM-dd")
CurrentDate = sdf.format(date)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )
testRunner.testCase.setPropertyValue("CurrentDate",CurrentDate )

log.info "Payload_ID value is set to: " + Payload_ID 
log.info "CurrentDate value is set to: " + CurrentDate</script></con:config></con:testStep><con:testStep type="request" id="f6348e03-ddd2-45c1-bc4b-8c901c4851ce" name="Copy of transmission - InfoSys BRAVO Product Catalog Updated" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="Copy of transmission - InfoSys BRAVO Product Catalog Updated" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="c4a4fb7e-231a-47c9-b4b7-68737429c445"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIInfoSysServlet}</con:endpoint><con:request><![CDATA[<ProductCatalogRQ xsi:noNamespaceSchemaLocation="\var\opt\apps\RT\schemas\dtiinfosys.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <PayloadHeader>
      <PayloadID>${#TestCase#Payload_ID}</PayloadID>
      <Target>Test-DLR</Target>
      <Version>1.0</Version>
      <Comm>
         <Protocol>IP</Protocol>
         <Method>Network</Method>
      </Comm>
      <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
      <TransmitTime>08:29:34.374</TransmitTime>
   </PayloadHeader>
   <CommandHeader>
      <CmdTimeout>30</CmdTimeout>
      <CmdRequestor>
         <TSMAC>WDPRONADLR</TSMAC>
         <TSLocation>DLR_AGENT</TSLocation>
         <CmdOperator>WDPRO</CmdOperator>
         <CmdActor>DVR</CmdActor>
      </CmdRequestor>
   </CommandHeader>
   <CommandBody>
      <ProviderType>Walt Disney World</ProviderType>
      <TSMAC>WDPRONADLR</TSMAC>
      <TSLocation>DLR_AGENT</TSLocation>
      <IncludeSoldOut>true</IncludeSoldOut>
      <OnSaleStartDate>2005-01-31</OnSaleStartDate>
      <SkipResponses>1</SkipResponses>
      <IncludeCalendarDetail>true</IncludeCalendarDetail>
   </CommandBody>
</ProductCatalogRQ>]]></con:request><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="Headers Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="XPath Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Element existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath + "\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="String Validation - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * assertion to validate the String existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="Numeric Validation - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Script assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" id="6e8cfe25-d89f-405f-80d6-72fe9c94c1e4" name="transmission - InfoSys BRAVO Product Catalog Updated"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - InfoSys BRAVO Product Catalog Updated" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="c4a4fb7e-231a-47c9-b4b7-68737429c445"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIInfoSysServlet}</con:endpoint><con:request><![CDATA[<ProductCatalogRQ xsi:noNamespaceSchemaLocation="\var\opt\apps\RT\schemas\dtiinfosys.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <PayloadHeader>
      <PayloadID>${#TestCase#Payload_ID}</PayloadID>
      <Target>Test-DLR</Target>
      <Version>1.0</Version>
      <Comm>
         <Protocol>IP</Protocol>
         <Method>Network</Method>
      </Comm>
      <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
      <TransmitTime>08:29:34.374</TransmitTime>
   </PayloadHeader>
   <CommandHeader>
      <CmdTimeout>30</CmdTimeout>
      <CmdRequestor>
         <TSMAC>WDWEAI</TSMAC>
         <TSLocation>SBC</TSLocation>
         <CmdOperator>Bob</CmdOperator>
         <CmdActor>DVR</CmdActor>
      </CmdRequestor>
   </CommandHeader>
   <CommandBody>
      <ProviderType>Walt Disney World</ProviderType>
      <TSMAC>WDWEAI</TSMAC>
      <TSLocation>SBC</TSLocation>
      <IncludeSoldOut>true</IncludeSoldOut>
      <OnSaleStartDate>2005-01-31</OnSaleStartDate>
      <SkipResponses>1</SkipResponses>
      <IncludeCalendarDetail>true</IncludeCalendarDetail>
   </CommandBody>
</ProductCatalogRQ>]]></con:request><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="Headers Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="XPath Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Element existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath + "\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="String Validation - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * assertion to validate the String existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="9656aa59-d61b-435b-aa38-ccbffacaa448" name="Numeric Validation - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Script assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://services.dti.wdw.com/DisneyTicketingService/transmission"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Transfer Product Info" id="eca6432a-4d45-4ccd-95cc-ff868f715f6f"><con:settings/><con:config><script>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Get Product Code and price
def responseHolderProduct = groovyUtils.getXmlHolder("transmission - InfoSys BRAVO Product Catalog Updated#Response")


ProductCode= responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product[10]/ProdCode[1]"]
ProductPrice= responseHolderProduct["//ProductCatalogRS[1]/CommandBody[1]/Product[10]/ProdPricing[1]/ProdNetPrice[1]"]

//To set Product code and price property Value
testRunner.testCase.setPropertyValue("ProductCode",ProductCode)
testRunner.testCase.setPropertyValue("ProductPrice",ProductPrice)

log.info "ProductCode property is set to value: " +  ProductCode
log.info "ProductPrice property is set to value: " +  ProductPrice</script></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload" id="ce71f02e-309f-42d5-ac09-a2ff2e162d48"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

testRunner.testCase.setPropertyValue("factor", String.valueOf(1))

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
//Extract First 20 character
Payload_ID = workString.substring(0,20)

sdf = new SimpleDateFormat("yyyy-MM-dd")
CurrentDate = sdf.format(date)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )
testRunner.testCase.setPropertyValue("CurrentDate",CurrentDate )

log.info "Payload_ID value is set to: " + Payload_ID 
log.info "CurrentDate value is set to: " + CurrentDate</script></con:config></con:testStep><con:testStep type="request" name="Copy of transmission - CreateReservation" id="e78d7d14-e2a3-417d-87ee-60c93f9a5f8a" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="Copy of transmission - CreateReservation" id="7e01c872-0928-45a5-beb5-2c6b92871791"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">  
  <Payload> 
    <PayloadHeader> 
      <PayloadID>36100000010002433567</PayloadID>  
      <Target>Test-DLR</Target>  
      <Version>1.0</Version>  
      <Comm> 
        <Protocol>IP</Protocol>  
        <Method>Network</Method> 
      </Comm>  
      <TransmitDate>2017-10-24</TransmitDate>  
      <TransmitTime>18:03:47.09</TransmitTime>  
      <TktSeller> 
        <TSMAC>WDPRONADLR</TSMAC>  
        <TSSystem>CC</TSSystem>  
        <TSLocation>DLR_MOBILE</TSLocation>  
        <TSSecurity>WaltDisney1</TSSecurity> 
      </TktSeller>  
      <CommandCount>1</CommandCount> 
    </PayloadHeader>  
    <Command> 
      <CommandHeader> 
        <CmdItem>1</CmdItem>  
        <CmdTimeout>25</CmdTimeout>  
        <CmdDate>2017-10-24</CmdDate>  
        <CmdTime>18:03:47.09</CmdTime>  
        <CmdInvoice>00000010002433065</CmdInvoice>  
        <CmdDevice>127.0.0.1</CmdDevice>  
        <CmdOperator>WDPRO</CmdOperator> 
      </CommandHeader>  
      <ReservationRequest> 
        <RequestType>Create</RequestType>  
       
        <Ticket> 
          <TktItem>1</TktItem>  
          <ProdCode>48366PAH</ProdCode>  
          <ProdQty>1</ProdQty>  
          <ProdPrice>10.00</ProdPrice> 
        </Ticket>  
        <Payment> 
          <PayItem>1</PayItem>  
          <PayType> 
            <CreditCard> 
              <CCManual> 
                <CCNbr>ZZZZZZZZZZZZ9187</CCNbr>  
                <CCExpiration>1119</CCExpiration>  
                <CCVV>ZZZ</CCVV>  
                <CCName>AVNER LO</CCName>  
                <CCStreet>1277 Broadway</CCStreet>  
                <CCZipcode>01906</CCZipcode>  
                <CCType>DS</CCType> 
              </CCManual> 
            </CreditCard> 
          </PayType>  
          <PayAmount>10.00</PayAmount> 
        </Payment>  
        <Eligibility> 
          <Group>GP</Group>  
          <Member/> 
        </Eligibility>  
        <Reservation> 
          <ResCode>DLRM2000010000175904</ResCode>  
          <ResCreateDate>2017-10-23</ResCreateDate>  
          <ResPickupDate>2017-10-23</ResPickupDate>  
          <ResPickupArea>PrintOnWeb</ResPickupArea>  
          <ResSalesType>PrintOnWeb</ResSalesType> 
        </Reservation>  
        <ClientData> 
          <ClientType>Private</ClientType>  
          <ClientCategory>WW</ClientCategory>  
          <DemoLanguage>en</DemoLanguage>  
          <DemoData> 
            <Bill Addr1="1277 Broadway" Addr2="" City="Saugus" Country="US" Email="reg49stg12@mailinator.com" FirstName="AVNER" LastName="LO" Name="AVNER LO" State="MA" Telephone="2145551424" Zip="01906"/>  
            <Ship Email="reg49stg12@mailinator.com" Name="" Telephone="2145551424"/> 
          </DemoData> 
        </ClientData>  
        <EntitlementAccount> 
          <SpecifiedAccount> 
            <AccountItem>1</AccountItem>  
            <NewAccount> 
              <ExternalReferenceType>TXN_GUID</ExternalReferenceType>  
              <ExternalReferenceValue>234667027103-3330932-1429230-4874981</ExternalReferenceValue> 
            </NewAccount>  
            <AccountDemoData FirstName="AVNER"/> 
          </SpecifiedAccount> 
        </EntitlementAccount> 
      </ReservationRequest> 
    </Command> 
  </Payload> 
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="4d5fe6ff-afb4-4fdb-b851-c96155b6be24" name="Headers Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  CREATE RESERVATION Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="351b87be-5439-4d83-8087-3b54823b89fa" name="XPath Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of CREATE RESERVATION Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="72d37f8c-e8ee-4019-90b6-49e2f9d44378" name="String Validation - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of CREATE RESERVATION Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="482a6895-499f-43cd-a0f3-fe52bf28bfe2" name="Numeric Validation - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of CREATE RESERVATION Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="transmission - CreateReservation" id="920f7ed7-49d0-42b6-8101-15d4abd3e22b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - CreateReservation" id="7e01c872-0928-45a5-beb5-2c6b92871791"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/reservationrq.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<Payload>
   <PayloadHeader>
      <PayloadID>${#TestCase#Payload_Id}</PayloadID>
      <Target>Test-DLR</Target>
      <Version>1.0</Version>
      <Comm>
         <Protocol>IP</Protocol>
         <Method>Network</Method>
      </Comm>
      <TransmitDate>${#TestCase#Currentdate}</TransmitDate>
      <TransmitTime>02:10:18.47</TransmitTime>
      <TktSeller>
         <TSMAC>WDPRONADLR</TSMAC>
         <TSSystem>CC</TSSystem>
         <TSLocation>DLR_MOBILE</TSLocation>
         <TSSecurity>WaltDisney1</TSSecurity>
      </TktSeller>
      <CommandCount>1</CommandCount>
   </PayloadHeader>
   <Command>
      <CommandHeader>
         <CmdItem>1</CmdItem>
         <CmdTimeout>25</CmdTimeout>
         <CmdDate>${#TestCase#Currentdate}</CmdDate>
         <CmdTime>02:10:18.47</CmdTime>
         <CmdInvoice>00000010002422956</CmdInvoice>
         <CmdDevice>127.0.0.1</CmdDevice>
         <CmdOperator>WDPRO</CmdOperator>
      </CommandHeader>
      <ReservationRequest>
         <RequestType>Create</RequestType>
         <Ticket>
            <TktItem>1</TktItem>
            <ProdCode>33708</ProdCode>
            <ProdQty>1</ProdQty>
            <ProdPrice>0</ProdPrice>
         </Ticket>  
         <Payment>
            <PayItem>1</PayItem>
            <PayType>
               <CreditCard>
                  <CCManual>
                     <CCNbr>4444855457062688</CCNbr>
                     <CCExpiration>1219</CCExpiration>
                     <CCVV>529</CCVV>
                     <CCName>Jame Bo</CCName>
                     <CCStreet>756 PARIS WAY</CCStreet>
                     <CCZipcode>76590</CCZipcode>
                     <CCType>DS</CCType>
                  </CCManual>
               </CreditCard>
            </PayType>
            <PayAmount>0</PayAmount>
         </Payment>
         <Eligibility>
            <Group>DLR</Group>
            <Member>300047229</Member>
         </Eligibility>
         <Reservation>
            <ResCode>DLRY2000010000174716</ResCode>
            <ResCreateDate>2017-10-16</ResCreateDate>
            <ResPickupDate>2017-10-16</ResPickupDate>
            <ResPickupArea>PrintOnWeb</ResPickupArea>
            <ResSalesType>PrintOnWeb</ResSalesType>
         </Reservation>
         <ClientData>
            <ClientType>Private</ClientType>
            <ClientCategory>WW</ClientCategory>
            <DemoLanguage>en</DemoLanguage>
            <DemoData>
               <Bill Addr1="666 Sunset blvd" Addr2="" City="Anaheim" Country="USA" Email="mcorda@gmail.com" FirstName="dfsdf" LastName="fsdfsdf" Name="dfsdf fsdfsdf" State="CA" Telephone="6268536987" Zip="92808"/>
               <Ship Addr1="" Addr2="" City="" Country="USA" Email="mcorda@gmail.com" FirstName="" LastName="" Name=" " Telephone="6268536987" Zip=""/>
            </DemoData>
         </ClientData>
         <Agency>
            <IATA>99999998</IATA>
         </Agency>
         <Note>99999998</Note>
      </ReservationRequest>
   </Command>
</Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="4d5fe6ff-afb4-4fdb-b851-c96155b6be24" name="Headers Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Script assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  CREATE RESERVATION Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="351b87be-5439-4d83-8087-3b54823b89fa" name="XPath Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of CREATE RESERVATION Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="72d37f8c-e8ee-4019-90b6-49e2f9d44378" name="String Validation - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of CREATE RESERVATION Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="482a6895-499f-43cd-a0f3-fe52bf28bfe2" name="Numeric Validation - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of CREATE RESERVATION Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Transfer TktNID" id="e8bd0e0f-3465-482f-9849-5346341869ee"><con:settings/><con:config><script>import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import java.text.SimpleDateFormat

def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Get Ticket NIDs from multiple tickets
def responseHolderProduct = groovyUtils.getXmlHolder("transmission - CreateReservation#Response")
TktNID = responseHolderProduct["//Transmission[1]/Payload[1]/Command[1]/CreateTicketResponse[1]/Ticket[1]/TktID[1]/TktNID[1]"]

//To set Product code and price property Value
testRunner.testCase.setPropertyValue("TktNID",TktNID)

log.info "TktNID property is set to value: " +  TktNID</script></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for QueryTicket" id="82b30524-846a-4fbe-abc3-6f1a2ab15600"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - QueryTicket" id="7cc16c89-43fb-4b49-be5f-ffbb552172d4"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - QueryTicket" id="6ac50131-5d74-452a-b554-8c8438ab0108"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/query_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-DLR</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>12:00:57.93</TransmitTime>
         <TktSeller>
            <TSMAC>AAA212P</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>026</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>120</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>12:00:57.93</CmdTime>
            <CmdInvoice>2012120260000128369</CmdInvoice>
            <CmdDevice>DENDRES</CmdDevice>
            <CmdOperator>DENDRES</CmdOperator>
            <CmdActor>MGR</CmdActor>
         </CommandHeader>
         <QueryTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktNID>${#TestCase#TktNId}</TktNID>
               </TktID>
            </Ticket>
         </QueryTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="f3a3bf8b-1436-45b8-bbe0-c715d001f0db" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of QUERYTICKET Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="55abd261-2cad-4655-a579-09bfb89233af" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of Query Ticket response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="064ebf49-55c4-4a5f-a3c3-947edb45dd69" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of Query Ticket Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1be9a042-22af-450f-b4f5-cb76abee4c08" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of Query Ticket Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for QueryEligibleProducts_InEligible" id="a5e1f1e1-59f0-4b05-a141-86ef6dda8f07"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - QueryEligibleProducts_InEligible_DLR" id="e9b15ac4-b8e8-4173-94f1-1ae90cefc3dc"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - QueryEligibleProducts_InEligible_DLR" id="6b2e632e-7d7e-4a9d-803a-a297aa448117"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/query_eligible_products_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-DLR</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>11:56:39.58</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONADLR</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>DLR_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>11:56:39.58</CmdTime>
            <CmdInvoice>2018895220000011272</CmdInvoice>
            <CmdDevice>PAULH</CmdDevice>
            <CmdOperator>PAULH</CmdOperator>
         </CommandHeader>
         <QueryEligibleProductsRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <External>469740050500000495</External>
               </TktID>
               <SaleType>UPGRADE</SaleType>
            </Ticket>
         </QueryEligibleProductsRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="8abee21c-141a-4510-9641-e9443c72939b" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of QueryEligibleProduct Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2d41d5a4-0d49-4c72-ab5f-a77cb1ed2951" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  QueryEligibleProduct Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f7918578-d083-44cf-b1ac-01ccb1da6fa6" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of QueryEligibleproduct Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0d00be00-44e9-47d7-8039-f01032de32ad" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  QueryEligibleproduct Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for VoidTicket" id="a1c0d4c3-658b-4c7a-99fc-3be619409138"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - VoidTicket" id="9f5df37e-d9da-417c-b690-a8c38cc96ff2"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - VoidTicket" id="6b2e632e-7d7e-4a9d-803a-a297aa448117"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/void_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>11:56:39.58</TransmitTime>
         <TktSeller>
            <TSMAC>AAA212P</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>026</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>11:56:39.58</CmdTime>
            <CmdInvoice>2012120260000128369</CmdInvoice>
            <CmdDevice>DENDRES</CmdDevice>
            <CmdOperator>DENDRES</CmdOperator>
            <CmdActor>MGR</CmdActor>
         </CommandHeader>
         <VoidTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktNID>${#TestCase#TktNID}</TktNID>
               </TktID>
            </Ticket>
         </VoidTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="8abee21c-141a-4510-9641-e9443c72939b" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Void Ticket Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2d41d5a4-0d49-4c72-ab5f-a77cb1ed2951" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of void Ticket Response 
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f7918578-d083-44cf-b1ac-01ccb1da6fa6" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of Void Ticket Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0d00be00-44e9-47d7-8039-f01032de32ad" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of Void Ticket Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="GeneratePayload for Voided QueryTicket" id="76c1fd93-c393-4d7f-8026-29e8072c43b7"><con:settings/><con:config><script>import java.text.SimpleDateFormat
//def groovyUtils = new com.eviware.soapui.support.GroovyUtils( context )

//Set payload ID in transmission - QueryTicket after Void
//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis() + uniqueId)

Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID)

log.info "Payload_ID value is set to: " + Payload_ID</script></con:config></con:testStep><con:testStep type="request" name="transmission - QueryTicket after Void" id="07751de7-0308-4344-85e2-529d11232795"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - QueryTicket after Void" id="ac0b9019-47dd-4cbf-9a9d-47b9ced8c1a3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/query_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>12:00:57.93</TransmitTime>
         <TktSeller>
            <TSMAC>AAA212P</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>026</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>120</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>12:00:57.93</CmdTime>
            <CmdInvoice>2012120260000128369</CmdInvoice>
            <CmdDevice>DENDRES</CmdDevice>
            <CmdOperator>DENDRES</CmdOperator>
            <CmdActor>MGR</CmdActor>
         </CommandHeader>
         <QueryTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktNID>${#TestCase#TktNId}</TktNID>
               </TktID>
            </Ticket>
         </QueryTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="e4df8828-5d99-4a7f-9a97-4229ea1d9b77" name="Headers Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Query Ticket Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}

</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="dadbab25-4ef2-451c-8284-9271a5a75925" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Query Ticket Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="af1d632a-05bf-4d5d-9028-7f1061956248" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="a9bd0632-7864-4ee2-a2c2-2e1add91b384" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of Query Tiscket Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>DTIAppUrl</con:name><con:value>https://dti-latest.disney.pvt/DTIApp/DTIApp</con:value></con:property><con:property><con:name>factor</con:name><con:value>2</con:value></con:property><con:property><con:name>counter</con:name><con:value>100000</con:value></con:property><con:property><con:name>Payload_ID</con:name><con:value>91120171026150902082</con:value></con:property><con:property><con:name>CurrentDate</con:name><con:value>2017-10-26</con:value></con:property><con:property><con:name>DTIInfoSysServlet</con:name><con:value>https://dti-latest.disney.pvt/DTIInfoSys/DTIInfoSysServlet</con:value></con:property><con:property><con:name>TktNId</con:name><con:value>10501610101700008</con:value></con:property><con:property><con:name>Basepath</con:name><con:value>/var/opt/apps/RT/schemas</con:value></con:property><con:property><con:name>ProductCode</con:name><con:value>10051</con:value></con:property><con:property><con:name>ProductPrice</con:name><con:value>107.57</con:value></con:property></con:properties></con:testCase><con:testCase id="e67211ac-1051-496a-8425-92a7747f255b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SmokeTest_Ticket LifeCycleTest_DLR_QEP_PLU_OfflineCode" searchProperties="true"><con:settings/><con:testStep type="groovy" name="GeneratePayload for QueryEligibleProducts_DLRPLU" id="5eb42edc-2bdb-4213-baa6-cc5d56d5bf84"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - QueryEligibleProducts_DLRPLU" id="2a1211c6-a72e-4a27-9182-6136f3a5fe87"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - QueryEligibleProducts_DLRPLU" id="6b2e632e-7d7e-4a9d-803a-a297aa448117"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/query_eligible_products_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-DLR</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>11:56:39.58</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONADLR</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>DLR_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>11:56:39.58</CmdTime>
            <CmdInvoice>2018895220000011272</CmdInvoice>
            <CmdDevice>PAULH</CmdDevice>
            <CmdOperator>PAULH</CmdOperator>
         </CommandHeader>
         <QueryEligibleProductsRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <External>469740050500000495</External>
               </TktID>
               <SaleType>UPGRADE</SaleType>
            </Ticket>
         </QueryEligibleProductsRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="8abee21c-141a-4510-9641-e9443c72939b" name="Headers Existence - Script Assertion"><con:configuration><scriptText>/*
 * Assertion to validate the Header existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Header Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of QueryEligibleProduct Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 4th colum of the data sheet
			String header = sheet.getCell(3, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode("//"+elements[j]+"[1]")
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2d41d5a4-0d49-4c72-ab5f-a77cb1ed2951" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  QueryEligibleProduct Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f7918578-d083-44cf-b1ac-01ccb1da6fa6" name="String Validation - Script Assertion"><con:configuration><scriptText>/*
 * String assertion to validate the string existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** String Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of QueryEligibleproduct Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 6th colum of the data sheet
			String header = sheet.getCell(5, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
			
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement instanceof String)
					{
						log.info  elements[j]  + " :: The element contains string value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non string value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All Xpath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These XPath are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0d00be00-44e9-47d7-8039-f01032de32ad" name="Numeric Validation - Script Assertion"><con:configuration><scriptText>/*
 * Numeric assertion to validate the Numeric existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Numeric Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)

//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  QueryEligibleproduct Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 7th colum of the data sheet
			String header = sheet.getCell(6, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		
			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getNodeValue(elements[j])
				if(responseElement != null)
				{
					if(responseElement.isNumber())
					{
						log.info  elements[j]  + " :: The element contains Numeric value"
						passedMap.put(j,elements[j])
					}
					else
					{
						log.info  elements[j]  + " :: The element contains non numeric value"
						failedMap.put(j,elements[j])
					}
				}
				else
				{
					log.info  elements[j]  +" :: Element Not found"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

////Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All XPath are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These Xpaths are not returned in the response or returned incorrectly : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>DTIAppUrl</con:name><con:value>https://dti-latest.disney.pvt/DTIApp/DTIApp</con:value></con:property><con:property><con:name>factor</con:name><con:value>10</con:value></con:property><con:property><con:name>counter</con:name><con:value>100000</con:value></con:property><con:property><con:name>Payload_ID</con:name><con:value>91120171026150902162</con:value></con:property><con:property><con:name>CurrentDate</con:name><con:value>2017-10-13</con:value></con:property><con:property><con:name>DTIInfoSysServlet</con:name><con:value>https://dti-latest.disney.pvt/DTIInfoSys/DTIInfoSysServlet</con:value></con:property><con:property><con:name>TktNId</con:name><con:value>10501610101700008</con:value></con:property><con:property><con:name>Basepath</con:name><con:value>/var/opt/apps/RT/schemas</con:value></con:property></con:properties></con:testCase><con:testCase id="ec93a44a-dbcf-4cc4-b164-5d6edf7c1c70" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SmokeTest_Barcode_of_validation" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Generate payload ID for QueryTicket" id="94b1f705-6fa7-4a7a-b70e-bc1fb3c717d6"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="QueryTicket_For_Invalid_BarCode" id="d3d88156-f16c-4299-a365-5cc886289e82"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="QueryTicket_For_Invalid_BarCode" id="54cb54e6-8dbc-422b-a0bc-67140f053e6a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/query_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>13:25:00</TransmitTime>
         <TktSeller>
            <TSMAC>XGREETER</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>XGREETERAPP</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>120</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>13:25:00</CmdTime>
            <CmdInvoice>199</CmdInvoice>
            <CmdDevice>HPWDW</CmdDevice>
            <CmdOperator>BIEST001</CmdOperator>
            <CmdActor>SYS</CmdActor>
         </CommandHeader>
         <QueryTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <Barcode>EGGSD114Y00F15D5MKL</Barcode>
               </TktID>
            </Ticket>
            <IncludeEntitlementAccount>true</IncludeEntitlementAccount>
         </QueryTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="eed01b77-6560-4516-831b-c57b0649e737" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of Query Ticket Response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Generate payload ID for Queryticket valid" id="e093e3cb-ed5b-4f3f-91a2-2afb58a6ecbf"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="QueryTicket_For_Valid_BarCode" id="35b1a513-8c5b-4b7c-951f-b06d7dbd58b1"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="QueryTicket_For_Valid_BarCode" id="54cb54e6-8dbc-422b-a0bc-67140f053e6a"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#BasePath}/query_ticket_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>13:25:00</TransmitTime>
         <TktSeller>
            <TSMAC>XGREETER</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>XGREETERAPP</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>120</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>13:25:00</CmdTime>
            <CmdInvoice>199</CmdInvoice>
            <CmdDevice>HPWDW</CmdDevice>
            <CmdOperator>BIEST001</CmdOperator>
            <CmdActor>SYS</CmdActor>
         </CommandHeader>
         <QueryTicketRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <Barcode>KBG3F113Q08EBSD5M</Barcode>
               </TktID>
            </Ticket>
            <IncludeEntitlementAccount>true</IncludeEntitlementAccount>
         </QueryTicketRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="eed01b77-6560-4516-831b-c57b0649e737" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of Query ticket response
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>DTIAppUrl</con:name><con:value>https://dti-latest.disney.pvt/DTIApp/DTIApp</con:value></con:property><con:property><con:name>factor</con:name><con:value>47</con:value></con:property><con:property><con:name>counter</con:name><con:value>100000</con:value></con:property><con:property><con:name>Payload_ID</con:name><con:value>91120171026150902534</con:value></con:property><con:property><con:name>CurrentDate</con:name><con:value>2017-09-27</con:value></con:property><con:property><con:name>DTIInfoSysServlet</con:name><con:value>https://dti-latest.disney.pvt/DTIInfoSys/DTIInfoSysServlet</con:value></con:property><con:property><con:name>TktNId</con:name><con:value>10501619091700005</con:value></con:property><con:property><con:name>BasePath</con:name><con:value>/var/opt/apps/RT/schemas</con:value></con:property></con:properties></con:testCase><con:testCase id="894dd600-1ba0-4300-a8f1-04770b71b977" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SmokeTest_WDW_UpgradeEntitlement_Invalid_DLR" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="Generate Payload for UpgradeEntitlement" id="45b4d188-2b57-4344-a93c-273819ddabae"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_InvalidTarget" id="6503cdbf-8e5b-4ccc-a2f3-f8e6046fcbdc"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_InvalidTarget" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>trf-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>98:40:20.70</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>08:40:20.70</CmdTime>
            <CmdInvoice>3992016072900001</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-09-18</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>1</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>NWF2G</ProdCode>
               <ProdPrice>818.99</ProdPrice>
               <ProdDemoData>
                  <TktDemoData Zip="34747" Telephone="8185490789" State="FL" OptInSolicit="NO" LastName="Duck" Gender="M" FirstName="Donald" Email="1@disney.com" DateOfBirth="1982-06-01" Country="USA" City="Celebration" Addr1="5151 Buena Vista"/>
               </ProdDemoData>
               <UpgrdPrice>336.54</UpgrdPrice>
               <FromProdCode>GUX1C</FromProdCode>
               <FromPrice>482.45</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>4444855457062688</CCNbr>
                           <CCExpiration>1219</CCExpiration>
                           <CCName>Visa</CCName>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>336.54</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>${#TestCase#CurrentDate}</ResCreateDate>
               <ResPickupDate>${#TestCase#CurrentDate}</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="26ca7710-07f2-4268-8d82-0af98c13f69b" name="XPath Existence - Script Assertion"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Generate Payload for UpgradeEntitlement 1" id="ebcc76c8-887d-46e3-9e9c-19f51da7791e"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_InvalidDateFormat" id="17525b45-11c6-4267-aa47-909979a40a1f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_InvalidDateFormat" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${#TestCase#DTIAppUrl}</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>212-212-212</TransmitDate>
         <TransmitTime>98:40:20.70</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>212-212-212</CmdDate>
            <CmdTime>08:40:20.70</CmdTime>
            <CmdInvoice>3992016072900001</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-09-18</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>1</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>NWF2G</ProdCode>
               <ProdPrice>818.99</ProdPrice>
               <ProdDemoData>
                  <TktDemoData Zip="34747" Telephone="8185490789" State="FL" OptInSolicit="NO" LastName="Duck" Gender="M" FirstName="Donald" Email="1@disney.com" DateOfBirth="1982-06-01" Country="USA" City="Celebration" Addr1="5151 Buena Vista"/>
               </ProdDemoData>
               <UpgrdPrice>336.54</UpgrdPrice>
               <FromProdCode>GUX1C</FromProdCode>
               <FromPrice>482.45</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>4444855457062688</CCNbr>
                           <CCExpiration>1219</CCExpiration>
                           <CCName>Visa</CCName>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>336.54</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>${#TestCase#CurrentDate}</ResCreateDate>
               <ResPickupDate>${#TestCase#CurrentDate}</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="79a23a3a-a924-4c3f-91c1-f745d0e86173" name="XPath Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Generate Payload for UpgradeEntitlement 2" id="30bb4b96-e4d6-42de-bf0e-b0bd2409754e"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_InvalidTimeFormat" id="b741f555-680b-45f8-a668-3c771c973366"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_InvalidTimeFormat" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8081/DTIWeb/DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="${#TestCase#Basepath}/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <Payload>
      <PayloadHeader>
         <PayloadID>${#TestCase#Payload_ID}</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>${#TestCase#CurrentDate}</TransmitDate>
         <TransmitTime>123654</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>${#TestCase#CurrentDate}</CmdDate>
            <CmdTime>556449</CmdTime>
            <CmdInvoice>3992016072900001</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-09-18</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>1</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>NWF2G</ProdCode>
               <ProdPrice>818.99</ProdPrice>
               <ProdDemoData>
                  <TktDemoData Zip="34747" Telephone="8185490789" State="FL" OptInSolicit="NO" LastName="Duck" Gender="M" FirstName="Donald" Email="1@disney.com" DateOfBirth="1982-06-01" Country="USA" City="Celebration" Addr1="5151 Buena Vista"/>
               </ProdDemoData>
               <UpgrdPrice>336.54</UpgrdPrice>
               <FromProdCode>GUX1C</FromProdCode>
               <FromPrice>482.45</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>4444855457062688</CCNbr>
                           <CCExpiration>1219</CCExpiration>
                           <CCName>Visa</CCName>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>336.54</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>${#TestCase#CurrentDate}</ResCreateDate>
               <ResPickupDate>${#TestCase#CurrentDate}</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="GroovyScriptAssertion" id="96d47884-79d2-4bf3-82c4-4990dcfa3c50" name="XPath Existence - Script Assertion" disabled="true"><con:configuration><scriptText>/*
 * Xpath assertion to validate the Tag existence
 * in accordance with the data populated in the excel sheet - "LifeCycleValidation.xls"
 */
 
import jxl.*; 
import com.eviware.soapui.support.xml.XmlUtils;
import com.eviware.soapui.support.GroovyUtils;
import org.apache.commons.lang.StringUtils;


log.info "****************** Tag Validation *****************"
def groovyUtils = new GroovyUtils( context )
def responseHolder = groovyUtils.getXmlHolder( messageExchange.responseContent )
def failedMap = [:]
def passedMap = [:]
def elements


//Get the Project path using Properties
projectFile = messageExchange.modelItem.parent.parent.parent.parent.getPath()
projectpath = projectFile.substring(0, projectFile.lastIndexOf("\\"));
//def projectpath = groovyUtils.projectPath  

if   (projectpath.toLowerCase().contains("jenkins")) { 
	projectpath = projectpath + "\\"+ "DTI Automation Test 01\\src\\test\\soapui\\DTI"//Set the path of the project root from Slave
						  
}
log.info projectpath 

//Get Current Test Case and Test step in order to match with excel sheet data
currentTestcase = messageExchange.modelItem.parent.parent.name
currentTeststep = messageExchange.modelItem.parent.name
log.info "Current test case name : " + currentTestcase
log.info "Current test step name : " + currentTeststep


//Read Excel LifeCycleValidation.xls for pareameterization
Workbook workbook = Workbook.getWorkbook(new File(projectpath +"\\LifeCycleValidation.xls"))
Sheet sheet = workbook.getSheet(0)


//Loop through the rows of excel sheet starting from the second row
for (int i = 1; i &lt; sheet.getRows(); i++) 
{
	Cell cell = sheet.getCell(0, i)
	CellType type = cell.getType()
	def runFlag = cell.getContents()
//	Start Validation of  Product Catalog
	if (runFlag == "YES")
	{
		

//		Pass in to validation only when the current test case and step matches with the excel mappings
		if (currentTestcase == sheet.getCell(1, i).getContents() &amp;&amp; currentTeststep == sheet.getCell(2, i).getContents())
		{
			log.info "Test Case : " + i + " ==> " + sheet.getCell(1, i).getContents()
			log.info "Test Step : " + i + " ==> " + sheet.getCell(2, i).getContents()
			log.info "Row Number : " + i
//			Get the header data from the 5th colum of the data sheet
			String header = sheet.getCell(4, i).getContents();
			elements = header.tokenize(';;;');

//			Using Map to collect the failed assertions
//			Initially declaring an empty map
		

			for (int j = 0; j &lt; elements.size(); j++)
			{
				def responseElement = responseHolder.getDomNode(elements[j])
				if(responseElement != null)
				{
					log.info  elements[j]  + " :: assertion  Passed"
					passedMap.put(j,elements[j])
				}
				else
				{
					log.info  elements[j]  +" :: assertion  Failed"
					failedMap.put(j,elements[j])
				}
			}
		}		
	}
}
workbook.close()

//Asserting the collection
if (passedMap.size() == elements.size())
{
	log.info "All headers are returned as expected"
	assert true //To mark the assertion passed
}
else if(failedMap.size() > 0)
{
	log.info "These headers are not returned in the response : " + failedMap
	assert false ////To mark the assertion failed
}</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Generate Payload for UpgradeEntitlement 3" id="d9427f1d-b0fb-4b31-ad34-2881eeca5e7d"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_InvalidTSMAC" id="d5cf4882-04e4-4e4e-9b89-f1462f6d4627"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_InvalidTSMAC" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/DTIWeb/DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="D:/WorkStation/SOAP_UI/QEP FLOW/DTIGateway/Source/config/schemas/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>9112017081115029109</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2017-09-21</TransmitDate>
         <TransmitTime>12:40:20.70</TransmitTime>
         <TktSeller>
            <TSMAC>WDWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2016-07-29</CmdDate>
            <CmdTime>08:40:20.70</CmdTime>
            <CmdInvoice>3992016072900001</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-09-19</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>16</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>5K002</ProdCode>
               <ProdPrice>473.93</ProdPrice>
               <UpgrdPrice>203.95</UpgrdPrice>
               <FromProdCode>4KF03</FromProdCode>
               <FromPrice>269.98</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>4444855457062688</CCNbr>
                           <CCExpiration>1219</CCExpiration>
                           <CCName>Visa</CCName>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>203.95</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>2017-08-09</ResCreateDate>
               <ResPickupDate>2017-08-09</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="SOAP Response" id="28a1be68-65e0-4efa-8842-0cbc069ebf52" disabled="true"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Generate Payload for UpgradeEntitlement 4" id="afa329fc-c942-4893-a9ad-5968de4b5cf4"><con:settings/><con:config><script>import java.text.SimpleDateFormat

//get date in "MM/dd/yyyy" 
def date = new Date()
sdf = new SimpleDateFormat("MM/dd/yyyy")
datemmddyyyy=sdf.format(date)

def uniqueId = testRunner.testCase.getPropertyValue("counter").toInteger()*testRunner.testCase.getPropertyValue("factor").toInteger();
testRunner.testCase.setPropertyValue("factor", String.valueOf(++testRunner.testCase.getPropertyValue("factor").toInteger()))

//Convert payloadid in to 20 character in "911" + "YYYY" + "mm" +DD + XXXX format
def workString = "911" + datemmddyyyy.substring(6,10)+  datemmddyyyy.substring(0,2)+ datemmddyyyy.substring(3,5) +  (System.currentTimeMillis()+uniqueId)
Payload_ID = workString.substring(0,20)

//To set Payload_ID property Value
testRunner.testCase.setPropertyValue("Payload_ID",Payload_ID )

log.info "Payload_ID value is set to: " + Payload_ID </script></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_InvalidTSLocation" id="f5e0a817-855e-40f4-b43f-46e71c1e5f04" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_InvalidTSLocation" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/DTIWeb/DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="D:/WorkStation/SOAP_UI/QEP FLOW/DTIGateway/Source/config/schemas/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>9112017081115029109</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2017-09-21</TransmitDate>
         <TransmitTime>12:40:20.70</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILEss</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2016-07-29</CmdDate>
            <CmdTime>08:40:20.70</CmdTime>
            <CmdInvoice>3992016072900001</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-09-19</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>16</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>5K002</ProdCode>
               <ProdPrice>473.93</ProdPrice>
               <UpgrdPrice>203.95</UpgrdPrice>
               <FromProdCode>4KF03</FromProdCode>
               <FromPrice>269.98</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>ZZZZZZZZZZZZ2688</CCNbr>
                           <CCExpiration>1218</CCExpiration>
                           <CCName>Visa</CCName>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>203.95</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>2017-08-09</ResCreateDate>
               <ResPickupDate>2017-08-09</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="SOAP Response" id="28a1be68-65e0-4efa-8842-0cbc069ebf52" disabled="true"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_InvalidTicketSite" id="4098b955-95d5-4e0b-9e8a-b68c684d4e73" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_InvalidTicketSite" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:9091/DTIWeb/DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="D:/WorkStation/SOAP_UI/QEP FLOW/DTIGateway/Source/config/schemas/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>9112017081115029109</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2017-09-21</TransmitDate>
         <TransmitTime>12:40:20.70</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2016-07-29</CmdDate>
            <CmdTime>08:40:20.70</CmdTime>
            <CmdInvoice>3992016072900001</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-09-19</TktDate>
                     <TktSite>WAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>16</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>5K002</ProdCode>
               <ProdPrice>473.93</ProdPrice>
               <UpgrdPrice>203.95</UpgrdPrice>
               <FromProdCode>4KF03</FromProdCode>
               <FromPrice>269.98</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>ZZZZZZZZZZZZ2688</CCNbr>
                           <CCExpiration>1218</CCExpiration>
                           <CCName>Visa</CCName>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>203.95</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>2017-08-09</ResCreateDate>
               <ResPickupDate>2017-08-09</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="SOAP Response" id="28a1be68-65e0-4efa-8842-0cbc069ebf52" disabled="true"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_InvalidTicketStation" id="522877c9-edc3-4b47-8b80-e36301d0d4bc" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_InvalidTicketStation" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/DTIWeb/DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="D:/WorkStation/SOAP_UI/QEP FLOW/DTIGateway/Source/config/schemas/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>9112017081115029109</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2017-09-21</TransmitDate>
         <TransmitTime>12:40:20.70</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2016-07-29</CmdDate>
            <CmdTime>08:40:20.70</CmdTime>
            <CmdInvoice>3992016072900001</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-09-19</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS1</TktStation>
                     <TktNbr>16</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>5K002</ProdCode>
               <ProdPrice>473.93</ProdPrice>
               <UpgrdPrice>203.95</UpgrdPrice>
               <FromProdCode>4KF03</FromProdCode>
               <FromPrice>269.98</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>ZZZZZZZZZZZZ2688</CCNbr>
                           <CCExpiration>1218</CCExpiration>
                           <CCName>Visa</CCName>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>203.95</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>2017-08-09</ResCreateDate>
               <ResPickupDate>2017-08-09</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="SOAP Response" id="28a1be68-65e0-4efa-8842-0cbc069ebf52" disabled="true"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_InvalidTicketNumber" id="1fb19fa1-0029-44f7-9273-d31a16564202" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_InvalidTicketNumber" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/DTIWeb/DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="D:/WorkStation/SOAP_UI/QEP FLOW/DTIGateway/Source/config/schemas/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>9112017081115029109</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2017-09-21</TransmitDate>
         <TransmitTime>12:40:20.70</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2016-07-29</CmdDate>
            <CmdTime>08:40:20.70</CmdTime>
            <CmdInvoice>3992016072900001</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-09-19</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>76</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>5K002</ProdCode>
               <ProdPrice>473.93</ProdPrice>
               <UpgrdPrice>203.95</UpgrdPrice>
               <FromProdCode>4KF03</FromProdCode>
               <FromPrice>269.98</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>ZZZZZZZZZZZZ2688</CCNbr>
                           <CCExpiration>1218</CCExpiration>
                           <CCName>Visa</CCName>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>203.95</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>2017-08-09</ResCreateDate>
               <ResPickupDate>2017-08-09</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="SOAP Response" id="28a1be68-65e0-4efa-8842-0cbc069ebf52" disabled="true"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_InvalidUpgradeToProductCode" id="6de15176-25ea-4ff7-8e58-b82681e604fb" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_InvalidUpgradeToProductCode" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/DTIWeb/DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="D:/WorkStation/SOAP_UI/QEP FLOW/DTIGateway/Source/config/schemas/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>9112017081115029109</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2017-09-21</TransmitDate>
         <TransmitTime>12:40:20.70</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2016-07-29</CmdDate>
            <CmdTime>08:40:20.70</CmdTime>
            <CmdInvoice>3992016072900001</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-09-19</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>16</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>5KSD002</ProdCode>
               <ProdPrice>473.93</ProdPrice>
               <UpgrdPrice>203.95</UpgrdPrice>
               <FromProdCode>4KF03</FromProdCode>
               <FromPrice>269.98</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>ZZZZZZZZZZZZ2688</CCNbr>
                           <CCExpiration>1218</CCExpiration>
                           <CCName>Visa</CCName>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>203.95</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>2017-08-09</ResCreateDate>
               <ResPickupDate>2017-08-09</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="SOAP Response" id="28a1be68-65e0-4efa-8842-0cbc069ebf52" disabled="true"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_InvalidUpgradeToProductAmount" id="b50f2507-aaad-443d-bb04-5a2b75356589" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_InvalidUpgradeToProductAmount" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/DTIWeb/DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="D:/WorkStation/SOAP_UI/QEP FLOW/DTIGateway/Source/config/schemas/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>9112017081115029109</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2017-09-21</TransmitDate>
         <TransmitTime>12:40:20.70</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2016-07-29</CmdDate>
            <CmdTime>08:40:20.70</CmdTime>
            <CmdInvoice>3992016072900001</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-09-19</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>16</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>5K002</ProdCode>
               <ProdPrice>41.93</ProdPrice>
               <UpgrdPrice>203.95</UpgrdPrice>
               <FromProdCode>4KF03</FromProdCode>
               <FromPrice>269.98</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>ZZZZZZZZZZZZ2688</CCNbr>
                           <CCExpiration>1218</CCExpiration>
                           <CCName>Visa</CCName>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>203.95</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>2017-08-09</ResCreateDate>
               <ResPickupDate>2017-08-09</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="SOAP Response" id="28a1be68-65e0-4efa-8842-0cbc069ebf52" disabled="true"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_InvalidUpgradeFromProductCode" id="ad428287-66a4-4fa4-ae88-291eb4a945e7" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_InvalidUpgradeFromProductCode" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/DTIWeb/DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="D:/WorkStation/SOAP_UI/QEP FLOW/DTIGateway/Source/config/schemas/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>9112017081115029109</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2017-09-21</TransmitDate>
         <TransmitTime>12:40:20.70</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2016-07-29</CmdDate>
            <CmdTime>08:40:20.70</CmdTime>
            <CmdInvoice>3992016072900001</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-09-19</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>16</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>5K002</ProdCode>
               <ProdPrice>473.93</ProdPrice>
               <UpgrdPrice>203.95</UpgrdPrice>
               <FromProdCode>4KF3203</FromProdCode>
               <FromPrice>269.98</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>ZZZZZZZZZZZZ2688</CCNbr>
                           <CCExpiration>1218</CCExpiration>
                           <CCName>Visa</CCName>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>203.95</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>2017-08-09</ResCreateDate>
               <ResPickupDate>2017-08-09</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="SOAP Response" id="28a1be68-65e0-4efa-8842-0cbc069ebf52" disabled="true"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_InvalidUpgradeFromProductAmount" id="84c90d9b-db0e-44ec-9203-4eb88d66179a" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_InvalidUpgradeFromProductAmount" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/DTIWeb/DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="D:/WorkStation/SOAP_UI/QEP FLOW/DTIGateway/Source/config/schemas/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>9112017081115029109</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2017-09-21</TransmitDate>
         <TransmitTime>12:40:20.70</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2016-07-29</CmdDate>
            <CmdTime>08:40:20.70</CmdTime>
            <CmdInvoice>3992016072900001</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-09-19</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>16</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>5K002</ProdCode>
               <ProdPrice>473.93</ProdPrice>
               <UpgrdPrice>203.95</UpgrdPrice>
               <FromProdCode>4KF03</FromProdCode>
               <FromPrice>654.98</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>ZZZZZZZZZZZZ2688</CCNbr>
                           <CCExpiration>1218</CCExpiration>
                           <CCName>Visa</CCName>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>203.95</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>2017-08-09</ResCreateDate>
               <ResPickupDate>2017-08-09</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="SOAP Response" id="28a1be68-65e0-4efa-8842-0cbc069ebf52" disabled="true"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_InvalidUpgradePrice" id="5f7811c3-c3fb-486a-92cc-06b29ac331a8" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_InvalidUpgradePrice" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/DTIWeb/DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="D:/WorkStation/SOAP_UI/QEP FLOW/DTIGateway/Source/config/schemas/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>9112017081115029109</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2017-09-21</TransmitDate>
         <TransmitTime>12:40:20.70</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2016-07-29</CmdDate>
            <CmdTime>08:40:20.70</CmdTime>
            <CmdInvoice>3992016072900001</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-09-19</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>16</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>5K002</ProdCode>
               <ProdPrice>473.93</ProdPrice>
               <UpgrdPrice>56.95</UpgrdPrice>
               <FromProdCode>4KF03</FromProdCode>
               <FromPrice>269.98</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>ZZZZZZZZZZZZ2688</CCNbr>
                           <CCExpiration>1218</CCExpiration>
                           <CCName>Visa</CCName>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>203.95</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>2017-08-09</ResCreateDate>
               <ResPickupDate>2017-08-09</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="SOAP Response" id="28a1be68-65e0-4efa-8842-0cbc069ebf52" disabled="true"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_InvalidPaymentAmount" id="7dfb9259-68cd-4690-bbe8-1e858890aea8" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_InvalidPaymentAmount" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/DTIWeb/DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="D:/WorkStation/SOAP_UI/QEP FLOW/DTIGateway/Source/config/schemas/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>9112017081115029109</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2017-09-21</TransmitDate>
         <TransmitTime>12:40:20.70</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2016-07-29</CmdDate>
            <CmdTime>08:40:20.70</CmdTime>
            <CmdInvoice>3992016072900001</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-09-19</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>16</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>5K002</ProdCode>
               <ProdPrice>473.93</ProdPrice>
               <UpgrdPrice>203.95</UpgrdPrice>
               <FromProdCode>4KF03</FromProdCode>
               <FromPrice>269.98</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>ZZZZZZZZZZZZ2688</CCNbr>
                           <CCExpiration>1218</CCExpiration>
                           <CCName>Visa</CCName>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>2053.95</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>2017-08-09</ResCreateDate>
               <ResPickupDate>2017-08-09</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="SOAP Response" id="28a1be68-65e0-4efa-8842-0cbc069ebf52" disabled="true"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="transmission - UpgradeEntitlement_InvalidTicketDate" id="a40a3aec-4984-40ae-8908-6e32324b8efa" disabled="true"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>DisneyTicketingServiceSoapBinding</con:interface><con:operation>transmission</con:operation><con:request name="transmission - UpgradeEntitlement_InvalidTicketDate" id="436a8554-2a0c-436e-9620-4530174278b8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:8080/DTIWeb/DTIApp</con:endpoint><con:request><![CDATA[<Transmission xsi:noNamespaceSchemaLocation="D:/WorkStation/SOAP_UI/QEP FLOW/DTIGateway/Source/config/schemas/upgrade_entitlement_request.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
   <Payload>
      <PayloadHeader>
         <PayloadID>9112017081115029109</PayloadID>
         <Target>Test-WDW</Target>
         <Version>1.0</Version>
         <Comm>
            <Protocol>IP</Protocol>
            <Method>Network</Method>
         </Comm>
         <TransmitDate>2017-09-21</TransmitDate>
         <TransmitTime>12:40:20.70</TransmitTime>
         <TktSeller>
            <TSMAC>WDPRONAWDW</TSMAC>
            <TSSystem>CC</TSSystem>
            <TSLocation>PRO_MOBILE</TSLocation>
            <TSSecurity>WaltDisney1</TSSecurity>
         </TktSeller>
         <CommandCount>1</CommandCount>
      </PayloadHeader>
      <Command>
         <CommandHeader>
            <CmdItem>1</CmdItem>
            <CmdTimeout>45</CmdTimeout>
            <CmdDate>2016-07-29</CmdDate>
            <CmdTime>08:40:20.70</CmdTime>
            <CmdInvoice>3992016072900001</CmdInvoice>
            <CmdDevice>127.0.0.1</CmdDevice>
            <CmdOperator>WDPRO</CmdOperator>
         </CommandHeader>
         <UpgradeEntitlementRequest>
            <Ticket>
               <TktItem>1</TktItem>
               <TktID>
                  <TktDSSN>
                     <TktDate>2017-08-9</TktDate>
                     <TktSite>XAK</TktSite>
                     <TktStation>CAS001</TktStation>
                     <TktNbr>16</TktNbr>
                  </TktDSSN>
               </TktID>
               <ProdCode>5K002</ProdCode>
               <ProdPrice>473.93</ProdPrice>
               <UpgrdPrice>203.95</UpgrdPrice>
               <FromProdCode>4KF03</FromProdCode>
               <FromPrice>269.98</FromPrice>
            </Ticket>
            <Payment>
               <PayItem>1</PayItem>
               <PayType>
                  <Installment>
                     <InstallmentCreditCard>
                        <CCManual>
                           <CCNbr>ZZZZZZZZZZZZ2688</CCNbr>
                           <CCExpiration>1218</CCExpiration>
                           <CCName>Visa</CCName>
                        </CCManual>
                     </InstallmentCreditCard>
                     <InstallmentDemoData Addr1="1194 6th Ave" City="San Diego" Country="US" Email="dlrca29@test.com" FirstName="David" LastName="Ferguson" State="CA" Telephone="2034464647" Zip="92101"/>
                  </Installment>
               </PayType>
               <PayAmount>203.95</PayAmount>
            </Payment>
            <Reservation>
               <ResCreateDate>2017-08-09</ResCreateDate>
               <ResPickupDate>2017-08-09</ResPickupDate>
               <ResPickupArea>WillCall</ResPickupArea>
               <ResSalesType>Presale</ResSalesType>
            </Reservation>
            <ClientData>
               <ClientType>Private</ClientType>
               <ClientCategory>WW</ClientCategory>
               <DemoLanguage>en</DemoLanguage>
               <DemoData>
                  <Bill Addr1="884 Addison Dr NE" City="Saint Petersburg" Country="US" Email="wdw48env2x1@mailinator.com" FirstName="Eric" LastName="Stone" Name="Eric Stone" State="FL" Telephone="4265845654" Zip="33716"/>
               </DemoData>
            </ClientData>
         </UpgradeEntitlementRequest>
      </Command>
   </Payload>
</Transmission>]]></con:request><con:assertion type="SOAP Response" id="28a1be68-65e0-4efa-8842-0cbc069ebf52" disabled="true"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties><con:property><con:name>DTIAppUrl</con:name><con:value>http://localhost:8081/DTIWeb/DTIApp</con:value></con:property><con:property><con:name>factor</con:name><con:value>109</con:value></con:property><con:property><con:name>counter</con:name><con:value>100000</con:value></con:property><con:property><con:name>Payload_ID</con:name><con:value>91120170929150668490</con:value></con:property><con:property><con:name>CurrentDate</con:name><con:value>2017-09-19</con:value></con:property><con:property><con:name>DTIInfoSysServlet</con:name><con:value>https://dti-latest.disney.pvt/DTIInfoSys/DTIInfoSysServlet</con:value></con:property><con:property><con:name>TktNId</con:name><con:value>10501619091700005</con:value></con:property><con:property><con:name>Basepath</con:name><con:value>D:/Disney/Software_Disne/apache-tomcat-7.0.75-windows-x64/apache-tomcat-7.0.75/DTIConfig/schemas</con:value></con:property></con:properties></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:requirements/><con:properties/><con:wssContainer/><con:databaseConnectionContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:reporting><con:reportTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:xmlTemplates/><con:parameters/></con:reporting><con:sensitiveInformation/></con:soapui-project>